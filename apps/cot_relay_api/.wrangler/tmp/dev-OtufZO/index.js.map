{
  "version": 3,
  "sources": ["../bundle-irJ2gQ/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/.pnpm/@whatwg-node+fetch@0.9.17/node_modules/@whatwg-node/fetch/dist/global-ponyfill.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/util.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/validator.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js", "../../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js", "../../../node_modules/.pnpm/fast-xml-parser@4.3.5/node_modules/fast-xml-parser/src/fxp.js", "../bundle-irJ2gQ/middleware-loader.entry.ts", "../bundle-irJ2gQ/middleware-insertion-facade.js", "../../../src/index.ts", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/error.js", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/version.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/devAssert.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/isPromise.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/parser.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/error/syntaxError.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/error/GraphQLError.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/isObjectLike.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/location.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/invariant.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/printLocation.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/ast.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/directiveLocation.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/kinds.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/lexer.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/blockString.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/characterClasses.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/tokenKind.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/source.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/inspect.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/instanceOf.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/validate.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/typeComparators.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/definition.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/didYouMean.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/identityFunc.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/keyMap.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/keyValMap.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/mapValue.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/suggestionList.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/naturalCompare.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/toObjMap.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/printer.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/printString.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/visitor.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/valueFromASTUntyped.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/assertName.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/directives.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/scalars.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/introspection.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/astFromValue.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/isIterableObject.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/schema.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/validate.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/TypeInfo.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/typeFromAST.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/specifiedRules.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/predicates.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/sortValueNode.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/execution/collectFields.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/execution/values.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/printPathArray.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/coerceInputValue.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/Path.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/valueFromAST.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/groupBy.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/ValidationContext.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/execution/execute.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/memoize3.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/error/locatedError.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/jsutils/toError.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/type/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/language/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/execution/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/validation/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/error/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/index.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/getOperationAST.mjs", "../../../node_modules/.pnpm/graphql@16.8.1/node_modules/graphql/utilities/lexicographicSortSchema.mjs", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/index.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/getArgumentValues.js", "../../../node_modules/.pnpm/cross-inspect@1.0.0/node_modules/cross-inspect/esm/index.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/errors.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/jsutils.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/rootTypes.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/memoize.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/mapAsyncIterator.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/collectFields.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/AccumulatorMap.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/directives.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/isAsyncIterable.js", "../../../node_modules/.pnpm/@graphql-tools+utils@10.1.0_graphql@16.8.1/node_modules/@graphql-tools/utils/esm/Path.js", "../../../node_modules/.pnpm/@graphql-yoga+logger@2.0.0/node_modules/@graphql-yoga/logger/esm/index.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-graphiql.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/graphiql-html.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-schema.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/server.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/create.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/orchestrator.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/document-string-map.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/utils.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/plugins/use-masked-errors.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/plugins/use-extend-context.js", "../../../node_modules/.pnpm/@envelop+core@5.0.0/node_modules/@envelop/core/esm/plugins/use-engine.js", "../../../node_modules/.pnpm/@graphql-tools+executor@1.2.1_graphql@16.8.1/node_modules/@graphql-tools/executor/esm/execution/execute.js", "../../../node_modules/.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/src/index.ts", "../../../node_modules/.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/src/ValueOrPromise.ts", "../../../node_modules/.pnpm/@graphql-tools+executor@1.2.1_graphql@16.8.1/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js", "../../../node_modules/.pnpm/@graphql-tools+executor@1.2.1_graphql@16.8.1/node_modules/@graphql-tools/executor/esm/execution/invariant.js", "../../../node_modules/.pnpm/@graphql-tools+executor@1.2.1_graphql@16.8.1/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js", "../../../node_modules/.pnpm/@graphql-tools+executor@1.2.1_graphql@16.8.1/node_modules/@graphql-tools/executor/esm/execution/values.js", "../../../node_modules/.pnpm/@graphql-tools+executor@1.2.1_graphql@16.8.1/node_modules/@graphql-tools/executor/esm/execution/normalizedExecutor.js", "../../../node_modules/.pnpm/@whatwg-node+server@0.9.26/node_modules/@whatwg-node/server/esm/createServerAdapter.js", "../../../node_modules/.pnpm/@whatwg-node+server@0.9.26/node_modules/@whatwg-node/server/esm/utils.js", "../../../node_modules/.pnpm/@whatwg-node+server@0.9.26/node_modules/@whatwg-node/server/esm/uwebsockets.js", "../../../node_modules/.pnpm/@whatwg-node+server@0.9.26/node_modules/@whatwg-node/server/esm/plugins/useCors.js", "../../../node_modules/.pnpm/@whatwg-node+server@0.9.26/node_modules/@whatwg-node/server/esm/plugins/useErrorHandling.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-parser/get.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-parser/utils.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-parser/post-form-url-encoded.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-parser/post-graphql-string.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-parser/post-json.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-parser/post-multipart.js", "../../../node_modules/.pnpm/dset@3.1.3/node_modules/dset/dist/index.mjs", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-validation/use-check-graphql-query-params.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-validation/use-check-method-for-graphql.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-validation/use-http-validation-error.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-validation/use-limit-batching.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/request-validation/use-prevent-mutation-via-get.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-health-check.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-parser-and-validation-cache.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/utils/create-lru-cache.js", "../../../node_modules/.pnpm/lru-cache@10.2.0/node_modules/lru-cache/src/index.ts", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-request-parser.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-result-processor.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/result-processor/accept.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/result-processor/multipart.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/result-processor/stringify.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/result-processor/regular.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/result-processor/sse.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/plugins/use-unhandled-route.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/landing-page-html.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/process-request.js", "../../../node_modules/.pnpm/graphql-yoga@5.1.1_graphql@16.8.1/node_modules/graphql-yoga/esm/utils/mask-error.js", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/index.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/global/index.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/global/type-options.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/global/field-options.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/global/classes.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/global/schema-types.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/build-cache.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/errors.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/plugins/index.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/context-cache.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/plugins/plugin.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/plugins/merge-plugins.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/index.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/builder-options.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/configs.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/plugins.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/schema-types.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/type-params.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/types/utils.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/base.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/scalar.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/builtin-scalar.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/index.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/input-list.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/list.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/base64.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/enums.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/input.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/params.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/utils/sort-classes.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/config-store.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/input.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/output.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/input-field.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/input.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/interface.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/builder.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/field.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/base.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/root.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/mutation.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/object.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/query.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/fieldUtils/subscription.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/enum.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/input-object.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/interface.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/object.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/refs/union.ts", "../../../node_modules/.pnpm/@pothos+core@3.41.0_graphql@16.8.1/node_modules/@pothos/core/src/builder.ts", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/index.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/hono.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/hono-base.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/compose.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/context.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/utils/html.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/http-exception.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/request.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/utils/body.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/utils/url.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/reg-exp-router/index.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/reg-exp-router/router.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/reg-exp-router/node.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/reg-exp-router/trie.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/smart-router/index.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/smart-router/router.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/trie-router/index.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/trie-router/router.js", "../../../node_modules/.pnpm/hono@4.0.10/node_modules/hono/dist/router/trie-router/node.js", "../../../node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/.wrangler/tmp/dev-OtufZO",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t  );\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "module.exports.fetch = globalThis.fetch; // To enable: import {fetch} from 'cross-fetch'\nmodule.exports.Headers = globalThis.Headers;\nmodule.exports.Request = globalThis.Request;\nmodule.exports.Response = globalThis.Response;\nmodule.exports.FormData = globalThis.FormData;\nmodule.exports.ReadableStream = globalThis.ReadableStream;\nmodule.exports.WritableStream = globalThis.WritableStream;\nmodule.exports.TransformStream = globalThis.TransformStream;\nmodule.exports.Blob = globalThis.Blob;\nmodule.exports.File = globalThis.File;\nmodule.exports.crypto = globalThis.crypto;\nmodule.exports.btoa = globalThis.btoa;\nmodule.exports.TextEncoder = globalThis.TextEncoder;\nmodule.exports.TextDecoder = globalThis.TextDecoder;\nmodule.exports.URLPattern = globalThis.URLPattern;\nmodule.exports.URL = globalThis.URL;\nmodule.exports.URLSearchParams = globalThis.URLSearchParams;\nmodule.exports.createFetch = () => globalThis;\n", "'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n", "'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n", "\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;", "'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;", "const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n", "'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"\u00A2\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"\u00A3\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"\u00A5\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"\u20AC\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"\u00A9\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"\u00AE\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"\u20B9\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n", "'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n", "const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;", "const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n", "'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n", "'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}", "// // This loads all middlewares exposed on the middleware object\n// // and then starts the invocation chain.\n// // The big idea is that we can add these to the middleware export dynamically\n// // through wrangler, or we can potentially let users directly add them as a sort\n// // of \"plugin\" system.\n\nimport worker from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/.wrangler/tmp/bundle-irJ2gQ/middleware-insertion-facade.js\";\nimport {\n\t__facade_invoke__,\n\t__facade_register__,\n\tDispatcher,\n\tMiddleware,\n} from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/middleware/common.ts\";\n\n// We need to preserve all of the exports from the worker\nexport * from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/.wrangler/tmp/bundle-irJ2gQ/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\t#noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nconst __facade_modules_fetch__: ExportedHandlerFetchHandler = function (\n\trequest,\n\tenv,\n\tctx\n) {\n\tif (worker.fetch === undefined)\n\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\treturn worker.fetch(request, env, ctx);\n};\n\nfunction getMaskedEnv(rawEnv: unknown) {\n\tlet env = rawEnv as Record<string, unknown>;\n\tif (worker.envWrappers && worker.envWrappers.length > 0) {\n\t\tfor (const wrapFn of worker.envWrappers) {\n\t\t\tenv = wrapFn(env);\n\t\t}\n\t}\n\treturn env;\n}\n\n/**\n * This type is here to cause a type error if a new export handler is added to\n * `ExportHandler` without it being included in the `facade` below.\n */\ntype MissingExportHandlers = Omit<\n\tRequired<ExportedHandler>,\n\t\"tail\" | \"trace\" | \"scheduled\" | \"queue\" | \"test\" | \"email\" | \"fetch\"\n>;\n\nlet registeredMiddleware = false;\n\nconst facade: ExportedHandler<unknown> & MissingExportHandlers = {\n\t...(worker.tail && {\n\t\ttail: maskHandlerEnv(worker.tail),\n\t}),\n\t...(worker.trace && {\n\t\ttrace: maskHandlerEnv(worker.trace),\n\t}),\n\t...(worker.scheduled && {\n\t\tscheduled: maskHandlerEnv(worker.scheduled),\n\t}),\n\t...(worker.queue && {\n\t\tqueue: maskHandlerEnv(worker.queue),\n\t}),\n\t...(worker.test && {\n\t\ttest: maskHandlerEnv(worker.test),\n\t}),\n\t...(worker.email && {\n\t\temail: maskHandlerEnv(worker.email),\n\t}),\n\n\tfetch(request, rawEnv, ctx) {\n\t\tconst env = getMaskedEnv(rawEnv);\n\t\t// Get the chain of middleware from the worker object\n\t\tif (worker.middleware && worker.middleware.length > 0) {\n\t\t\t// Make sure we only register middleware once:\n\t\t\t// https://github.com/cloudflare/workers-sdk/issues/2386#issuecomment-1614715911\n\t\t\tif (!registeredMiddleware) {\n\t\t\t\tregisteredMiddleware = true;\n\t\t\t\tfor (const middleware of worker.middleware) {\n\t\t\t\t\t__facade_register__(middleware);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst __facade_modules_dispatch__: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tenv,\n\t\t\t\tctx,\n\t\t\t\t__facade_modules_dispatch__,\n\t\t\t\t__facade_modules_fetch__\n\t\t\t);\n\t\t} else {\n\t\t\t// We didn't have any middleware so we can skip the invocation chain,\n\t\t\t// and just call the fetch handler directly\n\n\t\t\t// We \"don't care\" if this is undefined as we want to have the same behavior\n\t\t\t// as if the worker completely bypassed middleware.\n\t\t\treturn __facade_modules_fetch__(request, env, ctx);\n\t\t}\n\t},\n};\n\ntype HandlerFn<D, R> = (data: D, env: unknown, ctx: ExecutionContext) => R;\nfunction maskHandlerEnv<D, R>(handler: HandlerFn<D, R>): HandlerFn<D, R> {\n\treturn (data, env, ctx) => handler(data, getMaskedEnv(env), ctx);\n}\n\nexport default facade;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/node_modules/.pnpm/wrangler@3.31.0_@cloudflare+workers-types@4.20240222.0/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\t\t\t\tconst envWrappers = [__MIDDLEWARE_0__.wrap,__MIDDLEWARE_1__.wrap].filter(Boolean);\n\t\t\t\tconst facade = {\n\t\t\t\t\t...worker,\n\t\t\t\t\tenvWrappers,\n\t\t\t\t\tmiddleware: [\n\t\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default,\n            ...(worker.middleware ? worker.middleware : []),\n\t\t\t\t\t].filter(Boolean)\n\t\t\t\t}\n\t\t\t\texport * from \"/Users/gwork/workspace/orbis/catalyst/apps/cot_relay_api/src/index.ts\";\n\n\t\t\t\tconst maskDurableObjectDefinition = (cls) =>\n\t\t\t\t\tclass extends cls {\n\t\t\t\t\t\tconstructor(state, env) {\n\t\t\t\t\t\t\tlet wrappedEnv = env\n\t\t\t\t\t\t\tfor (const wrapFn of envWrappers) {\n\t\t\t\t\t\t\t\twrappedEnv = wrapFn(wrappedEnv)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsuper(state, wrappedEnv);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\n\n\t\t\t\texport default facade;", "// This file is intentionally written as if it all exists in the same context\n// The abstraction is left to the reader to implement as necessary\nimport { createYoga } from 'graphql-yoga';\nimport SchemaBuilder from '@pothos/core';\nimport { Hono } from \"hono\";\n\n// Generic typing for schema builder\nexport interface SchemaTypes {\n  Objects: {\n    Point: { lat: number; lon: number; hae: number };\n    Unit: { uid: string; name: string; type: string };\n    Event: { type: string; point: SchemaTypes['Objects']['Point']; unit: SchemaTypes['Objects']['Unit'] };\n  };\n}\n\nconst builder = new SchemaBuilder<SchemaTypes>({});\n\n// Define a Point object type\nbuilder.objectType('Point', {\n  fields: (t) => ({\n    lat: t.exposeFloat('lat', {}),\n    lon: t.exposeFloat('lon', {}),\n    hae: t.exposeFloat('hae', {}), // Height above ellipsoid\n  }),\n});\n\n// Define a Unit object type\nbuilder.objectType('Unit', {\n  fields: (t) => ({\n    uid: t.exposeString('uid', {}),\n    name: t.exposeString('name', {}),\n    type: t.exposeString('type', {}),\n  }),\n});\n\n// Define an Event object type that includes Point and Unit\nbuilder.objectType('Event', {\n  fields: (t) => ({\n    type: t.exposeString('type', {}),\n    point: t.field({\n      type: 'Point',\n      resolve: () => ({\n        lat: 34.2101,\n        lon: -77.8868,\n        hae: 30.48, // Example data\n      }),\n    }),\n    unit: t.field({\n      type: 'Unit',\n      resolve: () => ({\n        uid: \"Unit123\",\n        name: \"Alpha Team\",\n        type: \"Infantry\",\n      }),\n    }),\n  }),\n});\n\n// Add a query field to get an event by type\nbuilder.queryType({\n  fields: (t) => ({\n    event: t.field({\n      type: 'Event',\n      args: {\n        type: t.arg({ type: 'String', required: true }),\n      },\n      resolve: (_, args) => ({\n        // Dummy resolver for demonstration\n        type: args.type,\n        unit: {\n          // Example data\n          uid: \"Unit123\",\n          name: \"Alpha Team\",\n          type: \"Infantry\",\n        },\n        point: {\n          lat: 34.2101,\n          lon: -77.8868,\n          hae: 30.48,\n        },\n      }),\n    }),\n  }),\n});\n\nimport { XMLBuilder } from 'fast-xml-parser';\n\n// Function to convert GraphQL JSON response to CoT XML format using fast-xml-parser\nexport function convertJsonToCotXml(json: any) {\n  // Constructing JSON object to match XML structure\n  const jsonObj = {\n    Event: {\n      '@type': json.type,\n      Point: {\n        '@lat': json.point.lat.toString(),\n        '@lon': json.point.lon.toString(),\n        '@hae': json.point.hae.toString(),\n      },\n      Unit: {\n        '@uid': json.unit.uid,\n        '@name': json.unit.name,\n        '@type': json.unit.type,\n      },\n    },\n  };\n\n  const builder = new XMLBuilder();\n  return builder.build(jsonObj);\n}\n// Example of starting the server, adjusted as necessary for your environment\n// server.start();\n\n// Note: Integration of the `convertJsonToCotXml` function within your GraphQL server logic,\n// such as part of a custom resolver or middleware to convert and return XML responses,\n// is left as an exercise for the reader.\n\n\ntype Bindings = {\n  NODE_ENV: string;\n  LOGGING: string;\n  // ENVs here\n};\n\n\n// Compile the schema above\nexport const schema = builder.toSchema({});\n\n// console.log(\"schema\", schema)\n\n\n// save the schema to a file\n// import fs from \"fs\";\n// fs.writeFileSync(\"schema.graphql\", schema);\n// console.log(\"schema saved to schema.graphql\")\n\n\n//\nconsole.log(\"\");\n// console.log(\"cot-gql://\", schema)\n\n\nconst app = new Hono<{ Bindings: Bindings }>();\n\nexport function doYoga(reqRaw: any, env: any, executionCtx: any) {\n  return createYoga<Bindings & ExecutionContext>({\n    logging: \"info\",\n    // `NODE_ENV` is under `c.env`\n    maskedErrors: env.NODE_ENV == \"production\",\n    // Keep as / so you're using just the hono route\n    graphqlEndpoint: \"/\",\n    schema: schema // feed in your schema here normally\n  }).fetch(reqRaw, env, executionCtx)\n}\n\napp.on([\"POST\", \"GET\"], \"/\", async (c) =>\n  doYoga(c.req, c.env, c.executionCtx)\n);\n\nexport default app;", "import { GraphQLError } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nexport { createGraphQLError };\nfunction isAggregateError(obj) {\n    return obj != null && typeof obj === 'object' && 'errors' in obj;\n}\nfunction hasToString(obj) {\n    return obj != null && typeof obj.toString === 'function';\n}\nexport function isGraphQLError(val) {\n    return val instanceof GraphQLError;\n}\nexport function isOriginalGraphQLError(val) {\n    if (val instanceof GraphQLError) {\n        if (val.originalError != null) {\n            return isOriginalGraphQLError(val.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nexport function handleError(error, maskedErrorsOpts, logger) {\n    const errors = new Set();\n    if (isAggregateError(error)) {\n        for (const singleError of error.errors) {\n            const handledErrors = handleError(singleError, maskedErrorsOpts, logger);\n            for (const handledError of handledErrors) {\n                errors.add(handledError);\n            }\n        }\n    }\n    else if (maskedErrorsOpts) {\n        const maskedError = maskedErrorsOpts.maskError(error, maskedErrorsOpts.errorMessage, maskedErrorsOpts.isDev);\n        if (maskedError !== error) {\n            logger.error(error);\n        }\n        errors.add(isGraphQLError(maskedError)\n            ? maskedError\n            : createGraphQLError(maskedError.message, {\n                originalError: maskedError,\n            }));\n    }\n    else if (isGraphQLError(error)) {\n        errors.add(error);\n    }\n    else if (error instanceof Error) {\n        errors.add(createGraphQLError(error.message, {\n            originalError: error,\n        }));\n    }\n    else if (typeof error === 'string') {\n        errors.add(createGraphQLError(error, {\n            extensions: {\n                unexpected: true,\n            },\n        }));\n    }\n    else if (hasToString(error)) {\n        errors.add(createGraphQLError(error.toString(), {\n            extensions: {\n                unexpected: true,\n            },\n        }));\n    }\n    else {\n        logger.error(error);\n        errors.add(createGraphQLError('Unexpected error.', {\n            extensions: {\n                http: {\n                    unexpected: true,\n                },\n            },\n        }));\n    }\n    return Array.from(errors);\n}\nexport function getResponseInitByRespectingErrors(result, headers = {}, isApplicationJson = false) {\n    let status;\n    let unexpectedErrorExists = false;\n    if ('extensions' in result && result.extensions?.http) {\n        if (result.extensions.http.headers) {\n            Object.assign(headers, result.extensions.http.headers);\n        }\n        if (result.extensions.http.status) {\n            status = result.extensions.http.status;\n        }\n    }\n    if ('errors' in result && result.errors?.length) {\n        for (const error of result.errors) {\n            if (error.extensions?.http) {\n                if (error.extensions.http.headers) {\n                    Object.assign(headers, error.extensions.http.headers);\n                }\n                if (isApplicationJson && error.extensions.http.spec) {\n                    continue;\n                }\n                if (error.extensions.http.status && (!status || error.extensions.http.status > status)) {\n                    status = error.extensions.http.status;\n                }\n            }\n            else if (!isOriginalGraphQLError(error) || error.extensions?.unexpected) {\n                unexpectedErrorExists = true;\n            }\n        }\n    }\n    else {\n        status ||= 200;\n    }\n    if (!status) {\n        if (unexpectedErrorExists && !('data' in result)) {\n            status = 500;\n        }\n        else {\n            status = 200;\n        }\n    }\n    return {\n        status,\n        headers,\n    };\n}\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        obj.length > 0 &&\n        // if one item in the array is a GraphQLError, we're good\n        obj.some(isGraphQLError));\n}\n", "/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n *\n * @packageDocumentation\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version.mjs'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql.mjs'; // Create and operate on GraphQL type definitions and schema.\n\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Definitions\n  GraphQLSchema,\n  GraphQLDirective,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT, // Built-in Directives defined by the Spec\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective, // \"Enum\" of Type Kinds\n  TypeKind, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef, // Predicates\n  isSchema,\n  isDirective,\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  isSpecifiedDirective, // Assertions\n  assertSchema,\n  assertDirective,\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Validate GraphQL schema.\n  validateSchema,\n  assertValidSchema, // Upholds the spec rules about naming.\n  assertName,\n  assertEnumValueName,\n} from './type/index.mjs';\n// Parse and operate on GraphQL language source files.\nexport {\n  Token,\n  Source,\n  Location,\n  OperationTypeNode,\n  getLocation, // Print source location.\n  printLocation,\n  printSourceLocation, // Lex\n  Lexer,\n  TokenKind, // Parse\n  parse,\n  parseValue,\n  parseConstValue,\n  parseType, // Print\n  print, // Visit\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n  Kind,\n  DirectiveLocation, // Predicates\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './language/index.mjs';\n// Execute GraphQL queries.\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  responsePathAsArray,\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n  subscribe,\n  createSourceEventStream,\n} from './execution/index.mjs';\n// Validate GraphQL documents.\nexport {\n  validate,\n  ValidationContext, // All validation rules in the GraphQL Specification.\n  specifiedRules, // Individual validation rules.\n  ExecutableDefinitionsRule,\n  FieldsOnCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownArgumentNamesRule,\n  KnownDirectivesRule,\n  KnownFragmentNamesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  NoFragmentCyclesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedFragmentsRule,\n  NoUnusedVariablesRule,\n  OverlappingFieldsCanBeMergedRule,\n  PossibleFragmentSpreadsRule,\n  ProvidedRequiredArgumentsRule,\n  ScalarLeafsRule,\n  SingleFieldSubscriptionsRule,\n  UniqueArgumentNamesRule,\n  UniqueDirectivesPerLocationRule,\n  UniqueFragmentNamesRule,\n  UniqueInputFieldNamesRule,\n  UniqueOperationNamesRule,\n  UniqueVariableNamesRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule, // SDL-specific validation rules\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  PossibleTypeExtensionsRule, // Custom validation rules\n  NoDeprecatedCustomRule,\n  NoSchemaIntrospectionCustomRule,\n} from './validation/index.mjs';\n// Create, format, and print GraphQL errors.\nexport {\n  GraphQLError,\n  syntaxError,\n  locatedError,\n  printError,\n  formatError,\n} from './error/index.mjs';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n  // Produce the GraphQL query recommended for a full schema introspection.\n  // Accepts optional IntrospectionOptions.\n  getIntrospectionQuery, // Gets the target Operation from a Document.\n  getOperationAST, // Gets the Type for the target Operation AST.\n  getOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery.\n  introspectionFromSchema, // Build a GraphQLSchema from an introspection result.\n  buildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n  buildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\n  buildSchema, // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n  extendSchema, // Sort a GraphQLSchema.\n  lexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\n  printSchema, // Print a GraphQLType to GraphQL Schema language.\n  printType, // Prints the built-in introspection schema in the Schema Language format.\n  printIntrospectionSchema, // Create a GraphQLType from a GraphQL language AST.\n  typeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\n  valueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\n  valueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\n  astFromValue, // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n  TypeInfo,\n  visitWithTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\n  coerceInputValue, // Concatenates multiple AST together.\n  concatAST, // Separates an AST into an AST per Operation.\n  separateOperations, // Strips characters that are not significant to the validity or execution of a GraphQL document.\n  stripIgnoredCharacters, // Comparators for types\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap, // Asserts a string is a valid GraphQL name.\n  assertValidName, // Determine if a string is a valid GraphQL name.\n  isValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './utilities/index.mjs';\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.8.1';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 8,\n  patch: 1,\n  preReleaseTag: null,\n});\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\nexport function isPromise(value) {\n  return (\n    typeof (value === null || value === void 0 ? void 0 : value.then) ===\n    'function'\n  );\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n", "/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  globalThis.process && globalThis.process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(\n      this._values.map((enumValue) => [enumValue.value, enumValue]),\n    );\n    this._nameLookup = keyMap(this._values, (value) => value.name);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    return this._values;\n  }\n\n  getValue(name) {\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "/**\n * Returns the first argument it receives.\n */\nexport function identityFunc(x) {\n  return x;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nexport function keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n", "/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "export function toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case Kind.OBJECT:\n      return keyValMap(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nvar TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport { TypeKind };\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { visit, visitInParallel } from '../language/visitor.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules.mjs';\nimport {\n  SDLValidationContext,\n  ValidationContext,\n} from './ValidationContext.mjs';\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(\n  schema,\n  documentAST,\n  rules = specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || devAssert(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = visitInParallel(rules.map((rule) => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n", "import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, {\n            nodes: node.name,\n          }),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', {\n            nodes: node,\n          }),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    // Memoize so two fragments are not compared for conflicts more than once.\n    if (\n      comparedFragmentPairs.has(\n        referencedFragmentName,\n        fragmentName,\n        areMutuallyExclusive,\n      )\n    ) {\n      continue;\n    }\n\n    comparedFragmentPairs.add(\n      referencedFragmentName,\n      fragmentName,\n      areMutuallyExclusive,\n    );\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (!sameArguments(node1, node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(node1, node2) {\n  const args1 = node1.arguments;\n  const args2 = node2.arguments;\n\n  if (args1 === undefined || args1.length === 0) {\n    return args2 === undefined || args2.length === 0;\n  }\n\n  if (args2 === undefined || args2.length === 0) {\n    return false;\n  }\n  /* c8 ignore next */\n\n  if (args1.length !== args2.length) {\n    /* c8 ignore next */\n    return false;\n    /* c8 ignore next */\n  }\n\n  const values2 = new Map(args2.map(({ name, value }) => [name.value, value]));\n  return args1.every((arg1) => {\n    const value1 = arg1.value;\n    const value2 = values2.get(arg1.name.value);\n\n    if (value2 === undefined) {\n      return false;\n    }\n\n    return stringifyValue(value1) === stringifyValue(value2);\n  });\n}\n\nfunction stringifyValue(value) {\n  return print(sortValueNode(value));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result =\n      (_this$_data$get = this._data.get(key1)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(key2);\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n\n    const map = this._data.get(key1);\n\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n", "import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nexport function pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, {\n          nodes: [knownTypeNames[typeName], node.name],\n        }),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\nimport { getArgumentValues, getVariableValues } from './values.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  try {\n    for (const [responseName, fieldNodes] of fields.entries()) {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result !== undefined) {\n        results[responseName] = result;\n\n        if (isPromise(result)) {\n          containsPromise = true;\n        }\n      }\n    }\n  } catch (error) {\n    if (containsPromise) {\n      // Ensure that any promises returned by other fields are handled, as they may also reject.\n      return promiseForObject(results).finally(() => {\n        throw error;\n      });\n    }\n\n    throw error;\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n", "/**\n * Memoizes the provided three-argument function.\n */\nexport function memoize3(fn) {\n  let cache0;\n  return function memoized(a1, a2, a3) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let cache2 = cache1.get(a2);\n\n    if (cache2 === undefined) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    let fnResult = cache2.get(a3);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2, a3);\n      cache2.set(a3, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n", "export {\n  // Predicate\n  isSchema, // Assertion\n  assertSchema, // GraphQL Schema definition\n  GraphQLSchema,\n} from './schema.mjs';\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Predicates\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField, // Assertions\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Definitions\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType, // Type Wrappers\n  GraphQLList,\n  GraphQLNonNull,\n} from './definition.mjs';\nexport {\n  // Predicate\n  isDirective, // Assertion\n  assertDirective, // Directives Definition\n  GraphQLDirective, // Built-in Directives defined by the Spec\n  isSpecifiedDirective,\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON,\n} from './directives.mjs';\n// Common built-in scalar instances.\nexport {\n  // Predicate\n  isSpecifiedScalarType, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT,\n} from './scalars.mjs';\nexport {\n  // Predicate\n  isIntrospectionType, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // \"Enum\" of Type Kinds\n  TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from './introspection.mjs'; // Validate GraphQL schema.\n\nexport { validateSchema, assertValidSchema } from './validate.mjs'; // Upholds the spec rules about naming.\n\nexport { assertName, assertEnumValueName } from './assertName.mjs';\n", "export { Source } from './source.mjs';\nexport { getLocation } from './location.mjs';\nexport { printLocation, printSourceLocation } from './printLocation.mjs';\nexport { Kind } from './kinds.mjs';\nexport { TokenKind } from './tokenKind.mjs';\nexport { Lexer } from './lexer.mjs';\nexport { parse, parseValue, parseConstValue, parseType } from './parser.mjs';\nexport { print } from './printer.mjs';\nexport {\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n} from './visitor.mjs';\nexport { Location, Token, OperationTypeNode } from './ast.mjs';\nexport {\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './predicates.mjs';\nexport { DirectiveLocation } from './directiveLocation.mjs';\n", "export { pathToArray as responsePathAsArray } from '../jsutils/Path.mjs';\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n} from './execute.mjs';\nexport { subscribe, createSourceEventStream } from './subscribe.mjs';\nexport {\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n} from './values.mjs';\n", "export { validate } from './validate.mjs';\nexport { ValidationContext } from './ValidationContext.mjs';\n// All validation rules in the GraphQL Specification.\nexport { specifiedRules } from './specifiedRules.mjs'; // Spec Section: \"Executable Definitions\"\n\nexport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nexport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nexport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nexport { KnownArgumentNamesRule } from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nexport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nexport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nexport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nexport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nexport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nexport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nexport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nexport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nexport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nexport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nexport { ProvidedRequiredArgumentsRule } from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nexport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nexport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nexport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nexport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nexport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nexport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nexport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nexport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Values Type Correctness\"\n\nexport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nexport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nexport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs'; // SDL-specific validation rules\n\nexport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs';\nexport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nexport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs';\nexport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nexport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs';\nexport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs';\nexport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs';\nexport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Optional rules not defined by the GraphQL Specification\n\nexport { NoDeprecatedCustomRule } from './rules/custom/NoDeprecatedCustomRule.mjs';\nexport { NoSchemaIntrospectionCustomRule } from './rules/custom/NoSchemaIntrospectionCustomRule.mjs';\n", "export { GraphQLError, printError, formatError } from './GraphQLError.mjs';\nexport { syntaxError } from './syntaxError.mjs';\nexport { locatedError } from './locatedError.mjs';\n", "// Produce the GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\n// Gets the target Operation from a Document.\nexport { getOperationAST } from './getOperationAST.mjs'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType.mjs'; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from './introspectionFromSchema.mjs'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema.mjs'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from './buildASTSchema.mjs';\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema.mjs'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema.mjs'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport {\n  printSchema,\n  printType,\n  printIntrospectionSchema,\n} from './printSchema.mjs'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped.mjs'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue.mjs'; // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from './TypeInfo.mjs'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from './coerceInputValue.mjs'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST.mjs'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations.mjs'; // Strips characters that are not significant to the validity or execution of a GraphQL document.\n\nexport { stripIgnoredCharacters } from './stripIgnoredCharacters.mjs'; // Comparators for types\n\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n} from './typeComparators.mjs'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName.mjs'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport {\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './findBreakingChanges.mjs';\n", "import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n", "export * from './loaders.js';\nexport * from './helpers.js';\nexport * from './get-directives.js';\nexport * from './get-fields-with-directives.js';\nexport * from './get-arguments-with-directives.js';\nexport * from './get-implementing-types.js';\nexport * from './print-schema-with-directives.js';\nexport * from './get-fields-with-directives.js';\nexport * from './validate-documents.js';\nexport * from './parse-graphql-json.js';\nexport * from './parse-graphql-sdl.js';\nexport * from './build-operation-for-field.js';\nexport * from './types.js';\nexport * from './filterSchema.js';\nexport * from './heal.js';\nexport * from './getResolversFromSchema.js';\nexport * from './forEachField.js';\nexport * from './forEachDefaultValue.js';\nexport * from './mapSchema.js';\nexport * from './addTypes.js';\nexport * from './rewire.js';\nexport * from './prune.js';\nexport * from './mergeDeep.js';\nexport * from './Interfaces.js';\nexport * from './stub.js';\nexport * from './selectionSets.js';\nexport * from './getResponseKeyFromInfo.js';\nexport * from './fields.js';\nexport * from './renameType.js';\nexport * from './transformInputValue.js';\nexport * from './mapAsyncIterator.js';\nexport * from './updateArgument.js';\nexport * from './implementsAbstractType.js';\nexport * from './errors.js';\nexport * from './observableToAsyncIterable.js';\nexport * from './visitResult.js';\nexport * from './getArgumentValues.js';\nexport * from './valueMatchesCriteria.js';\nexport * from './isAsyncIterable.js';\nexport * from './isDocumentNode.js';\nexport * from './astFromValueUntyped.js';\nexport * from './executor.js';\nexport * from './withCancel.js';\nexport * from './rootTypes.js';\nexport * from './comments.js';\nexport * from './collectFields.js';\nexport { inspect } from 'cross-inspect';\nexport * from './memoize.js';\nexport * from './fixSchemaAst.js';\nexport * from './getOperationASTFromRequest.js';\nexport * from './extractExtensionsFromSchema.js';\nexport * from './Path.js';\nexport * from './jsutils.js';\nexport * from './directives.js';\nexport * from './mergeIncrementalResult.js';\nexport * from './debugTimer.js';\n", "import { inspect } from 'cross-inspect';\nimport { isNonNullType, Kind, print, valueFromAST, } from 'graphql';\nimport { createGraphQLError } from './errors.js';\nimport { hasOwnProperty } from './jsutils.js';\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getArgumentValues(def, node, variableValues = {}) {\n    const coercedValues = {};\n    const argumentNodes = node.arguments ?? [];\n    const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n        ...prev,\n        [arg.name.value]: arg,\n    }), {});\n    for (const { name, type: argType, defaultValue } of def.args) {\n        const argumentNode = argNodeMap[name];\n        if (!argumentNode) {\n            if (defaultValue !== undefined) {\n                coercedValues[name] = defaultValue;\n            }\n            else if (isNonNullType(argType)) {\n                throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', {\n                    nodes: [node],\n                });\n            }\n            continue;\n        }\n        const valueNode = argumentNode.value;\n        let isNull = valueNode.kind === Kind.NULL;\n        if (valueNode.kind === Kind.VARIABLE) {\n            const variableName = valueNode.name.value;\n            if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n                if (defaultValue !== undefined) {\n                    coercedValues[name] = defaultValue;\n                }\n                else if (isNonNullType(argType)) {\n                    throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n                        `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n                        nodes: [valueNode],\n                    });\n                }\n                continue;\n            }\n            isNull = variableValues[variableName] == null;\n        }\n        if (isNull && isNonNullType(argType)) {\n            throw createGraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', {\n                nodes: [valueNode],\n            });\n        }\n        const coercedValue = valueFromAST(valueNode, argType, variableValues);\n        if (coercedValue === undefined) {\n            // Note: ValuesOfCorrectTypeRule validation should catch this before\n            // execution. This is a runtime check to ensure execution does not\n            // continue with an invalid argument value.\n            throw createGraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, {\n                nodes: [valueNode],\n            });\n        }\n        coercedValues[name] = coercedValue;\n    }\n    return coercedValues;\n}\n", "// Taken from graphql-js\n// https://github.com/graphql/graphql-js/blob/main/src/jsutils/inspect.ts\nconst MAX_RECURSIVE_DEPTH = 3;\n/**\n * Used to print values in error messages.\n */\nexport function inspect(value) {\n    return formatValue(value, []);\n}\nfunction formatValue(value, seenValues) {\n    switch (typeof value) {\n        case 'string':\n            return JSON.stringify(value);\n        case 'function':\n            return value.name ? `[function ${value.name}]` : '[function]';\n        case 'object':\n            return formatObjectValue(value, seenValues);\n        default:\n            return String(value);\n    }\n}\nfunction formatError(value) {\n    // eslint-disable-next-line no-constant-condition\n    if ((value.name = 'GraphQLError')) {\n        return value.toString();\n    }\n    return `${value.name}: ${value.message};\\n ${value.stack}`;\n}\nfunction formatObjectValue(value, previouslySeenValues) {\n    if (value === null) {\n        return 'null';\n    }\n    if (value instanceof Error) {\n        if (value.name === 'AggregateError') {\n            return (formatError(value) +\n                '\\n' +\n                formatArray(value.errors, previouslySeenValues));\n        }\n        return formatError(value);\n    }\n    if (previouslySeenValues.includes(value)) {\n        return '[Circular]';\n    }\n    const seenValues = [...previouslySeenValues, value];\n    if (isJSONable(value)) {\n        const jsonValue = value.toJSON();\n        // check for infinite recursion\n        if (jsonValue !== value) {\n            return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);\n        }\n    }\n    else if (Array.isArray(value)) {\n        return formatArray(value, seenValues);\n    }\n    return formatObject(value, seenValues);\n}\nfunction isJSONable(value) {\n    return typeof value.toJSON === 'function';\n}\nfunction formatObject(object, seenValues) {\n    const entries = Object.entries(object);\n    if (entries.length === 0) {\n        return '{}';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[' + getObjectTag(object) + ']';\n    }\n    const properties = entries.map(([key, value]) => key + ': ' + formatValue(value, seenValues));\n    return '{ ' + properties.join(', ') + ' }';\n}\nfunction formatArray(array, seenValues) {\n    if (array.length === 0) {\n        return '[]';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[Array]';\n    }\n    const len = array.length;\n    const items = [];\n    for (let i = 0; i < len; ++i) {\n        items.push(formatValue(array[i], seenValues));\n    }\n    return '[' + items.join(', ') + ']';\n}\nfunction getObjectTag(object) {\n    const tag = Object.prototype.toString\n        .call(object)\n        .replace(/^\\[object /, '')\n        .replace(/]$/, '');\n    if (tag === 'Object' && typeof object.constructor === 'function') {\n        const name = object.constructor.name;\n        if (typeof name === 'string' && name !== '') {\n            return name;\n        }\n    }\n    return tag;\n}\n", "import { GraphQLError, versionInfo } from 'graphql';\nconst possibleGraphQLErrorProperties = [\n    'message',\n    'locations',\n    'path',\n    'nodes',\n    'source',\n    'positions',\n    'originalError',\n    'name',\n    'stack',\n    'extensions',\n];\nfunction isGraphQLErrorLike(error) {\n    return (error != null &&\n        typeof error === 'object' &&\n        Object.keys(error).every(key => possibleGraphQLErrorProperties.includes(key)));\n}\nexport function createGraphQLError(message, options) {\n    if (options?.originalError &&\n        !(options.originalError instanceof Error) &&\n        isGraphQLErrorLike(options.originalError)) {\n        options.originalError = createGraphQLError(options.originalError.message, options.originalError);\n    }\n    if (versionInfo.major >= 17) {\n        return new GraphQLError(message, options);\n    }\n    return new GraphQLError(message, options?.nodes, options?.source, options?.positions, options?.path, options?.originalError, options?.extensions);\n}\nexport function relocatedError(originalError, path) {\n    return createGraphQLError(originalError.message, {\n        nodes: originalError.nodes,\n        source: originalError.source,\n        positions: originalError.positions,\n        path: path == null ? originalError.path : path,\n        originalError,\n        extensions: originalError.extensions,\n    });\n}\n", "export function isIterableObject(value) {\n    return value != null && typeof value === 'object' && Symbol.iterator in value;\n}\nexport function isObjectLike(value) {\n    return typeof value === 'object' && value !== null;\n}\nexport function isPromise(value) {\n    return value?.then != null;\n}\nexport function promiseReduce(values, callbackFn, initialValue) {\n    let accumulator = initialValue;\n    for (const value of values) {\n        accumulator = isPromise(accumulator)\n            ? accumulator.then(resolved => callbackFn(resolved, value))\n            : callbackFn(accumulator, value);\n    }\n    return accumulator;\n}\nexport function hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { createGraphQLError } from './errors.js';\nimport { memoize1 } from './memoize.js';\nexport function getDefinedRootType(schema, operation, nodes) {\n    const rootTypeMap = getRootTypeMap(schema);\n    const rootType = rootTypeMap.get(operation);\n    if (rootType == null) {\n        throw createGraphQLError(`Schema is not configured to execute ${operation} operation.`, {\n            nodes,\n        });\n    }\n    return rootType;\n}\nexport const getRootTypeNames = memoize1(function getRootTypeNames(schema) {\n    const rootTypes = getRootTypes(schema);\n    return new Set([...rootTypes].map(type => type.name));\n});\nexport const getRootTypes = memoize1(function getRootTypes(schema) {\n    const rootTypeMap = getRootTypeMap(schema);\n    return new Set(rootTypeMap.values());\n});\nexport const getRootTypeMap = memoize1(function getRootTypeMap(schema) {\n    const rootTypeMap = new Map();\n    const queryType = schema.getQueryType();\n    if (queryType) {\n        rootTypeMap.set('query', queryType);\n    }\n    const mutationType = schema.getMutationType();\n    if (mutationType) {\n        rootTypeMap.set('mutation', mutationType);\n    }\n    const subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        rootTypeMap.set('subscription', subscriptionType);\n    }\n    return rootTypeMap;\n});\n", "export function memoize1(fn) {\n    const memoize1cache = new WeakMap();\n    return function memoized(a1) {\n        const cachedValue = memoize1cache.get(a1);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1);\n            memoize1cache.set(a1, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2(fn) {\n    const memoize2cache = new WeakMap();\n    return function memoized(a1, a2) {\n        let cache2 = memoize2cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2cache.set(a1, cache2);\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize3(fn) {\n    const memoize3Cache = new WeakMap();\n    return function memoized(a1, a2, a3) {\n        let cache2 = memoize3Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize3Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        const cachedValue = cache3.get(a3);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize4(fn) {\n    const memoize4Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize4Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize4Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cache4 = cache3.get(a3);\n        if (!cache4) {\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cachedValue = cache4.get(a4);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize5(fn) {\n    const memoize5Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize5Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize5Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache4 = cache3.get(a3);\n        if (!cache4) {\n            cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache5 = cache4.get(a4);\n        if (!cache5) {\n            cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        const cachedValue = cache5.get(a5);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2of4(fn) {\n    const memoize2of4cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nexport function memoize2of5(fn) {\n    const memoize2of4cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\n", "import { isPromise } from './jsutils.js';\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterator, onNext, onError, onEnd) {\n    let $return;\n    let abruptClose;\n    let onEndWithValue;\n    if (onEnd) {\n        onEndWithValue = value => {\n            const onEnd$ = onEnd();\n            return isPromise(onEnd$) ? onEnd$.then(() => value) : value;\n        };\n    }\n    if (typeof iterator.return === 'function') {\n        $return = iterator.return;\n        abruptClose = (error) => {\n            const rethrow = () => Promise.reject(error);\n            return $return.call(iterator).then(rethrow, rethrow);\n        };\n    }\n    function mapResult(result) {\n        if (result.done) {\n            return onEndWithValue ? onEndWithValue(result) : result;\n        }\n        return asyncMapValue(result.value, onNext).then(iteratorResult, abruptClose);\n    }\n    let mapReject;\n    if (onError) {\n        // Capture rejectCallback to ensure it cannot be null.\n        const reject = onError;\n        mapReject = (error) => asyncMapValue(error, reject).then(iteratorResult, abruptClose);\n    }\n    return {\n        next() {\n            return iterator.next().then(mapResult, mapReject);\n        },\n        return() {\n            const res$ = $return\n                ? $return.call(iterator).then(mapResult, mapReject)\n                : Promise.resolve({ value: undefined, done: true });\n            return onEndWithValue ? res$.then(onEndWithValue) : res$;\n        },\n        throw(error) {\n            if (typeof iterator.throw === 'function') {\n                return iterator.throw(error).then(mapResult, mapReject);\n            }\n            return Promise.reject(error).catch(abruptClose);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\nfunction asyncMapValue(value, callback) {\n    return new Promise(resolve => resolve(callback(value)));\n}\nfunction iteratorResult(value) {\n    return { value, done: false };\n}\n", "import { getDirectiveValues, GraphQLIncludeDirective, GraphQLSkipDirective, isAbstractType, Kind, typeFromAST, } from 'graphql';\nimport { AccumulatorMap } from './AccumulatorMap.js';\nimport { GraphQLDeferDirective } from './directives.js';\nimport { memoize5 } from './memoize.js';\nfunction collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case Kind.FIELD: {\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                fields.add(getFieldEntryKey(selection), selection);\n                break;\n            }\n            case Kind.INLINE_FRAGMENT: {\n                if (!shouldIncludeNode(variableValues, selection) ||\n                    !doesFragmentConditionMatch(schema, selection, runtimeType)) {\n                    continue;\n                }\n                const defer = getDeferValues(variableValues, selection);\n                if (defer) {\n                    const patchFields = new AccumulatorMap();\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, patchFields, patches, visitedFragmentNames);\n                    patches.push({\n                        label: defer.label,\n                        fields: patchFields,\n                    });\n                }\n                else {\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, patches, visitedFragmentNames);\n                }\n                break;\n            }\n            case Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                const defer = getDeferValues(variableValues, selection);\n                if (visitedFragmentNames.has(fragName) && !defer) {\n                    continue;\n                }\n                const fragment = fragments[fragName];\n                if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {\n                    continue;\n                }\n                if (!defer) {\n                    visitedFragmentNames.add(fragName);\n                }\n                if (defer) {\n                    const patchFields = new AccumulatorMap();\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, patchFields, patches, visitedFragmentNames);\n                    patches.push({\n                        label: defer.label,\n                        fields: patchFields,\n                    });\n                }\n                else {\n                    collectFieldsImpl(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, patches, visitedFragmentNames);\n                }\n                break;\n            }\n        }\n    }\n}\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n */\nexport function collectFields(schema, fragments, variableValues, runtimeType, selectionSet) {\n    const fields = new AccumulatorMap();\n    const patches = [];\n    collectFieldsImpl(schema, fragments, variableValues, runtimeType, selectionSet, fields, patches, new Set());\n    return { fields, patches };\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\nexport function shouldIncludeNode(variableValues, node) {\n    const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n    if (skip?.['if'] === true) {\n        return false;\n    }\n    const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);\n    if (include?.['if'] === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\nexport function doesFragmentConditionMatch(schema, fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n    if (!typeConditionNode) {\n        return true;\n    }\n    const conditionalType = typeFromAST(schema, typeConditionNode);\n    if (conditionalType === type) {\n        return true;\n    }\n    if (isAbstractType(conditionalType)) {\n        const possibleTypes = schema.getPossibleTypes(conditionalType);\n        return possibleTypes.includes(type);\n    }\n    return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nexport function getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Returns an object containing the `@defer` arguments if a field should be\n * deferred based on the experimental flag, defer directive present and\n * not disabled by the \"if\" argument.\n */\nexport function getDeferValues(variableValues, node) {\n    const defer = getDirectiveValues(GraphQLDeferDirective, node, variableValues);\n    if (!defer) {\n        return;\n    }\n    if (defer['if'] === false) {\n        return;\n    }\n    return {\n        label: typeof defer['label'] === 'string' ? defer['label'] : undefined,\n    };\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n */\nexport const collectSubFields = memoize5(function collectSubfields(schema, fragments, variableValues, returnType, fieldNodes) {\n    const subFieldNodes = new AccumulatorMap();\n    const visitedFragmentNames = new Set();\n    const subPatches = [];\n    const subFieldsAndPatches = {\n        fields: subFieldNodes,\n        patches: subPatches,\n    };\n    for (const node of fieldNodes) {\n        if (node.selectionSet) {\n            collectFieldsImpl(schema, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, subPatches, visitedFragmentNames);\n        }\n    }\n    return subFieldsAndPatches;\n});\n", "/**\n * ES6 Map with additional `add` method to accumulate items.\n */\nexport class AccumulatorMap extends Map {\n    get [Symbol.toStringTag]() {\n        return 'AccumulatorMap';\n    }\n    add(key, item) {\n        const group = this.get(key);\n        if (group === undefined) {\n            this.set(key, [item]);\n        }\n        else {\n            group.push(item);\n        }\n    }\n}\n", "import { DirectiveLocation, GraphQLBoolean, GraphQLDirective, GraphQLInt, GraphQLNonNull, GraphQLString, } from 'graphql';\n/**\n * Used to conditionally defer fragments.\n */\nexport const GraphQLDeferDirective = new GraphQLDirective({\n    name: 'defer',\n    description: 'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n    locations: [DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n    args: {\n        if: {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            description: 'Deferred when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: GraphQLString,\n            description: 'Unique name',\n        },\n    },\n});\n/**\n * Used to conditionally stream list fields.\n */\nexport const GraphQLStreamDirective = new GraphQLDirective({\n    name: 'stream',\n    description: 'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n    locations: [DirectiveLocation.FIELD],\n    args: {\n        if: {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            description: 'Stream when true or undefined.',\n            defaultValue: true,\n        },\n        label: {\n            type: GraphQLString,\n            description: 'Unique name',\n        },\n        initialCount: {\n            defaultValue: 0,\n            type: GraphQLInt,\n            description: 'Number of items to return immediately',\n        },\n    },\n});\n", "export function isAsyncIterable(value) {\n    return value?.[Symbol.asyncIterator] != null;\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n    return { prev, key, typename };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\nexport function pathToArray(path) {\n    const flattened = [];\n    let curr = path;\n    while (curr) {\n        flattened.push(curr.key);\n        curr = curr.prev;\n    }\n    return flattened.reverse();\n}\n/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n    return path\n        .map(key => (typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key))\n        .join('');\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nconst ansiCodes = {\n    red: '\\x1b[31m',\n    yellow: '\\x1b[33m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    reset: '\\x1b[0m',\n};\nexport const warnPrefix = ansiCodes.yellow + 'WARN' + ansiCodes.reset;\nexport const infoPrefix = ansiCodes.cyan + 'INFO' + ansiCodes.reset;\nexport const errorPrefix = ansiCodes.red + 'ERR' + ansiCodes.reset;\nexport const debugPrefix = ansiCodes.magenta + 'DEBUG' + ansiCodes.reset;\nconst logLevelScores = {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n    silent: 4,\n};\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => { };\nconst consoleLog = (prefix) => (...args) => console.log(prefix, ...args);\nconst debugLog = console.debug\n    ? (...args) => console.debug(debugPrefix, ...args)\n    : consoleLog(debugPrefix);\nconst infoLog = console.info\n    ? (...args) => console.info(infoPrefix, ...args)\n    : consoleLog(infoPrefix);\nconst warnLog = console.warn\n    ? (...args) => console.warn(warnPrefix, ...args)\n    : consoleLog(warnPrefix);\nconst errorLog = console.error\n    ? (...args) => console.error(errorPrefix, ...args)\n    : consoleLog(errorPrefix);\nexport const createLogger = (logLevel = globalThis.process?.env['DEBUG'] === '1' ? 'debug' : 'info') => {\n    const score = logLevelScores[logLevel];\n    return {\n        debug: score > logLevelScores.debug ? noop : debugLog,\n        info: score > logLevelScores.info ? noop : infoLog,\n        warn: score > logLevelScores.warn ? noop : warnLog,\n        error: score > logLevelScores.error ? noop : errorLog,\n    };\n};\n", "import graphiqlHTML from '../graphiql-html.js';\nexport function shouldRenderGraphiQL({ headers, method }) {\n    return method === 'GET' && !!headers?.get('accept')?.includes('text/html');\n}\nexport const renderGraphiQL = (opts) => graphiqlHTML\n    .replace('__TITLE__', opts?.title || 'Yoga GraphiQL')\n    .replace('__OPTS__', JSON.stringify(opts ?? {}));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useGraphiQL(config) {\n    const logger = config.logger ?? console;\n    let graphiqlOptionsFactory;\n    if (typeof config?.options === 'function') {\n        graphiqlOptionsFactory = config?.options;\n    }\n    else if (typeof config?.options === 'object') {\n        graphiqlOptionsFactory = () => config?.options;\n    }\n    else if (config?.options === false) {\n        graphiqlOptionsFactory = () => false;\n    }\n    else {\n        graphiqlOptionsFactory = () => ({});\n    }\n    const renderer = config?.render ?? renderGraphiQL;\n    let urlPattern;\n    const getUrlPattern = ({ URLPattern }) => {\n        urlPattern ||= new URLPattern({\n            pathname: config.graphqlEndpoint,\n        });\n        return urlPattern;\n    };\n    return {\n        async onRequest({ request, serverContext, fetchAPI, endResponse, url }) {\n            if (shouldRenderGraphiQL(request) &&\n                (request.url.endsWith(config.graphqlEndpoint) ||\n                    request.url.endsWith(`${config.graphqlEndpoint}/`) ||\n                    url.pathname === config.graphqlEndpoint ||\n                    url.pathname === `${config.graphqlEndpoint}/` ||\n                    getUrlPattern(fetchAPI).test(url))) {\n                logger.debug(`Rendering GraphiQL`);\n                const graphiqlOptions = await graphiqlOptionsFactory(request, serverContext);\n                if (graphiqlOptions) {\n                    const graphiQLBody = await renderer({\n                        ...(graphiqlOptions === true ? {} : graphiqlOptions),\n                    });\n                    const response = new fetchAPI.Response(graphiQLBody, {\n                        headers: {\n                            'Content-Type': 'text/html',\n                        },\n                        status: 200,\n                    });\n                    endResponse(response);\n                }\n            }\n        },\n    };\n}\n", "export default \"<!doctype html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><link rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@4.2.1/dist/style.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from\\\"https://unpkg.com/@graphql-yoga/graphiql@4.2.1/dist/yoga-graphiql.es.js\\\";renderYogaGraphiQL(root,__OPTS__)</script></body></html>\";\n", "import { isSchema } from 'graphql';\nexport const useSchema = (schemaDef) => {\n    if (schemaDef == null) {\n        return {};\n    }\n    if (isSchema(schemaDef)) {\n        return {\n            onPluginInit({ setSchema }) {\n                setSchema(schemaDef);\n            },\n        };\n    }\n    if ('then' in schemaDef) {\n        let schema;\n        return {\n            onRequestParse() {\n                return {\n                    async onRequestParseDone() {\n                        schema ||= await schemaDef;\n                    },\n                };\n            },\n            onEnveloped({ setSchema }) {\n                if (!schema) {\n                    throw new Error(`You provide a promise of a schema but it hasn't been resolved yet. Make sure you use this plugin with GraphQL Yoga.`);\n                }\n                setSchema(schema);\n            },\n        };\n    }\n    const schemaByRequest = new WeakMap();\n    return {\n        onRequestParse({ request, serverContext }) {\n            return {\n                async onRequestParseDone() {\n                    const schema = await schemaDef({\n                        ...serverContext,\n                        request,\n                    });\n                    schemaByRequest.set(request, schema);\n                },\n            };\n        },\n        onEnveloped({ setSchema, context }) {\n            if (context?.request == null) {\n                throw new Error('Request object is not available in the context. Make sure you use this plugin with GraphQL Yoga.');\n            }\n            const schema = schemaByRequest.get(context.request);\n            if (schema == null) {\n                throw new Error(`No schema found for this request. Make sure you use this plugin with GraphQL Yoga.`);\n            }\n            setSchema(schema);\n        },\n    };\n};\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { parse, specifiedRules, validate } from 'graphql';\nimport { envelop, useEngine, useExtendContext, useMaskedErrors, } from '@envelop/core';\nimport { normalizedExecutor } from '@graphql-tools/executor';\nimport { createLogger } from '@graphql-yoga/logger';\nimport * as defaultFetchAPI from '@whatwg-node/fetch';\nimport { createServerAdapter, useCORS, useErrorHandling, } from '@whatwg-node/server';\nimport { handleError } from './error.js';\nimport { isGETRequest, parseGETRequest } from './plugins/request-parser/get.js';\nimport { isPOSTFormUrlEncodedRequest, parsePOSTFormUrlEncodedRequest, } from './plugins/request-parser/post-form-url-encoded.js';\nimport { isPOSTGraphQLStringRequest, parsePOSTGraphQLStringRequest, } from './plugins/request-parser/post-graphql-string.js';\nimport { isPOSTJsonRequest, parsePOSTJsonRequest } from './plugins/request-parser/post-json.js';\nimport { isPOSTMultipartRequest, parsePOSTMultipartRequest, } from './plugins/request-parser/post-multipart.js';\nimport { useCheckGraphQLQueryParams } from './plugins/request-validation/use-check-graphql-query-params.js';\nimport { useCheckMethodForGraphQL } from './plugins/request-validation/use-check-method-for-graphql.js';\nimport { useHTTPValidationError } from './plugins/request-validation/use-http-validation-error.js';\nimport { useLimitBatching } from './plugins/request-validation/use-limit-batching.js';\nimport { usePreventMutationViaGET } from './plugins/request-validation/use-prevent-mutation-via-get.js';\nimport { useGraphiQL } from './plugins/use-graphiql.js';\nimport { useHealthCheck } from './plugins/use-health-check.js';\nimport { useParserAndValidationCache, } from './plugins/use-parser-and-validation-cache.js';\nimport { useRequestParser } from './plugins/use-request-parser.js';\nimport { useResultProcessors } from './plugins/use-result-processor.js';\nimport { useSchema } from './plugins/use-schema.js';\nimport { useUnhandledRoute } from './plugins/use-unhandled-route.js';\nimport { processRequest as processGraphQLParams, processResult } from './process-request.js';\nimport { maskError } from './utils/mask-error.js';\n/**\n * Base class that can be extended to create a GraphQL server with any HTTP server framework.\n * @internal\n */\nexport class YogaServer {\n    /**\n     * Instance of envelop\n     */\n    getEnveloped;\n    logger;\n    graphqlEndpoint;\n    fetchAPI;\n    plugins;\n    onRequestParseHooks;\n    onParamsHooks;\n    onResultProcessHooks;\n    maskedErrorsOpts;\n    id;\n    constructor(options) {\n        this.id = options?.id ?? 'yoga';\n        this.fetchAPI = {\n            ...defaultFetchAPI,\n        };\n        if (options?.fetchAPI) {\n            for (const key in options.fetchAPI) {\n                if (options.fetchAPI[key]) {\n                    this.fetchAPI[key] = options.fetchAPI[key];\n                }\n            }\n        }\n        const logger = options?.logging == null ? true : options.logging;\n        this.logger =\n            typeof logger === 'boolean'\n                ? logger === true\n                    ? createLogger()\n                    : createLogger('silent')\n                : typeof logger === 'string'\n                    ? createLogger(logger)\n                    : logger;\n        const maskErrorFn = (typeof options?.maskedErrors === 'object' && options.maskedErrors.maskError) || maskError;\n        const maskedErrorSet = new WeakSet();\n        this.maskedErrorsOpts =\n            options?.maskedErrors === false\n                ? null\n                : {\n                    errorMessage: 'Unexpected error.',\n                    ...(typeof options?.maskedErrors === 'object' ? options.maskedErrors : {}),\n                    maskError: (error, message) => {\n                        if (maskedErrorSet.has(error)) {\n                            return error;\n                        }\n                        const newError = maskErrorFn(error, message, this.maskedErrorsOpts?.isDev);\n                        if (newError !== error) {\n                            this.logger.error(error);\n                        }\n                        maskedErrorSet.add(newError);\n                        return newError;\n                    },\n                };\n        const maskedErrors = this.maskedErrorsOpts == null ? null : this.maskedErrorsOpts;\n        let batchingLimit = 0;\n        if (options?.batching) {\n            if (typeof options.batching === 'boolean') {\n                batchingLimit = 10;\n            }\n            else {\n                batchingLimit = options.batching.limit ?? 10;\n            }\n        }\n        this.graphqlEndpoint = options?.graphqlEndpoint || '/graphql';\n        const graphqlEndpoint = this.graphqlEndpoint;\n        this.plugins = [\n            useEngine({\n                parse,\n                validate,\n                execute: normalizedExecutor,\n                subscribe: normalizedExecutor,\n                specifiedRules,\n            }),\n            // Use the schema provided by the user\n            !!options?.schema && useSchema(options.schema),\n            options?.context != null &&\n                useExtendContext(initialContext => {\n                    if (options?.context) {\n                        if (typeof options.context === 'function') {\n                            return options.context(initialContext);\n                        }\n                        return options.context;\n                    }\n                    return {};\n                }),\n            // Middlewares before processing the incoming HTTP request\n            useHealthCheck({\n                id: this.id,\n                logger: this.logger,\n                endpoint: options?.healthCheckEndpoint,\n            }),\n            options?.cors !== false && useCORS(options?.cors),\n            options?.graphiql !== false &&\n                useGraphiQL({\n                    graphqlEndpoint,\n                    options: options?.graphiql,\n                    render: options?.renderGraphiQL,\n                    logger: this.logger,\n                }),\n            // Middlewares before the GraphQL execution\n            useRequestParser({\n                match: isGETRequest,\n                parse: parseGETRequest,\n            }),\n            useRequestParser({\n                match: isPOSTJsonRequest,\n                parse: parsePOSTJsonRequest,\n            }),\n            options?.multipart !== false &&\n                useRequestParser({\n                    match: isPOSTMultipartRequest,\n                    parse: parsePOSTMultipartRequest,\n                }),\n            useRequestParser({\n                match: isPOSTGraphQLStringRequest,\n                parse: parsePOSTGraphQLStringRequest,\n            }),\n            useRequestParser({\n                match: isPOSTFormUrlEncodedRequest,\n                parse: parsePOSTFormUrlEncodedRequest,\n            }),\n            // Middlewares after the GraphQL execution\n            useResultProcessors(),\n            useErrorHandling((error, request) => {\n                const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n                const result = {\n                    errors,\n                };\n                return processResult({\n                    request,\n                    result,\n                    fetchAPI: this.fetchAPI,\n                    onResultProcessHooks: this.onResultProcessHooks,\n                });\n            }),\n            ...(options?.plugins ?? []),\n            // To make sure those are called at the end\n            {\n                onPluginInit({ addPlugin }) {\n                    if (options?.parserAndValidationCache !== false) {\n                        addPlugin(\n                        // @ts-expect-error Add plugins has context but this hook doesn't care\n                        useParserAndValidationCache(!options?.parserAndValidationCache || options?.parserAndValidationCache === true\n                            ? {}\n                            : options?.parserAndValidationCache));\n                    }\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useLimitBatching(batchingLimit));\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useCheckGraphQLQueryParams());\n                    addPlugin(\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    useUnhandledRoute({\n                        graphqlEndpoint,\n                        showLandingPage: options?.landingPage ?? true,\n                    }));\n                    // We check the method after user-land plugins because the plugin might support more methods (like graphql-sse).\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(useCheckMethodForGraphQL());\n                    // We make sure that the user doesn't send a mutation with GET\n                    // @ts-expect-error Add plugins has context but this hook doesn't care\n                    addPlugin(usePreventMutationViaGET());\n                    if (maskedErrors) {\n                        addPlugin(useMaskedErrors(maskedErrors));\n                    }\n                    addPlugin(\n                    // We handle validation errors at the end\n                    useHTTPValidationError());\n                },\n            },\n        ];\n        this.getEnveloped = envelop({\n            plugins: this.plugins,\n        });\n        this.plugins = this.getEnveloped._plugins;\n        this.onRequestParseHooks = [];\n        this.onParamsHooks = [];\n        this.onResultProcessHooks = [];\n        for (const plugin of this.plugins) {\n            if (plugin) {\n                if (plugin.onYogaInit) {\n                    plugin.onYogaInit({\n                        yoga: this,\n                    });\n                }\n                if (plugin.onRequestParse) {\n                    this.onRequestParseHooks.push(plugin.onRequestParse);\n                }\n                if (plugin.onParams) {\n                    this.onParamsHooks.push(plugin.onParams);\n                }\n                if (plugin.onResultProcess) {\n                    this.onResultProcessHooks.push(plugin.onResultProcess);\n                }\n            }\n        }\n    }\n    async getResultForParams({ params, request, batched, }, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    ...args) {\n        try {\n            let result;\n            for (const onParamsHook of this.onParamsHooks) {\n                await onParamsHook({\n                    params,\n                    request,\n                    setParams(newParams) {\n                        params = newParams;\n                    },\n                    setResult(newResult) {\n                        result = newResult;\n                    },\n                    fetchAPI: this.fetchAPI,\n                });\n            }\n            if (result == null) {\n                const additionalContext = args[0]?.request\n                    ? {\n                        params,\n                    }\n                    : {\n                        request,\n                        params,\n                    };\n                const initialContext = args[0]\n                    ? batched\n                        ? Object.assign({}, args[0], additionalContext)\n                        : Object.assign(args[0], additionalContext)\n                    : additionalContext;\n                const enveloped = this.getEnveloped(initialContext);\n                this.logger.debug(`Processing GraphQL Parameters`);\n                result = await processGraphQLParams({\n                    params,\n                    enveloped,\n                });\n                this.logger.debug(`Processing GraphQL Parameters done.`);\n            }\n            return result;\n        }\n        catch (error) {\n            const errors = handleError(error, this.maskedErrorsOpts, this.logger);\n            const result = {\n                errors,\n            };\n            return result;\n        }\n    }\n    handle = async (request, serverContext) => {\n        let url = new Proxy({}, {\n            get: (_target, prop, _receiver) => {\n                url = new this.fetchAPI.URL(request.url, 'http://localhost');\n                return Reflect.get(url, prop, url);\n            },\n        });\n        let requestParser;\n        const onRequestParseDoneList = [];\n        for (const onRequestParse of this.onRequestParseHooks) {\n            const onRequestParseResult = await onRequestParse({\n                request,\n                url,\n                requestParser,\n                serverContext,\n                setRequestParser(parser) {\n                    requestParser = parser;\n                },\n            });\n            if (onRequestParseResult?.onRequestParseDone != null) {\n                onRequestParseDoneList.push(onRequestParseResult.onRequestParseDone);\n            }\n        }\n        this.logger.debug(`Parsing request to extract GraphQL parameters`);\n        if (!requestParser) {\n            return new this.fetchAPI.Response(null, {\n                status: 415,\n                statusText: 'Unsupported Media Type',\n            });\n        }\n        let requestParserResult = await requestParser(request);\n        for (const onRequestParseDone of onRequestParseDoneList) {\n            await onRequestParseDone({\n                requestParserResult,\n                setRequestParserResult(newParams) {\n                    requestParserResult = newParams;\n                },\n            });\n        }\n        const result = (await (Array.isArray(requestParserResult)\n            ? Promise.all(requestParserResult.map(params => this.getResultForParams({\n                params,\n                request,\n                batched: true,\n            }, serverContext)))\n            : this.getResultForParams({\n                params: requestParserResult,\n                request,\n                batched: false,\n            }, serverContext)));\n        return processResult({\n            request,\n            result,\n            fetchAPI: this.fetchAPI,\n            onResultProcessHooks: this.onResultProcessHooks,\n        });\n    };\n}\nexport function createYoga(options) {\n    const server = new YogaServer(options);\n    return createServerAdapter(server, {\n        fetchAPI: server.fetchAPI,\n        plugins: server['plugins'],\n    });\n    // TODO: Fix in @whatwg-node/server later\n}\n", "import { createEnvelopOrchestrator } from './orchestrator.js';\nfunction notEmpty(value) {\n    return value != null;\n}\nexport function envelop(options) {\n    const plugins = options.plugins.filter(notEmpty);\n    const orchestrator = createEnvelopOrchestrator({\n        plugins,\n    });\n    const getEnveloped = (initialContext = {}) => {\n        const typedOrchestrator = orchestrator;\n        typedOrchestrator.init(initialContext);\n        return {\n            parse: typedOrchestrator.parse(initialContext),\n            validate: typedOrchestrator.validate(initialContext),\n            contextFactory: typedOrchestrator.contextFactory(initialContext),\n            execute: typedOrchestrator.execute,\n            subscribe: typedOrchestrator.subscribe,\n            schema: typedOrchestrator.getCurrentSchema(),\n        };\n    };\n    getEnveloped._plugins = plugins;\n    return getEnveloped;\n}\n", "import { documentStringMap } from './document-string-map.js';\nimport { errorAsyncIterator, finalAsyncIterator, isAsyncIterable, makeExecute, makeSubscribe, mapAsyncIterator, } from './utils.js';\nfunction throwEngineFunctionError(name) {\n    throw Error(`No \\`${name}\\` function found! Register it using \"useEngine\" plugin.`);\n}\nexport function createEnvelopOrchestrator({ plugins, }) {\n    let schema = null;\n    let initDone = false;\n    const parse = () => throwEngineFunctionError('parse');\n    const validate = () => throwEngineFunctionError('validate');\n    const execute = () => throwEngineFunctionError('execute');\n    const subscribe = () => throwEngineFunctionError('subscribe');\n    // Define the initial method for replacing the GraphQL schema, this is needed in order\n    // to allow setting the schema from the onPluginInit callback. We also need to make sure\n    // here not to call the same plugin that initiated the schema switch.\n    const replaceSchema = (newSchema, ignorePluginIndex = -1) => {\n        schema = newSchema;\n        if (initDone) {\n            for (const [i, plugin] of plugins.entries()) {\n                if (i !== ignorePluginIndex) {\n                    plugin.onSchemaChange &&\n                        plugin.onSchemaChange({\n                            schema,\n                            replaceSchema: schemaToSet => {\n                                replaceSchema(schemaToSet, i);\n                            },\n                        });\n                }\n            }\n        }\n    };\n    const contextErrorHandlers = [];\n    // Iterate all plugins and trigger onPluginInit\n    for (let i = 0; i < plugins.length; i++) {\n        const plugin = plugins[i];\n        const pluginsToAdd = [];\n        plugin.onPluginInit &&\n            plugin.onPluginInit({\n                plugins,\n                addPlugin: newPlugin => {\n                    pluginsToAdd.push(newPlugin);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                registerContextErrorHandler: handler => contextErrorHandlers.push(handler),\n            });\n        pluginsToAdd.length && plugins.splice(i + 1, 0, ...pluginsToAdd);\n    }\n    // A set of before callbacks defined here in order to allow it to be used later\n    const beforeCallbacks = {\n        init: [],\n        parse: [],\n        validate: [],\n        subscribe: [],\n        execute: [],\n        context: [],\n    };\n    for (const { onContextBuilding, onExecute, onParse, onSubscribe, onValidate, onEnveloped, } of plugins) {\n        onEnveloped && beforeCallbacks.init.push(onEnveloped);\n        onContextBuilding && beforeCallbacks.context.push(onContextBuilding);\n        onExecute && beforeCallbacks.execute.push(onExecute);\n        onParse && beforeCallbacks.parse.push(onParse);\n        onSubscribe && beforeCallbacks.subscribe.push(onSubscribe);\n        onValidate && beforeCallbacks.validate.push(onValidate);\n    }\n    const init = initialContext => {\n        for (const [i, onEnveloped] of beforeCallbacks.init.entries()) {\n            onEnveloped({\n                context: initialContext,\n                extendContext: extension => {\n                    if (!initialContext) {\n                        return;\n                    }\n                    Object.assign(initialContext, extension);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            });\n        }\n    };\n    const customParse = beforeCallbacks.parse.length\n        ? initialContext => (source, parseOptions) => {\n            let result = null;\n            let parseFn = parse;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onParse of beforeCallbacks.parse) {\n                const afterFn = onParse({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: { source, options: parseOptions },\n                    parseFn,\n                    setParseFn: newFn => {\n                        parseFn = newFn;\n                    },\n                    setParsedDocument: newDoc => {\n                        result = newDoc;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (result === null) {\n                try {\n                    result = parseFn(source, parseOptions);\n                }\n                catch (e) {\n                    result = e;\n                }\n            }\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    replaceParseResult: newResult => {\n                        result = newResult;\n                    },\n                    result,\n                });\n            }\n            if (result === null) {\n                throw new Error(`Failed to parse document.`);\n            }\n            if (result instanceof Error) {\n                throw result;\n            }\n            documentStringMap.set(result, source.toString());\n            return result;\n        }\n        : () => parse;\n    const customValidate = beforeCallbacks.validate\n        .length\n        ? initialContext => (schema, documentAST, rules, typeInfo, validationOptions) => {\n            let actualRules = rules ? [...rules] : undefined;\n            let validateFn = validate;\n            let result = null;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onValidate of beforeCallbacks.validate) {\n                const afterFn = onValidate({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: {\n                        schema,\n                        documentAST,\n                        rules: actualRules,\n                        typeInfo,\n                        options: validationOptions,\n                    },\n                    validateFn,\n                    addValidationRule: rule => {\n                        if (!actualRules) {\n                            actualRules = [];\n                        }\n                        actualRules.push(rule);\n                    },\n                    setValidationFn: newFn => {\n                        validateFn = newFn;\n                    },\n                    setResult: newResults => {\n                        result = newResults;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (!result) {\n                result = validateFn(schema, documentAST, actualRules, typeInfo, validationOptions);\n            }\n            if (!result) {\n                return;\n            }\n            const valid = result.length === 0;\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    valid,\n                    result,\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n            }\n            return result;\n        }\n        : () => validate;\n    const customContextFactory = beforeCallbacks.context.length\n        ? initialContext => async (orchestratorCtx) => {\n            const afterCalls = [];\n            // In order to have access to the \"last working\" context object we keep this outside of the try block:\n            const context = initialContext;\n            if (orchestratorCtx) {\n                Object.assign(context, orchestratorCtx);\n            }\n            try {\n                let isBreakingContextBuilding = false;\n                for (const onContext of beforeCallbacks.context) {\n                    const afterHookResult = await onContext({\n                        context,\n                        extendContext: extension => {\n                            Object.assign(context, extension);\n                        },\n                        breakContextBuilding: () => {\n                            isBreakingContextBuilding = true;\n                        },\n                    });\n                    if (typeof afterHookResult === 'function') {\n                        afterCalls.push(afterHookResult);\n                    }\n                    if (isBreakingContextBuilding === true) {\n                        break;\n                    }\n                }\n                for (const afterCb of afterCalls) {\n                    afterCb({\n                        context,\n                        extendContext: extension => {\n                            Object.assign(context, extension);\n                        },\n                    });\n                }\n                return context;\n            }\n            catch (err) {\n                let error = err;\n                for (const errorCb of contextErrorHandlers) {\n                    errorCb({\n                        context,\n                        error,\n                        setError: err => {\n                            error = err;\n                        },\n                    });\n                }\n                throw error;\n            }\n        }\n        : initialContext => orchestratorCtx => {\n            if (orchestratorCtx) {\n                Object.assign(initialContext, orchestratorCtx);\n            }\n            return initialContext;\n        };\n    const useCustomSubscribe = beforeCallbacks.subscribe.length;\n    const customSubscribe = useCustomSubscribe\n        ? makeSubscribe(async (args) => {\n            let subscribeFn = subscribe;\n            const afterCalls = [];\n            const subscribeErrorHandlers = [];\n            const context = args.contextValue || {};\n            let result;\n            for (const onSubscribe of beforeCallbacks.subscribe) {\n                const after = await onSubscribe({\n                    subscribeFn,\n                    setSubscribeFn: newSubscribeFn => {\n                        subscribeFn = newSubscribeFn;\n                    },\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    args: args,\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                });\n                if (after) {\n                    if (after.onSubscribeResult) {\n                        afterCalls.push(after.onSubscribeResult);\n                    }\n                    if (after.onSubscribeError) {\n                        subscribeErrorHandlers.push(after.onSubscribeError);\n                    }\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (result === undefined) {\n                result = await subscribeFn({\n                    ...args,\n                    contextValue: context,\n                    // Casted for GraphQL.js 15 compatibility\n                    // Can be removed once we drop support for GraphQL.js 15\n                });\n            }\n            if (!result) {\n                return;\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => (result = newResult),\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && isAsyncIterable(result)) {\n                result = finalAsyncIterator(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            if (subscribeErrorHandlers.length && isAsyncIterable(result)) {\n                result = errorAsyncIterator(result, err => {\n                    let error = err;\n                    for (const handler of subscribeErrorHandlers) {\n                        handler({\n                            error,\n                            setError: err => {\n                                error = err;\n                            },\n                        });\n                    }\n                    throw error;\n                });\n            }\n            return result;\n        })\n        : makeSubscribe(subscribe);\n    const useCustomExecute = beforeCallbacks.execute.length;\n    const customExecute = useCustomExecute\n        ? makeExecute(async (args) => {\n            let executeFn = execute;\n            let result;\n            const afterCalls = [];\n            const context = args.contextValue || {};\n            for (const onExecute of beforeCallbacks.execute) {\n                const after = await onExecute({\n                    executeFn,\n                    setExecuteFn: newExecuteFn => {\n                        executeFn = newExecuteFn;\n                    },\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                    extendContext: extension => {\n                        if (typeof extension === 'object') {\n                            Object.assign(context, extension);\n                        }\n                        else {\n                            throw new Error(`Invalid context extension provided! Expected \"object\", got: \"${JSON.stringify(extension)}\" (${typeof extension})`);\n                        }\n                    },\n                    args: args,\n                });\n                if (after?.onExecuteDone) {\n                    afterCalls.push(after.onExecuteDone);\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (result === undefined) {\n                result = (await executeFn({\n                    ...args,\n                    contextValue: context,\n                }));\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = await afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => {\n                                result = newResult;\n                            },\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && isAsyncIterable(result)) {\n                result = finalAsyncIterator(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            return result;\n        })\n        : makeExecute(execute);\n    initDone = true;\n    // This is done in order to trigger the first schema available, to allow plugins that needs the schema\n    // eagerly to have it.\n    if (schema) {\n        for (const [i, plugin] of plugins.entries()) {\n            plugin.onSchemaChange &&\n                plugin.onSchemaChange({\n                    schema,\n                    replaceSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                });\n        }\n    }\n    return {\n        getCurrentSchema() {\n            return schema;\n        },\n        init,\n        parse: customParse,\n        validate: customValidate,\n        execute: customExecute,\n        subscribe: customSubscribe,\n        contextFactory: customContextFactory,\n    };\n}\n", "export const documentStringMap = new WeakMap();\nfunction getDocumentString(document, print) {\n    let documentSource = documentStringMap.get(document);\n    if (!documentSource && print) {\n        documentSource = print(document);\n        documentStringMap.set(document, documentSource);\n    }\n    return documentSource;\n}\nexport { getDocumentString };\n", "export const envelopIsIntrospectionSymbol = Symbol('ENVELOP_IS_INTROSPECTION');\nexport function isIntrospectionOperationString(operation) {\n    return (typeof operation === 'string' ? operation : operation.body).indexOf('__schema') !== -1;\n}\nfunction getSubscribeArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            subscribeFieldResolver: args[7],\n        };\n}\n/**\n * Utility function for making a subscribe function that handles polymorphic arguments.\n */\nexport const makeSubscribe = (subscribeFn) => ((...polyArgs) => subscribeFn(getSubscribeArgs(polyArgs)));\nexport function mapAsyncIterator(source, mapper) {\n    const iterator = source[Symbol.asyncIterator]();\n    async function mapResult(result) {\n        if (result.done) {\n            return result;\n        }\n        try {\n            return { value: await mapper(result.value), done: false };\n        }\n        catch (error) {\n            try {\n                await iterator.return?.();\n            }\n            catch (_error) {\n                /* ignore error */\n            }\n            throw error;\n        }\n    }\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            return await mapResult(await iterator.next());\n        },\n        async return() {\n            const promise = iterator.return?.();\n            return promise ? await mapResult(await promise) : { value: undefined, done: true };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await mapResult(await promise);\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nfunction getExecuteArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            typeResolver: args[7],\n        };\n}\n/**\n * Utility function for making a execute function that handles polymorphic arguments.\n */\nexport const makeExecute = (executeFn) => ((...polyArgs) => executeFn(getExecuteArgs(polyArgs)));\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n *\n * Source: https://github.com/graphql/graphql-js/blob/main/src/jsutils/isAsyncIterable.ts\n */\nexport function isAsyncIterable(maybeAsyncIterable) {\n    return (typeof maybeAsyncIterable === 'object' &&\n        maybeAsyncIterable != null &&\n        typeof maybeAsyncIterable[Symbol.asyncIterator] === 'function');\n}\n/**\n * A utility function for handling `onExecuteDone` hook result, for simplifying the handling of AsyncIterable returned from `execute`.\n *\n * @param payload The payload send to `onExecuteDone` hook function\n * @param fn The handler to be executed on each result\n * @returns a subscription for streamed results, or undefined in case of an non-async\n */\nexport function handleStreamOrSingleExecutionResult(payload, fn) {\n    if (isAsyncIterable(payload.result)) {\n        return { onNext: fn };\n    }\n    fn({\n        args: payload.args,\n        result: payload.result,\n        setResult: payload.setResult,\n    });\n    return undefined;\n}\nexport function finalAsyncIterator(source, onFinal) {\n    const iterator = source[Symbol.asyncIterator]();\n    let isDone = false;\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            const result = await iterator.next();\n            if (result.done && isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return result;\n        },\n        async return() {\n            const promise = iterator.return?.();\n            if (isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nexport function errorAsyncIterator(source, onError) {\n    const iterator = source[Symbol.asyncIterator]();\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            try {\n                return await iterator.next();\n            }\n            catch (error) {\n                onError(error);\n                return { done: true, value: undefined };\n            }\n        },\n        async return() {\n            const promise = iterator.return?.();\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\n", "import { handleStreamOrSingleExecutionResult } from '../utils.js';\nexport const DEFAULT_ERROR_MESSAGE = 'Unexpected error.';\nexport function isGraphQLError(error) {\n    return error instanceof Error && error.name === 'GraphQLError';\n}\nexport function isOriginalGraphQLError(error) {\n    if (isGraphQLError(error)) {\n        if (error.originalError != null) {\n            return isOriginalGraphQLError(error.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nfunction createSerializableGraphQLError(message, originalError, isDev) {\n    const error = new Error(message);\n    error.name = 'GraphQLError';\n    if (isDev) {\n        const extensions = originalError instanceof Error\n            ? { message: originalError.message, stack: originalError.stack }\n            : { message: String(originalError) };\n        Object.defineProperty(error, 'extensions', {\n            get() {\n                return extensions;\n            },\n        });\n    }\n    Object.defineProperty(error, 'toJSON', {\n        value() {\n            return {\n                message: error.message,\n                extensions: error.extensions,\n            };\n        },\n    });\n    return error;\n}\nexport const createDefaultMaskError = (isDev) => (error, message) => {\n    if (isOriginalGraphQLError(error)) {\n        return error;\n    }\n    return createSerializableGraphQLError(message, error, isDev);\n};\nconst isDev = globalThis.process?.env?.NODE_ENV === 'development';\nexport const defaultMaskError = createDefaultMaskError(isDev);\nconst makeHandleResult = (maskError, message) => ({ result, setResult, }) => {\n    if (result.errors != null) {\n        setResult({ ...result, errors: result.errors.map(error => maskError(error, message)) });\n    }\n};\nexport function useMaskedErrors(opts) {\n    const maskError = opts?.maskError ?? defaultMaskError;\n    const message = opts?.errorMessage || DEFAULT_ERROR_MESSAGE;\n    const handleResult = makeHandleResult(maskError, message);\n    return {\n        onPluginInit(context) {\n            context.registerContextErrorHandler(({ error, setError }) => {\n                setError(maskError(error, message));\n            });\n        },\n        onExecute() {\n            return {\n                onExecuteDone(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n            };\n        },\n        onSubscribe() {\n            return {\n                onSubscribeResult(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n                onSubscribeError({ error, setError }) {\n                    setError(maskError(error, message));\n                },\n            };\n        },\n    };\n}\n", "export const useExtendContext = (contextFactory) => ({\n    async onContextBuilding({ context, extendContext }) {\n        extendContext((await contextFactory(context)));\n    },\n});\n", "export const useEngine = (engine) => {\n    return {\n        onExecute: ({ setExecuteFn }) => {\n            if (engine.execute) {\n                setExecuteFn(engine.execute);\n            }\n        },\n        onParse: ({ setParseFn }) => {\n            if (engine.parse) {\n                setParseFn(engine.parse);\n            }\n        },\n        onValidate: ({ setValidationFn, addValidationRule }) => {\n            if (engine.validate) {\n                setValidationFn(engine.validate);\n            }\n            engine.specifiedRules?.map(addValidationRule);\n        },\n        onSubscribe: ({ setSubscribeFn }) => {\n            if (engine.subscribe) {\n                setSubscribeFn(engine.subscribe);\n            }\n        },\n    };\n};\n", "import { assertValidSchema, getDirectiveValues, GraphQLError, isAbstractType, isLeafType, isListType, isNonNullType, isObjectType, Kind, locatedError, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { collectSubFields as _collectSubfields, addPath, collectFields, createGraphQLError, getArgumentValues, getDefinedRootType, GraphQLStreamDirective, inspect, isAsyncIterable, isIterableObject, isObjectLike, isPromise, mapAsyncIterator, memoize1, memoize3, pathToArray, promiseReduce, } from '@graphql-tools/utils';\nimport { flattenAsyncIterable } from './flattenAsyncIterable.js';\nimport { invariant } from './invariant.js';\nimport { promiseForObject } from './promiseForObject.js';\nimport { getVariableValues } from './values.js';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) => _collectSubfields(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * This function returns a Promise of an IncrementalExecutionResults\n * object. This object either consists of a single ExecutionResult, or an\n * object containing an `initialResult` and a stream of `subsequentResults`.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...e.extensions?.['http'],\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    return executeImpl(exeContext);\n}\nfunction executeImpl(exeContext) {\n    // Return a Promise that will eventually resolve to the data described by\n    // The \"Response\" section of the GraphQL specification.\n    //\n    // If errors are encountered while executing a GraphQL field, only that\n    // field and its descendants will be omitted, and sibling fields will still\n    // be executed. An execution which encounters errors will still result in a\n    // resolved Promise.\n    //\n    // Errors from sub-fields of a NonNull type may propagate to the top level,\n    // at which point we still log the error and null the parent field, which\n    // in this case is the entire response.\n    return new ValueOrPromise(() => executeOperation(exeContext))\n        .then(data => {\n        const initialResult = buildResponse(data, exeContext.errors);\n        if (exeContext.subsequentPayloads.size > 0) {\n            return {\n                initialResult: {\n                    ...initialResult,\n                    hasNext: true,\n                },\n                subsequentResults: yieldSubsequentPayloads(exeContext),\n            };\n        }\n        return initialResult;\n    }, (error) => {\n        exeContext.errors.push(error);\n        return buildResponse(null, exeContext.errors);\n    })\n        .resolve();\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\nexport function executeSync(args) {\n    const result = execute(args);\n    // Assert that the execution was synchronous.\n    if (isPromise(result) || 'initialResult' in result) {\n        throw new Error('GraphQL execution failed to complete synchronously.');\n    }\n    return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(data, errors) {\n    return errors.length === 0 ? { data } : { errors, data };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n    console.assert(!!document, 'Must provide document.');\n    // If the schema used for execution is invalid, throw an error.\n    assertValidSchema(schema);\n    // Variables, if provided, must be an object.\n    console.assert(rawVariableValues == null || isObjectLike(rawVariableValues), 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\nexport const getFragmentsFromDocument = memoize1(function getFragmentsFromDocument(document) {\n    const fragments = Object.create(null);\n    for (const definition of document.definitions) {\n        if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n            fragments[definition.name.value] = definition;\n        }\n    }\n    return fragments;\n});\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * TODO: consider no longer exporting this function\n * @internal\n */\nexport function buildExecutionContext(args) {\n    const { schema, document, rootValue, contextValue, variableValues: rawVariableValues, operationName, fieldResolver, typeResolver, subscribeFieldResolver, signal, } = args;\n    // If the schema used for execution is invalid, throw an error.\n    assertValidSchema(schema);\n    const fragments = getFragmentsFromDocument(document);\n    let operation;\n    for (const definition of document.definitions) {\n        switch (definition.kind) {\n            case Kind.OPERATION_DEFINITION:\n                if (operationName == null) {\n                    if (operation !== undefined) {\n                        return [\n                            createGraphQLError('Must provide operation name if query contains multiple operations.'),\n                        ];\n                    }\n                    operation = definition;\n                }\n                else if (definition.name?.value === operationName) {\n                    operation = definition;\n                }\n                break;\n            default:\n            // ignore non-executable definitions\n        }\n    }\n    if (operation == null) {\n        if (operationName != null) {\n            return [createGraphQLError(`Unknown operation named \"${operationName}\".`)];\n        }\n        return [createGraphQLError('Must provide an operation.')];\n    }\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    /* c8 ignore next */\n    const variableDefinitions = operation.variableDefinitions ?? [];\n    const coercedVariableValues = getVariableValues(schema, variableDefinitions, rawVariableValues ?? {}, {\n        maxErrors: 50,\n    });\n    if (coercedVariableValues.errors) {\n        return coercedVariableValues.errors;\n    }\n    return {\n        schema,\n        fragments,\n        rootValue,\n        contextValue,\n        operation,\n        variableValues: coercedVariableValues.coerced,\n        fieldResolver: fieldResolver ?? defaultFieldResolver,\n        typeResolver: typeResolver ?? defaultTypeResolver,\n        subscribeFieldResolver: subscribeFieldResolver ?? defaultFieldResolver,\n        subsequentPayloads: new Set(),\n        errors: [],\n        signal,\n    };\n}\nfunction buildPerEventExecutionContext(exeContext, payload) {\n    return {\n        ...exeContext,\n        rootValue: payload,\n        subsequentPayloads: new Set(),\n        errors: [],\n    };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\nfunction executeOperation(exeContext) {\n    const { operation, schema, fragments, variableValues, rootValue } = exeContext;\n    const rootType = getDefinedRootType(schema, operation.operation, [operation]);\n    if (rootType == null) {\n        createGraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields, patches } = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const path = undefined;\n    let result;\n    if (operation.operation === 'mutation') {\n        result = executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);\n    }\n    else {\n        result = executeFields(exeContext, rootType, rootValue, path, rootFields);\n    }\n    for (const patch of patches) {\n        const { label, fields: patchFields } = patch;\n        executeDeferredFragment(exeContext, rootType, rootValue, patchFields, label, path);\n    }\n    return result;\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n    let abortErrorThrown = false;\n    return promiseReduce(fields, (results, [responseName, fieldNodes]) => {\n        const fieldPath = addPath(path, responseName, parentType.name);\n        if (exeContext.signal?.aborted) {\n            results[responseName] = null;\n            return results;\n        }\n        return new ValueOrPromise(() => executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath)).then(result => {\n            if (result === undefined) {\n                return results;\n            }\n            results[responseName] = result;\n            if (exeContext.signal?.aborted && !abortErrorThrown) {\n                exeContext.errors.push(createGraphQLError('Execution aborted', {\n                    nodes: fieldNodes,\n                    path: pathToArray(fieldPath),\n                    originalError: exeContext.signal?.reason,\n                }));\n                abortErrorThrown = true;\n            }\n            return results;\n        });\n    }, Object.create(null)).resolve();\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord) {\n    const results = Object.create(null);\n    let containsPromise = false;\n    let abortErrorThrown = false;\n    try {\n        for (const [responseName, fieldNodes] of fields) {\n            if (exeContext.signal?.aborted) {\n                results[responseName] = null;\n                continue;\n            }\n            const fieldPath = addPath(path, responseName, parentType.name);\n            const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, asyncPayloadRecord);\n            if (result !== undefined) {\n                results[responseName] = result;\n                if (isPromise(result)) {\n                    containsPromise = true;\n                }\n            }\n            if (exeContext.signal?.aborted && !abortErrorThrown) {\n                exeContext.errors.push(createGraphQLError('Execution aborted', {\n                    nodes: fieldNodes,\n                    path: pathToArray(fieldPath),\n                    originalError: exeContext.signal?.reason,\n                }));\n                abortErrorThrown = true;\n            }\n        }\n    }\n    catch (error) {\n        if (containsPromise) {\n            // Ensure that any promises returned by other fields are handled, as they may also reject.\n            return promiseForObject(results, exeContext.signal).finally(() => {\n                throw error;\n            });\n        }\n        throw error;\n    }\n    // If there are no promises, we can just return the object\n    if (!containsPromise) {\n        return results;\n    }\n    // Otherwise, results is a map from field name to the result of resolving that\n    // field, which is possibly a promise. Return a promise that will return this\n    // same map, but with any promises replaced with the values they resolved to.\n    return promiseForObject(results, exeContext.signal);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\nfunction executeField(exeContext, parentType, source, fieldNodes, path, asyncPayloadRecord) {\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n    if (!fieldDef) {\n        return;\n    }\n    const returnType = fieldDef.type;\n    const resolveFn = fieldDef.resolve ?? exeContext.fieldResolver;\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n    // Get the resolve function, regardless of if its result is normal or abrupt (error).\n    try {\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        // TODO: find a way to memoize, in case this field is within a List type.\n        const args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        const result = resolveFn(source, args, contextValue, info);\n        let completed;\n        if (isPromise(result)) {\n            completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved, asyncPayloadRecord));\n        }\n        else {\n            completed = completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n        }\n        if (isPromise(completed)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            return completed.then(undefined, rawError => {\n                const error = locatedError(rawError, fieldNodes, pathToArray(path));\n                const handledError = handleFieldError(error, returnType, errors);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return completed;\n    }\n    catch (rawError) {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        const handledError = handleFieldError(error, returnType, errors);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        return handledError;\n    }\n}\n/**\n * TODO: consider no longer exporting this function\n * @internal\n */\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n    // The resolve function's optional fourth argument is a collection of\n    // information about the current execution state.\n    return {\n        fieldName: fieldDef.name,\n        fieldNodes,\n        returnType: fieldDef.type,\n        parentType,\n        path,\n        schema: exeContext.schema,\n        fragments: exeContext.fragments,\n        rootValue: exeContext.rootValue,\n        operation: exeContext.operation,\n        variableValues: exeContext.variableValues,\n    };\n}\nfunction handleFieldError(error, returnType, errors) {\n    // If the field type is non-nullable, then it is resolved without any\n    // protection from errors, however it still properly locates the error.\n    if (isNonNullType(returnType)) {\n        throw error;\n    }\n    // Otherwise, error protection is applied, logging the error and resolving\n    // a null value for this field if one is encountered.\n    errors.push(error);\n    return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If result is an Error, throw a located error.\n    if (result instanceof Error) {\n        throw result;\n    }\n    // If field type is NonNull, complete for inner type, and throw field error\n    // if result is null.\n    if (isNonNullType(returnType)) {\n        const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result, asyncPayloadRecord);\n        if (completed === null) {\n            throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);\n        }\n        return completed;\n    }\n    // If result value is null or undefined then return null.\n    if (result == null) {\n        return null;\n    }\n    // If field type is List, complete each item in the list with the inner type\n    if (isListType(returnType)) {\n        return completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n    // returning null if serialization is not possible.\n    if (isLeafType(returnType)) {\n        return completeLeafValue(returnType, result);\n    }\n    // If field type is an abstract type, Interface or Union, determine the\n    // runtime Object type and complete for that type.\n    if (isAbstractType(returnType)) {\n        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is Object, execute and complete all sub-selections.\n    if (isObjectType(returnType)) {\n        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    /* c8 ignore next 6 */\n    // Not reachable, all possible output types have been considered.\n    console.assert(false, 'Cannot complete value of unexpected output type: ' + inspect(returnType));\n}\n/**\n * Returns an object containing the `@stream` arguments if a field should be\n * streamed based on the experimental flag, stream directive present and\n * not disabled by the \"if\" argument.\n */\nfunction getStreamValues(exeContext, fieldNodes, path) {\n    // do not stream inner lists of multi-dimensional lists\n    if (typeof path.key === 'number') {\n        return;\n    }\n    // validation only allows equivalent streams on multiple fields, so it is\n    // safe to only check the first fieldNode for the stream directive\n    const stream = getDirectiveValues(GraphQLStreamDirective, fieldNodes[0], exeContext.variableValues);\n    if (!stream) {\n        return;\n    }\n    if (stream.if === false) {\n        return;\n    }\n    invariant(typeof stream['initialCount'] === 'number', 'initialCount must be a number');\n    invariant(stream['initialCount'] >= 0, 'initialCount must be a positive integer');\n    return {\n        initialCount: stream['initialCount'],\n        label: typeof stream['label'] === 'string' ? stream['label'] : undefined,\n    };\n}\n/**\n * Complete a async iterator value by completing the result and calling\n * recursively until all the results are completed.\n */\nasync function completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord) {\n    exeContext.signal?.addEventListener('abort', () => {\n        iterator.return?.();\n        exeContext.errors.push(createGraphQLError('Execution aborted', {\n            nodes: fieldNodes,\n            path: pathToArray(path),\n            originalError: exeContext.signal?.reason,\n        }));\n    });\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    let containsPromise = false;\n    const completedResults = [];\n    let index = 0;\n    while (true) {\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            executeStreamIterator(index, iterator, exeContext, fieldNodes, info, itemType, path, stream.label, asyncPayloadRecord);\n            break;\n        }\n        const itemPath = addPath(path, index, undefined);\n        let iteration;\n        try {\n            iteration = await iterator.next();\n            if (iteration.done) {\n                break;\n            }\n        }\n        catch (rawError) {\n            const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n            completedResults.push(handleFieldError(error, itemType, errors));\n            break;\n        }\n        if (completeListItemValue(iteration.value, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index += 1;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    const itemType = returnType.ofType;\n    const errors = asyncPayloadRecord?.errors ?? exeContext.errors;\n    if (isAsyncIterable(result)) {\n        const iterator = result[Symbol.asyncIterator]();\n        return completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord);\n    }\n    if (!isIterableObject(result)) {\n        throw createGraphQLError(`Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`);\n    }\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    // This is specified as a simple map, however we're optimizing the path\n    // where the list contains no Promises by avoiding creating another Promise.\n    let containsPromise = false;\n    let previousAsyncPayloadRecord = asyncPayloadRecord;\n    const completedResults = [];\n    let index = 0;\n    for (const item of result) {\n        // No need to modify the info object containing the path,\n        // since from here on it is not ever accessed by resolver functions.\n        const itemPath = addPath(path, index, undefined);\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            previousAsyncPayloadRecord = executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, stream.label, previousAsyncPayloadRecord);\n            index++;\n            continue;\n        }\n        if (completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index++;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list item value by adding it to the completed results.\n *\n * Returns true if the value is a Promise.\n */\nfunction completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord) {\n    try {\n        let completedItem;\n        if (isPromise(item)) {\n            completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n        }\n        else {\n            completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        }\n        if (isPromise(completedItem)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            completedResults.push(completedItem.then(undefined, rawError => {\n                const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                const handledError = handleFieldError(error, itemType, errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            }));\n            return true;\n        }\n        completedResults.push(completedItem);\n    }\n    catch (rawError) {\n        const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n        const handledError = handleFieldError(error, itemType, errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        completedResults.push(handledError);\n    }\n    return false;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n    let serializedResult;\n    // Note: We transform GraphQLError to Error in order to be consistent with\n    // how non-null checks work later on.\n    // See https://github.com/kamilkisiela/graphql-hive/pull/2299\n    // See https://github.com/n1ru4l/envelop/issues/1808\n    try {\n        serializedResult = returnType.serialize(result);\n    }\n    catch (err) {\n        if (err instanceof GraphQLError) {\n            throw new Error(err.message);\n        }\n        throw err;\n    }\n    if (serializedResult == null) {\n        throw new Error(`Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n            `return non-nullable value, returned: ${inspect(serializedResult)}`);\n    }\n    return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    const resolveTypeFn = returnType.resolveType ?? exeContext.typeResolver;\n    const contextValue = exeContext.contextValue;\n    const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n    if (isPromise(runtimeType)) {\n        return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord));\n    }\n    return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord);\n}\nfunction ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {\n    if (runtimeTypeName == null) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`, { nodes: fieldNodes });\n    }\n    // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n    // TODO: remove in 17.0.0 release\n    if (isObjectType(runtimeTypeName)) {\n        throw createGraphQLError('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');\n    }\n    if (typeof runtimeTypeName !== 'string') {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n            `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`);\n    }\n    const runtimeType = exeContext.schema.getType(runtimeTypeName);\n    if (runtimeType == null) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`, { nodes: fieldNodes });\n    }\n    if (!isObjectType(runtimeType)) {\n        throw createGraphQLError(`Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`, { nodes: fieldNodes });\n    }\n    if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n        throw createGraphQLError(`Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`, { nodes: fieldNodes });\n    }\n    return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If there is an isTypeOf predicate function, call it with the\n    // current result. If isTypeOf returns false, then raise an error rather\n    // than continuing execution.\n    if (returnType.isTypeOf) {\n        const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n        if (isPromise(isTypeOf)) {\n            return isTypeOf.then(resolvedIsTypeOf => {\n                if (!resolvedIsTypeOf) {\n                    throw invalidReturnTypeError(returnType, result, fieldNodes);\n                }\n                return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n            });\n        }\n        if (!isTypeOf) {\n            throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n    }\n    return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n    return createGraphQLError(`Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`, {\n        nodes: fieldNodes,\n    });\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord) {\n    // Collect sub-fields to execute to complete this value.\n    const { fields: subFieldNodes, patches: subPatches } = collectSubfields(exeContext, returnType, fieldNodes);\n    const subFields = executeFields(exeContext, returnType, result, path, subFieldNodes, asyncPayloadRecord);\n    for (const subPatch of subPatches) {\n        const { label, fields: subPatchFieldNodes } = subPatch;\n        executeDeferredFragment(exeContext, returnType, result, subPatchFieldNodes, label, path, asyncPayloadRecord);\n    }\n    return subFields;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nexport const defaultTypeResolver = function (value, contextValue, info, abstractType) {\n    // First, look for `__typename`.\n    if (isObjectLike(value) && typeof value['__typename'] === 'string') {\n        return value['__typename'];\n    }\n    // Otherwise, test each possible type.\n    const possibleTypes = info.schema.getPossibleTypes(abstractType);\n    const promisedIsTypeOfResults = [];\n    for (let i = 0; i < possibleTypes.length; i++) {\n        const type = possibleTypes[i];\n        if (type.isTypeOf) {\n            const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n            if (isPromise(isTypeOfResult)) {\n                promisedIsTypeOfResults[i] = isTypeOfResult;\n            }\n            else if (isTypeOfResult) {\n                return type.name;\n            }\n        }\n    }\n    if (promisedIsTypeOfResults.length) {\n        return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {\n            for (let i = 0; i < isTypeOfResults.length; i++) {\n                if (isTypeOfResults[i]) {\n                    return possibleTypes[i].name;\n                }\n            }\n        });\n    }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\nexport const defaultFieldResolver = function (source, args, contextValue, info) {\n    // ensure source is a value for which property access is acceptable.\n    if (isObjectLike(source) || typeof source === 'function') {\n        const property = source[info.fieldName];\n        if (typeof property === 'function') {\n            return source[info.fieldName](args, contextValue, info);\n        }\n        return property;\n    }\n};\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with descriptive\n * errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription resolver\n * logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of result representing the response stream.\n *\n * Each result may be an ExecutionResult with no `hasNext` (if executing the\n * event did not use `@defer` or `@stream`), or an\n * `InitialIncrementalExecutionResult` or `SubsequentIncrementalExecutionResult`\n * (if executing the event used `@defer` or `@stream`). In the case of\n * incremental execution results, each event produces a single\n * `InitialIncrementalExecutionResult` followed by one or more\n * `SubsequentIncrementalExecutionResult`s; all but the last have `hasNext: true`,\n * and the last has `hasNext: false`. There is no interleaving between results\n * generated from the same original event.\n *\n * Accepts an object with named arguments.\n */\nexport function subscribe(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...e.extensions?.['http'],\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    const resultOrStream = createSourceEventStreamImpl(exeContext);\n    if (isPromise(resultOrStream)) {\n        return resultOrStream.then(resolvedResultOrStream => mapSourceToResponse(exeContext, resolvedResultOrStream));\n    }\n    return mapSourceToResponse(exeContext, resultOrStream);\n}\nexport function flattenIncrementalResults(incrementalResults, signal) {\n    const subsequentIterator = incrementalResults.subsequentResults;\n    let initialResultSent = false;\n    let done = false;\n    signal?.addEventListener('abort', () => {\n        done = true;\n        subsequentIterator.throw?.(signal?.reason);\n    });\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next() {\n            if (done) {\n                return Promise.resolve({\n                    value: undefined,\n                    done,\n                });\n            }\n            if (initialResultSent) {\n                return subsequentIterator.next();\n            }\n            initialResultSent = true;\n            return Promise.resolve({\n                value: incrementalResults.initialResult,\n                done,\n            });\n        },\n        return() {\n            done = true;\n            return subsequentIterator.return();\n        },\n        throw(error) {\n            done = true;\n            return subsequentIterator.throw(error);\n        },\n    };\n}\nasync function* ensureAsyncIterable(someExecutionResult, signal) {\n    if ('initialResult' in someExecutionResult) {\n        yield* flattenIncrementalResults(someExecutionResult, signal);\n    }\n    else {\n        yield someExecutionResult;\n    }\n}\nfunction mapSourceToResponse(exeContext, resultOrStream) {\n    if (!isAsyncIterable(resultOrStream)) {\n        return resultOrStream;\n    }\n    // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n    return flattenAsyncIterable(mapAsyncIterator(resultOrStream[Symbol.asyncIterator](), async (payload) => ensureAsyncIterable(await executeImpl(buildPerEventExecutionContext(exeContext, payload)), exeContext.signal), async function* (error) {\n        const wrappedError = createGraphQLError(error.message, {\n            originalError: error,\n            nodes: [exeContext.operation],\n        });\n        yield {\n            errors: [wrappedError],\n        };\n    }));\n}\nfunction createSourceEventStreamImpl(exeContext) {\n    try {\n        const eventStream = executeSubscription(exeContext);\n        if (isPromise(eventStream)) {\n            return eventStream.then(undefined, error => ({ errors: [error] }));\n        }\n        return eventStream;\n    }\n    catch (error) {\n        return { errors: [error] };\n    }\n}\nfunction executeSubscription(exeContext) {\n    const { schema, fragments, operation, variableValues, rootValue } = exeContext;\n    const rootType = schema.getSubscriptionType();\n    if (rootType == null) {\n        throw createGraphQLError('Schema is not configured to execute subscription operation.', {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields } = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const [responseName, fieldNodes] = [...rootFields.entries()][0];\n    const fieldName = fieldNodes[0].name.value;\n    const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n    if (!fieldDef) {\n        throw createGraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n            nodes: fieldNodes,\n        });\n    }\n    const path = addPath(undefined, responseName, rootType.name);\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n    try {\n        // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n        // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        // Call the `subscribe()` resolver or the default resolver to produce an\n        // AsyncIterable yielding raw payloads.\n        const resolveFn = fieldDef.subscribe ?? exeContext.subscribeFieldResolver;\n        const result = resolveFn(rootValue, args, contextValue, info);\n        if (isPromise(result)) {\n            return result.then(assertEventStream).then(undefined, error => {\n                throw locatedError(error, fieldNodes, pathToArray(path));\n            });\n        }\n        return assertEventStream(result, exeContext.signal);\n    }\n    catch (error) {\n        throw locatedError(error, fieldNodes, pathToArray(path));\n    }\n}\nfunction assertEventStream(result, signal) {\n    if (result instanceof Error) {\n        throw result;\n    }\n    // Assert field returned an event stream, otherwise yield an error.\n    if (!isAsyncIterable(result)) {\n        throw createGraphQLError('Subscription field must return Async Iterable. ' + `Received: ${inspect(result)}.`);\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            const asyncIterator = result[Symbol.asyncIterator]();\n            signal?.addEventListener('abort', () => {\n                asyncIterator.return?.();\n            });\n            return asyncIterator;\n        },\n    };\n}\nfunction executeDeferredFragment(exeContext, parentType, sourceValue, fields, label, path, parentContext) {\n    const asyncPayloadRecord = new DeferredFragmentRecord({\n        label,\n        path,\n        parentContext,\n        exeContext,\n    });\n    let promiseOrData;\n    try {\n        promiseOrData = executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord);\n        if (isPromise(promiseOrData)) {\n            promiseOrData = promiseOrData.then(null, e => {\n                asyncPayloadRecord.errors.push(e);\n                return null;\n            });\n        }\n    }\n    catch (e) {\n        asyncPayloadRecord.errors.push(e);\n        promiseOrData = null;\n    }\n    asyncPayloadRecord.addData(promiseOrData);\n}\nfunction executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, label, parentContext) {\n    const asyncPayloadRecord = new StreamRecord({\n        label,\n        path: itemPath,\n        parentContext,\n        exeContext,\n    });\n    let completedItem;\n    try {\n        try {\n            if (isPromise(item)) {\n                completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n            }\n            else {\n                completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n            }\n            if (isPromise(completedItem)) {\n                // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n                // to take a second callback for the error case.\n                completedItem = completedItem.then(undefined, rawError => {\n                    const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                    const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                    filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                    return handledError;\n                });\n            }\n        }\n        catch (rawError) {\n            const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n            completedItem = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n            filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        }\n    }\n    catch (error) {\n        asyncPayloadRecord.errors.push(error);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        asyncPayloadRecord.addItems(null);\n        return asyncPayloadRecord;\n    }\n    let completedItems;\n    if (isPromise(completedItem)) {\n        completedItems = completedItem.then(value => [value], error => {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            return null;\n        });\n    }\n    else {\n        completedItems = [completedItem];\n    }\n    asyncPayloadRecord.addItems(completedItems);\n    return asyncPayloadRecord;\n}\nasync function executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath) {\n    let item;\n    try {\n        const { value, done } = await iterator.next();\n        if (done) {\n            asyncPayloadRecord.setIsCompletedIterator();\n            return { done, value: undefined };\n        }\n        item = value;\n    }\n    catch (rawError) {\n        const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        // don't continue if iterator throws\n        return { done: true, value };\n    }\n    let completedItem;\n    try {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        if (isPromise(completedItem)) {\n            completedItem = completedItem.then(undefined, rawError => {\n                const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n                const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return { done: false, value: completedItem };\n    }\n    catch (rawError) {\n        const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        return { done: false, value };\n    }\n}\nasync function executeStreamIterator(initialIndex, iterator, exeContext, fieldNodes, info, itemType, path, label, parentContext) {\n    let index = initialIndex;\n    let previousAsyncPayloadRecord = parentContext ?? undefined;\n    while (true) {\n        const itemPath = addPath(path, index, undefined);\n        const asyncPayloadRecord = new StreamRecord({\n            label,\n            path: itemPath,\n            parentContext: previousAsyncPayloadRecord,\n            iterator,\n            exeContext,\n        });\n        let iteration;\n        try {\n            iteration = await executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath);\n        }\n        catch (error) {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            asyncPayloadRecord.addItems(null);\n            // entire stream has errored and bubbled upwards\n            if (iterator?.return) {\n                iterator.return().catch(() => {\n                    // ignore errors\n                });\n            }\n            return;\n        }\n        const { done, value: completedItem } = iteration;\n        let completedItems;\n        if (isPromise(completedItem)) {\n            completedItems = completedItem.then(value => [value], error => {\n                asyncPayloadRecord.errors.push(error);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return null;\n            });\n        }\n        else {\n            completedItems = [completedItem];\n        }\n        asyncPayloadRecord.addItems(completedItems);\n        if (done) {\n            break;\n        }\n        previousAsyncPayloadRecord = asyncPayloadRecord;\n        index++;\n    }\n}\nfunction filterSubsequentPayloads(exeContext, nullPath, currentAsyncRecord) {\n    const nullPathArray = pathToArray(nullPath);\n    exeContext.subsequentPayloads.forEach(asyncRecord => {\n        if (asyncRecord === currentAsyncRecord) {\n            // don't remove payload from where error originates\n            return;\n        }\n        for (let i = 0; i < nullPathArray.length; i++) {\n            if (asyncRecord.path[i] !== nullPathArray[i]) {\n                // asyncRecord points to a path unaffected by this payload\n                return;\n            }\n        }\n        // asyncRecord path points to nulled error field\n        if (isStreamPayload(asyncRecord) && asyncRecord.iterator?.return) {\n            asyncRecord.iterator.return().catch(() => {\n                // ignore error\n            });\n        }\n        exeContext.subsequentPayloads.delete(asyncRecord);\n    });\n}\nfunction getCompletedIncrementalResults(exeContext) {\n    const incrementalResults = [];\n    for (const asyncPayloadRecord of exeContext.subsequentPayloads) {\n        const incrementalResult = {};\n        if (!asyncPayloadRecord.isCompleted) {\n            continue;\n        }\n        exeContext.subsequentPayloads.delete(asyncPayloadRecord);\n        if (isStreamPayload(asyncPayloadRecord)) {\n            const items = asyncPayloadRecord.items;\n            if (asyncPayloadRecord.isCompletedIterator) {\n                // async iterable resolver just finished but there may be pending payloads\n                continue;\n            }\n            incrementalResult.items = items;\n        }\n        else {\n            const data = asyncPayloadRecord.data;\n            incrementalResult.data = data ?? null;\n        }\n        incrementalResult.path = asyncPayloadRecord.path;\n        if (asyncPayloadRecord.label) {\n            incrementalResult.label = asyncPayloadRecord.label;\n        }\n        if (asyncPayloadRecord.errors.length > 0) {\n            incrementalResult.errors = asyncPayloadRecord.errors;\n        }\n        incrementalResults.push(incrementalResult);\n    }\n    return incrementalResults;\n}\nfunction yieldSubsequentPayloads(exeContext) {\n    let isDone = false;\n    async function next() {\n        if (isDone) {\n            return { value: undefined, done: true };\n        }\n        await Promise.race(Array.from(exeContext.subsequentPayloads).map(p => p.promise));\n        if (isDone) {\n            // a different call to next has exhausted all payloads\n            return { value: undefined, done: true };\n        }\n        const incremental = getCompletedIncrementalResults(exeContext);\n        const hasNext = exeContext.subsequentPayloads.size > 0;\n        if (!incremental.length && hasNext) {\n            return next();\n        }\n        if (!hasNext) {\n            isDone = true;\n        }\n        return {\n            value: incremental.length ? { incremental, hasNext } : { hasNext },\n            done: false,\n        };\n    }\n    function returnStreamIterators() {\n        const promises = [];\n        exeContext.subsequentPayloads.forEach(asyncPayloadRecord => {\n            if (isStreamPayload(asyncPayloadRecord) && asyncPayloadRecord.iterator?.return) {\n                promises.push(asyncPayloadRecord.iterator.return());\n            }\n        });\n        return Promise.all(promises);\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next,\n        async return() {\n            await returnStreamIterators();\n            isDone = true;\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            await returnStreamIterators();\n            isDone = true;\n            return Promise.reject(error);\n        },\n    };\n}\nclass DeferredFragmentRecord {\n    constructor(opts) {\n        this.type = 'defer';\n        this.label = opts.label;\n        this.path = pathToArray(opts.path);\n        this.parentContext = opts.parentContext;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.data = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(data => {\n            this.data = data;\n            this.isCompleted = true;\n        });\n    }\n    addData(data) {\n        const parentData = this.parentContext?.promise;\n        if (parentData) {\n            this._resolve?.(parentData.then(() => data));\n            return;\n        }\n        this._resolve?.(data);\n    }\n}\nclass StreamRecord {\n    constructor(opts) {\n        this.type = 'stream';\n        this.items = null;\n        this.label = opts.label;\n        this.path = pathToArray(opts.path);\n        this.parentContext = opts.parentContext;\n        this.iterator = opts.iterator;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.items = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(items => {\n            this.items = items;\n            this.isCompleted = true;\n        });\n    }\n    addItems(items) {\n        const parentData = this.parentContext?.promise;\n        if (parentData) {\n            this._resolve?.(parentData.then(() => items));\n            return;\n        }\n        this._resolve?.(items);\n    }\n    setIsCompletedIterator() {\n        this.isCompletedIterator = true;\n    }\n}\nfunction isStreamPayload(asyncPayload) {\n    return asyncPayload.type === 'stream';\n}\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\nexport function getFieldDef(schema, parentType, fieldNode) {\n    const fieldName = fieldNode.name.value;\n    if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return SchemaMetaFieldDef;\n    }\n    else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return TypeMetaFieldDef;\n    }\n    else if (fieldName === TypeNameMetaFieldDef.name) {\n        return TypeNameMetaFieldDef;\n    }\n    return parentType.getFields()[fieldName];\n}\nexport function isIncrementalResult(result) {\n    return 'incremental' in result;\n}\n", null, null, "/**\n * Given an AsyncIterable of AsyncIterables, flatten all yielded results into a\n * single AsyncIterable.\n */\nexport function flattenAsyncIterable(iterable) {\n    // You might think this whole function could be replaced with\n    //\n    //    async function* flattenAsyncIterable(iterable) {\n    //      for await (const subIterator of iterable) {\n    //        yield* subIterator;\n    //      }\n    //    }\n    //\n    // but calling `.return()` on the iterator it returns won't interrupt the `for await`.\n    const topIterator = iterable[Symbol.asyncIterator]();\n    let currentNestedIterator;\n    let waitForCurrentNestedIterator;\n    let done = false;\n    async function next() {\n        if (done) {\n            return { value: undefined, done: true };\n        }\n        try {\n            if (!currentNestedIterator) {\n                // Somebody else is getting it already.\n                if (waitForCurrentNestedIterator) {\n                    await waitForCurrentNestedIterator;\n                    return await next();\n                }\n                // Nobody else is getting it. We should!\n                let resolve;\n                waitForCurrentNestedIterator = new Promise(r => {\n                    resolve = r;\n                });\n                const topIteratorResult = await topIterator.next();\n                if (topIteratorResult.done) {\n                    // Given that done only ever transitions from false to true,\n                    // require-atomic-updates is being unnecessarily cautious.\n                    done = true;\n                    return await next();\n                }\n                // eslint is making a reasonable point here, but we've explicitly protected\n                // ourself from the race condition by ensuring that only the single call\n                // that assigns to waitForCurrentNestedIterator is allowed to assign to\n                // currentNestedIterator or waitForCurrentNestedIterator.\n                currentNestedIterator = topIteratorResult.value[Symbol.asyncIterator]();\n                waitForCurrentNestedIterator = undefined;\n                resolve();\n                return await next();\n            }\n            const rememberCurrentNestedIterator = currentNestedIterator;\n            const nestedIteratorResult = await currentNestedIterator.next();\n            if (!nestedIteratorResult.done) {\n                return nestedIteratorResult;\n            }\n            // The nested iterator is done. If it's still the current one, make it not\n            // current. (If it's not the current one, somebody else has made us move on.)\n            if (currentNestedIterator === rememberCurrentNestedIterator) {\n                currentNestedIterator = undefined;\n            }\n            return await next();\n        }\n        catch (err) {\n            done = true;\n            throw err;\n        }\n    }\n    return {\n        next,\n        async return() {\n            done = true;\n            await Promise.all([currentNestedIterator?.return?.(), topIterator.return?.()]);\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            done = true;\n            await Promise.all([currentNestedIterator?.throw?.(error), topIterator.throw?.(error)]);\n            /* c8 ignore next */\n            throw error;\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n", "export function invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n    }\n}\n", "/**\n * This function transforms a JS object `Record<string, Promise<T>>` into\n * a `Promise<Record<string, T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport async function promiseForObject(object, signal) {\n    const resolvedObject = Object.create(null);\n    await new Promise((resolve, reject) => {\n        signal?.addEventListener('abort', () => {\n            resolve();\n        });\n        Promise.all(Object.entries(object).map(async ([key, value]) => {\n            resolvedObject[key] = await value;\n        })).then(() => resolve(), reject);\n    });\n    return resolvedObject;\n}\n", "import { coerceInputValue, isInputType, isNonNullType, print, typeFromAST, valueFromAST, } from 'graphql';\nimport { createGraphQLError, hasOwnProperty, inspect, printPathArray } from '@graphql-tools/utils';\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n    const errors = [];\n    const maxErrors = options?.maxErrors;\n    try {\n        const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n            if (maxErrors != null && errors.length >= maxErrors) {\n                throw createGraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n            }\n            errors.push(error);\n        });\n        if (errors.length === 0) {\n            return { coerced };\n        }\n    }\n    catch (error) {\n        errors.push(error);\n    }\n    // @ts-expect-error - We know that errors is an array of GraphQLError.\n    return { errors };\n}\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n    const coercedValues = {};\n    for (const varDefNode of varDefNodes) {\n        const varName = varDefNode.variable.name.value;\n        const varType = typeFromAST(schema, varDefNode.type);\n        if (!isInputType(varType)) {\n            // Must use input types for variables. This should be caught during\n            // validation, however is checked again here for safety.\n            const varTypeStr = print(varDefNode.type);\n            onError(createGraphQLError(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, { nodes: varDefNode.type }));\n            continue;\n        }\n        if (!hasOwnProperty(inputs, varName)) {\n            if (varDefNode.defaultValue) {\n                coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n            }\n            else if (isNonNullType(varType)) {\n                const varTypeStr = inspect(varType);\n                onError(createGraphQLError(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, {\n                    nodes: varDefNode,\n                }));\n            }\n            continue;\n        }\n        const value = inputs[varName];\n        if (value === null && isNonNullType(varType)) {\n            const varTypeStr = inspect(varType);\n            onError(createGraphQLError(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, {\n                nodes: varDefNode,\n            }));\n            continue;\n        }\n        coercedValues[varName] = coerceInputValue(value, varType, (path, invalidValue, error) => {\n            let prefix = `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n            if (path.length > 0) {\n                prefix += ` at \"${varName}${printPathArray(path)}\"`;\n            }\n            onError(createGraphQLError(prefix + '; ' + error.message, {\n                nodes: varDefNode,\n                originalError: error.originalError,\n            }));\n        });\n    }\n    return coercedValues;\n}\n", "import { getOperationAST } from 'graphql';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { execute, flattenIncrementalResults, subscribe } from './execute.js';\nexport function normalizedExecutor(args) {\n    const operationAST = getOperationAST(args.document, args.operationName);\n    if (operationAST == null) {\n        throw new Error('Must provide an operation.');\n    }\n    if (operationAST.operation === 'subscription') {\n        return subscribe(args);\n    }\n    return new ValueOrPromise(() => execute(args))\n        .then((result) => {\n        if ('initialResult' in result) {\n            return flattenIncrementalResults(result, args.signal);\n        }\n        return result;\n    })\n        .resolve();\n}\n", "/* eslint-disable @typescript-eslint/ban-types */\nimport * as DefaultFetchAPI from '@whatwg-node/fetch';\nimport { completeAssign, handleErrorFromRequestHandler, isFetchEvent, isNodeRequest, isolateObject, isPromise, isRequestInit, isServerResponse, iterateAsyncVoid, normalizeNodeRequest, sendNodeResponse, } from './utils.js';\nimport { getRequestFromUWSRequest, isUWSResponse, sendResponseToUwsOpts, } from './uwebsockets.js';\nasync function handleWaitUntils(waitUntilPromises) {\n    await Promise.allSettled(waitUntilPromises);\n}\n// Required for envs like nextjs edge runtime\nfunction isRequestAccessible(serverContext) {\n    try {\n        return !!serverContext?.request;\n    }\n    catch {\n        return false;\n    }\n}\nconst EMPTY_OBJECT = {};\nfunction createServerAdapter(serverAdapterBaseObject, options) {\n    const fetchAPI = {\n        ...DefaultFetchAPI,\n        ...options?.fetchAPI,\n    };\n    const givenHandleRequest = typeof serverAdapterBaseObject === 'function'\n        ? serverAdapterBaseObject\n        : serverAdapterBaseObject.handle;\n    const onRequestHooks = [];\n    const onResponseHooks = [];\n    if (options?.plugins != null) {\n        for (const plugin of options.plugins) {\n            if (plugin.onRequest) {\n                onRequestHooks.push(plugin.onRequest);\n            }\n            if (plugin.onResponse) {\n                onResponseHooks.push(plugin.onResponse);\n            }\n        }\n    }\n    const handleRequest = onRequestHooks.length > 0 || onResponseHooks.length > 0\n        ? function handleRequest(request, serverContext) {\n            let requestHandler = givenHandleRequest;\n            let response;\n            if (onRequestHooks.length === 0) {\n                return handleEarlyResponse();\n            }\n            let url = new Proxy(EMPTY_OBJECT, {\n                get(_target, prop, _receiver) {\n                    url = new fetchAPI.URL(request.url, 'http://localhost');\n                    return Reflect.get(url, prop, url);\n                },\n            });\n            const onRequestHooksIteration$ = iterateAsyncVoid(onRequestHooks, (onRequestHook, stopEarly) => onRequestHook({\n                request,\n                serverContext,\n                fetchAPI,\n                url,\n                requestHandler,\n                setRequestHandler(newRequestHandler) {\n                    requestHandler = newRequestHandler;\n                },\n                endResponse(newResponse) {\n                    response = newResponse;\n                    if (newResponse) {\n                        stopEarly();\n                    }\n                },\n            }));\n            function handleResponse(response) {\n                if (onRequestHooks.length === 0) {\n                    return response;\n                }\n                const onResponseHookPayload = {\n                    request,\n                    response,\n                    serverContext,\n                };\n                const onResponseHooksIteration$ = iterateAsyncVoid(onResponseHooks, onResponseHook => onResponseHook(onResponseHookPayload));\n                if (isPromise(onResponseHooksIteration$)) {\n                    return onResponseHooksIteration$.then(() => response);\n                }\n                return response;\n            }\n            function handleEarlyResponse() {\n                if (!response) {\n                    const response$ = requestHandler(request, serverContext);\n                    if (isPromise(response$)) {\n                        return response$.then(handleResponse);\n                    }\n                    return handleResponse(response$);\n                }\n                return handleResponse(response);\n            }\n            if (isPromise(onRequestHooksIteration$)) {\n                return onRequestHooksIteration$.then(handleEarlyResponse);\n            }\n            return handleEarlyResponse();\n        }\n        : givenHandleRequest;\n    function handleNodeRequest(nodeRequest, ...ctx) {\n        const serverContext = ctx.length > 1 ? completeAssign(...ctx) : ctx[0] || {};\n        const request = normalizeNodeRequest(nodeRequest, fetchAPI.Request);\n        return handleRequest(request, serverContext);\n    }\n    function requestListener(nodeRequest, serverResponse, ...ctx) {\n        const waitUntilPromises = [];\n        const defaultServerContext = {\n            req: nodeRequest,\n            res: serverResponse,\n            waitUntil(cb) {\n                waitUntilPromises.push(cb.catch(err => console.error(err)));\n            },\n        };\n        let response$;\n        try {\n            response$ = handleNodeRequest(nodeRequest, defaultServerContext, ...ctx);\n        }\n        catch (err) {\n            response$ = handleErrorFromRequestHandler(err, fetchAPI.Response);\n        }\n        if (isPromise(response$)) {\n            return response$\n                .catch((e) => handleErrorFromRequestHandler(e, fetchAPI.Response))\n                .then(response => sendNodeResponse(response, serverResponse, nodeRequest))\n                .catch(err => {\n                console.error(`Unexpected error while handling request: ${err.message || err}`);\n            });\n        }\n        try {\n            return sendNodeResponse(response$, serverResponse, nodeRequest);\n        }\n        catch (err) {\n            console.error(`Unexpected error while handling request: ${err.message || err}`);\n        }\n    }\n    function handleUWS(res, req, ...ctx) {\n        const waitUntilPromises = [];\n        const defaultServerContext = {\n            res,\n            req,\n            waitUntil(cb) {\n                waitUntilPromises.push(cb.catch(err => console.error(err)));\n            },\n        };\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 0\n            ? completeAssign(defaultServerContext, ...ctx)\n            : defaultServerContext;\n        const request = getRequestFromUWSRequest({\n            req,\n            res,\n            fetchAPI,\n        });\n        let resAborted = false;\n        res.onAborted(() => {\n            resAborted = true;\n            request.signal.sendAbort();\n        });\n        let response$;\n        try {\n            response$ = handleRequest(request, serverContext);\n        }\n        catch (err) {\n            response$ = handleErrorFromRequestHandler(err, fetchAPI.Response);\n        }\n        if (isPromise(response$)) {\n            return response$\n                .catch((e) => handleErrorFromRequestHandler(e, fetchAPI.Response))\n                .then(response => {\n                if (!resAborted) {\n                    return sendResponseToUwsOpts(res, response);\n                }\n            })\n                .catch(err => {\n                console.error(`Unexpected error while handling request: ${err.message || err}`);\n            });\n        }\n        try {\n            return sendResponseToUwsOpts(res, response$);\n        }\n        catch (err) {\n            console.error(`Unexpected error while handling request: ${err.message || err}`);\n        }\n    }\n    function handleEvent(event, ...ctx) {\n        if (!event.respondWith || !event.request) {\n            throw new TypeError(`Expected FetchEvent, got ${event}`);\n        }\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        const serverContext = filteredCtxParts.length > 0\n            ? completeAssign({}, event, ...filteredCtxParts)\n            : isolateObject(event);\n        const response$ = handleRequest(event.request, serverContext);\n        event.respondWith(response$);\n    }\n    function handleRequestWithWaitUntil(request, ...ctx) {\n        const filteredCtxParts = ctx.filter(partCtx => partCtx != null);\n        let waitUntilPromises;\n        const serverContext = filteredCtxParts.length > 1\n            ? completeAssign(...filteredCtxParts)\n            : isolateObject(filteredCtxParts[0], filteredCtxParts[0] == null || filteredCtxParts[0].waitUntil == null\n                ? (waitUntilPromises = [])\n                : undefined);\n        const response$ = handleRequest(request, serverContext);\n        if (waitUntilPromises?.length) {\n            return handleWaitUntils(waitUntilPromises).then(() => response$);\n        }\n        return response$;\n    }\n    const fetchFn = (input, ...maybeCtx) => {\n        if (typeof input === 'string' || 'href' in input) {\n            const [initOrCtx, ...restOfCtx] = maybeCtx;\n            if (isRequestInit(initOrCtx)) {\n                return handleRequestWithWaitUntil(new fetchAPI.Request(input, initOrCtx), ...restOfCtx);\n            }\n            return handleRequestWithWaitUntil(new fetchAPI.Request(input), ...maybeCtx);\n        }\n        return handleRequestWithWaitUntil(input, ...maybeCtx);\n    };\n    const genericRequestHandler = (input, ...maybeCtx) => {\n        // If it is a Node request\n        const [initOrCtxOrRes, ...restOfCtx] = maybeCtx;\n        if (isNodeRequest(input)) {\n            if (!isServerResponse(initOrCtxOrRes)) {\n                throw new TypeError(`Expected ServerResponse, got ${initOrCtxOrRes}`);\n            }\n            return requestListener(input, initOrCtxOrRes, ...restOfCtx);\n        }\n        if (isUWSResponse(input)) {\n            return handleUWS(input, initOrCtxOrRes, ...restOfCtx);\n        }\n        if (isServerResponse(initOrCtxOrRes)) {\n            throw new TypeError('Got Node response without Node request');\n        }\n        // Is input a container object over Request?\n        if (isRequestAccessible(input)) {\n            // Is it FetchEvent?\n            if (isFetchEvent(input)) {\n                return handleEvent(input, ...maybeCtx);\n            }\n            // In this input is also the context\n            return handleRequestWithWaitUntil(input.request, input, ...maybeCtx);\n        }\n        // Or is it Request itself?\n        // Then ctx is present and it is the context\n        return fetchFn(input, ...maybeCtx);\n    };\n    const adapterObj = {\n        handleRequest,\n        fetch: fetchFn,\n        handleNodeRequest,\n        requestListener,\n        handleEvent,\n        handleUWS,\n        handle: genericRequestHandler,\n    };\n    const serverAdapter = new Proxy(genericRequestHandler, {\n        // It should have all the attributes of the handler function and the server instance\n        has: (_, prop) => {\n            return (prop in adapterObj ||\n                prop in genericRequestHandler ||\n                (serverAdapterBaseObject && prop in serverAdapterBaseObject));\n        },\n        get: (_, prop) => {\n            const adapterProp = adapterObj[prop];\n            if (adapterProp) {\n                if (adapterProp.bind) {\n                    return adapterProp.bind(adapterObj);\n                }\n                return adapterProp;\n            }\n            const handleProp = genericRequestHandler[prop];\n            if (handleProp) {\n                if (handleProp.bind) {\n                    return handleProp.bind(genericRequestHandler);\n                }\n                return handleProp;\n            }\n            if (serverAdapterBaseObject) {\n                const serverAdapterBaseObjectProp = serverAdapterBaseObject[prop];\n                if (serverAdapterBaseObjectProp) {\n                    if (serverAdapterBaseObjectProp.bind) {\n                        return function (...args) {\n                            const returnedVal = serverAdapterBaseObject[prop](...args);\n                            if (returnedVal === serverAdapterBaseObject) {\n                                return serverAdapter;\n                            }\n                            return returnedVal;\n                        };\n                    }\n                    return serverAdapterBaseObjectProp;\n                }\n            }\n        },\n        apply(_, __, args) {\n            return genericRequestHandler(...args);\n        },\n    });\n    return serverAdapter;\n}\nexport { createServerAdapter };\n", "import { URL } from '@whatwg-node/fetch';\nexport function isAsyncIterable(body) {\n    return (body != null && typeof body === 'object' && typeof body[Symbol.asyncIterator] === 'function');\n}\nfunction getPort(nodeRequest) {\n    if (nodeRequest.socket?.localPort) {\n        return nodeRequest.socket?.localPort;\n    }\n    const hostInHeader = nodeRequest.headers?.[':authority'] || nodeRequest.headers?.host;\n    const portInHeader = hostInHeader?.split(':')?.[1];\n    if (portInHeader) {\n        return portInHeader;\n    }\n    return 80;\n}\nfunction getHostnameWithPort(nodeRequest) {\n    if (nodeRequest.headers?.[':authority']) {\n        return nodeRequest.headers?.[':authority'];\n    }\n    if (nodeRequest.headers?.host) {\n        return nodeRequest.headers?.host;\n    }\n    const port = getPort(nodeRequest);\n    if (nodeRequest.hostname) {\n        return nodeRequest.hostname + ':' + port;\n    }\n    const localIp = nodeRequest.socket?.localAddress;\n    if (localIp && !localIp?.includes('::') && !localIp?.includes('ffff')) {\n        return `${localIp}:${port}`;\n    }\n    return 'localhost';\n}\nfunction buildFullUrl(nodeRequest) {\n    const hostnameWithPort = getHostnameWithPort(nodeRequest);\n    const protocol = nodeRequest.protocol || (nodeRequest.socket?.encrypted ? 'https' : 'http');\n    const endpoint = nodeRequest.originalUrl || nodeRequest.url || '/graphql';\n    return `${protocol}://${hostnameWithPort}${endpoint}`;\n}\nfunction isRequestBody(body) {\n    const stringTag = body[Symbol.toStringTag];\n    if (typeof body === 'string' ||\n        stringTag === 'Uint8Array' ||\n        stringTag === 'Blob' ||\n        stringTag === 'FormData' ||\n        stringTag === 'URLSearchParams' ||\n        isAsyncIterable(body)) {\n        return true;\n    }\n    return false;\n}\nexport class ServerAdapterRequestAbortSignal extends EventTarget {\n    constructor() {\n        super(...arguments);\n        this.aborted = false;\n        this._onabort = null;\n    }\n    throwIfAborted() {\n        if (this.aborted) {\n            throw new DOMException('Aborted', 'AbortError');\n        }\n    }\n    sendAbort() {\n        this.aborted = true;\n        this.dispatchEvent(new Event('abort'));\n    }\n    get onabort() {\n        return this._onabort;\n    }\n    set onabort(value) {\n        this._onabort = value;\n        if (value) {\n            this.addEventListener('abort', value);\n        }\n        else {\n            this.removeEventListener('abort', value);\n        }\n    }\n}\nlet bunNodeCompatModeWarned = false;\nexport function normalizeNodeRequest(nodeRequest, RequestCtor) {\n    const rawRequest = nodeRequest.raw || nodeRequest.req || nodeRequest;\n    let fullUrl = buildFullUrl(rawRequest);\n    if (nodeRequest.query) {\n        const url = new URL(fullUrl);\n        for (const key in nodeRequest.query) {\n            url.searchParams.set(key, nodeRequest.query[key]);\n        }\n        fullUrl = url.toString();\n    }\n    let signal;\n    // If ponyfilled\n    if (RequestCtor !== globalThis.Request) {\n        signal = new ServerAdapterRequestAbortSignal();\n        if (rawRequest?.once) {\n            rawRequest.once('close', () => {\n                if (rawRequest.aborted) {\n                    signal.sendAbort();\n                }\n            });\n        }\n    }\n    else {\n        const controller = new AbortController();\n        signal = controller.signal;\n        if (rawRequest.once) {\n            rawRequest.once('close', () => {\n                if (rawRequest.aborted) {\n                    controller.abort();\n                }\n            });\n        }\n    }\n    if (nodeRequest.method === 'GET' || nodeRequest.method === 'HEAD') {\n        return new RequestCtor(fullUrl, {\n            method: nodeRequest.method,\n            headers: nodeRequest.headers,\n            signal,\n        });\n    }\n    /**\n     * Some Node server frameworks like Serverless Express sends a dummy object with body but as a Buffer not string\n     * so we do those checks to see is there something we can use directly as BodyInit\n     * because the presence of body means the request stream is already consumed and,\n     * rawRequest cannot be used as BodyInit/ReadableStream by Fetch API in this case.\n     */\n    const maybeParsedBody = nodeRequest.body;\n    if (maybeParsedBody != null && Object.keys(maybeParsedBody).length > 0) {\n        if (isRequestBody(maybeParsedBody)) {\n            return new RequestCtor(fullUrl, {\n                method: nodeRequest.method,\n                headers: nodeRequest.headers,\n                body: maybeParsedBody,\n                signal,\n            });\n        }\n        const request = new RequestCtor(fullUrl, {\n            method: nodeRequest.method,\n            headers: nodeRequest.headers,\n            signal,\n        });\n        if (!request.headers.get('content-type')?.includes('json')) {\n            request.headers.set('content-type', 'application/json; charset=utf-8');\n        }\n        return new Proxy(request, {\n            get: (target, prop, receiver) => {\n                switch (prop) {\n                    case 'json':\n                        return async () => maybeParsedBody;\n                    case 'text':\n                        return async () => JSON.stringify(maybeParsedBody);\n                    default:\n                        return Reflect.get(target, prop, receiver);\n                }\n            },\n        });\n    }\n    // Temporary workaround for a bug in Bun Node compat mode\n    if (globalThis.process?.versions?.bun && isReadable(rawRequest)) {\n        if (!bunNodeCompatModeWarned) {\n            bunNodeCompatModeWarned = true;\n            console.warn(`You use Bun Node compatibility mode, which is not recommended!\nIt will affect your performance. Please check our Bun integration recipe, and avoid using 'node:http' for your server implementation.`);\n        }\n        return new RequestCtor(fullUrl, {\n            method: nodeRequest.method,\n            headers: nodeRequest.headers,\n            duplex: 'half',\n            body: new ReadableStream({\n                start(controller) {\n                    rawRequest.on('data', chunk => {\n                        controller.enqueue(chunk);\n                    });\n                    rawRequest.on('error', e => {\n                        controller.error(e);\n                    });\n                    rawRequest.on('end', () => {\n                        controller.close();\n                    });\n                },\n                cancel(e) {\n                    rawRequest.destroy(e);\n                },\n            }),\n            signal,\n        });\n    }\n    // perf: instead of spreading the object, we can just pass it as is and it performs better\n    return new RequestCtor(fullUrl, {\n        method: nodeRequest.method,\n        headers: nodeRequest.headers,\n        body: rawRequest,\n        duplex: 'half',\n        signal,\n    });\n}\nexport function isReadable(stream) {\n    return stream.read != null;\n}\nexport function isNodeRequest(request) {\n    return isReadable(request);\n}\nexport function isServerResponse(stream) {\n    // Check all used functions are defined\n    return (stream != null &&\n        stream.setHeader != null &&\n        stream.end != null &&\n        stream.once != null &&\n        stream.write != null);\n}\nexport function isReadableStream(stream) {\n    return stream != null && stream.getReader != null;\n}\nexport function isFetchEvent(event) {\n    return event != null && event.request != null && event.respondWith != null;\n}\nfunction configureSocket(rawRequest) {\n    rawRequest?.socket?.setTimeout?.(0);\n    rawRequest?.socket?.setNoDelay?.(true);\n    rawRequest?.socket?.setKeepAlive?.(true);\n}\nfunction endResponse(serverResponse) {\n    // @ts-expect-error Avoid arguments adaptor trampoline https://v8.dev/blog/adaptor-frame\n    serverResponse.end(null, null, null);\n}\nasync function sendAsyncIterable(serverResponse, asyncIterable) {\n    for await (const chunk of asyncIterable) {\n        if (!serverResponse\n            // @ts-expect-error http and http2 writes are actually compatible\n            .write(chunk)) {\n            break;\n        }\n    }\n    endResponse(serverResponse);\n}\nexport function sendNodeResponse(fetchResponse, serverResponse, nodeRequest) {\n    if (serverResponse.closed || serverResponse.destroyed || serverResponse.writableEnded) {\n        return;\n    }\n    if (!fetchResponse) {\n        serverResponse.statusCode = 404;\n        serverResponse.end();\n        return;\n    }\n    serverResponse.statusCode = fetchResponse.status;\n    serverResponse.statusMessage = fetchResponse.statusText;\n    let setCookiesSet = false;\n    fetchResponse.headers.forEach((value, key) => {\n        if (key === 'set-cookie') {\n            if (setCookiesSet) {\n                return;\n            }\n            setCookiesSet = true;\n            const setCookies = fetchResponse.headers.getSetCookie?.();\n            if (setCookies) {\n                serverResponse.setHeader('set-cookie', setCookies);\n                return;\n            }\n        }\n        serverResponse.setHeader(key, value);\n    });\n    // Optimizations for node-fetch\n    const bufOfRes = fetchResponse._buffer;\n    if (bufOfRes) {\n        // @ts-expect-error http and http2 writes are actually compatible\n        serverResponse.write(bufOfRes);\n        endResponse(serverResponse);\n        return;\n    }\n    // Other fetch implementations\n    const fetchBody = fetchResponse.body;\n    if (fetchBody == null) {\n        endResponse(serverResponse);\n        return;\n    }\n    if (fetchBody[Symbol.toStringTag] === 'Uint8Array') {\n        serverResponse\n            // @ts-expect-error http and http2 writes are actually compatible\n            .write(fetchBody);\n        endResponse(serverResponse);\n        return;\n    }\n    configureSocket(nodeRequest);\n    if (isReadable(fetchBody)) {\n        serverResponse.once('close', () => {\n            fetchBody.destroy();\n        });\n        fetchBody.pipe(serverResponse);\n        return;\n    }\n    if (isAsyncIterable(fetchBody)) {\n        return sendAsyncIterable(serverResponse, fetchBody);\n    }\n}\nexport function isRequestInit(val) {\n    return (val != null &&\n        typeof val === 'object' &&\n        ('body' in val ||\n            'cache' in val ||\n            'credentials' in val ||\n            'headers' in val ||\n            'integrity' in val ||\n            'keepalive' in val ||\n            'method' in val ||\n            'mode' in val ||\n            'redirect' in val ||\n            'referrer' in val ||\n            'referrerPolicy' in val ||\n            'signal' in val ||\n            'window' in val));\n}\n// from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#copying_accessors\nexport function completeAssign(...args) {\n    const [target, ...sources] = args.filter(arg => arg != null && typeof arg === 'object');\n    sources.forEach(source => {\n        // modified Object.keys to Object.getOwnPropertyNames\n        // because Object.keys only returns enumerable properties\n        const descriptors = Object.getOwnPropertyNames(source).reduce((descriptors, key) => {\n            descriptors[key] = Object.getOwnPropertyDescriptor(source, key);\n            return descriptors;\n        }, {});\n        // By default, Object.assign copies enumerable Symbols, too\n        Object.getOwnPropertySymbols(source).forEach(sym => {\n            const descriptor = Object.getOwnPropertyDescriptor(source, sym);\n            if (descriptor.enumerable) {\n                descriptors[sym] = descriptor;\n            }\n        });\n        Object.defineProperties(target, descriptors);\n    });\n    return target;\n}\nexport function isPromise(val) {\n    return val?.then != null;\n}\nexport function iterateAsyncVoid(iterable, callback) {\n    const iterator = iterable[Symbol.iterator]();\n    let stopEarlyFlag = false;\n    function stopEarlyFn() {\n        stopEarlyFlag = true;\n    }\n    function iterate() {\n        const { done: endOfIterator, value } = iterator.next();\n        if (endOfIterator) {\n            return;\n        }\n        const result$ = callback(value, stopEarlyFn);\n        if (isPromise(result$)) {\n            return result$.then(() => {\n                if (stopEarlyFlag) {\n                    return;\n                }\n                return iterate();\n            });\n        }\n        if (stopEarlyFlag) {\n            return;\n        }\n        return iterate();\n    }\n    return iterate();\n}\nexport function handleErrorFromRequestHandler(error, ResponseCtor) {\n    return new ResponseCtor(error.stack || error.message || error.toString(), {\n        status: error.status || 500,\n    });\n}\nexport function isolateObject(originalCtx, waitUntilPromises) {\n    if (originalCtx == null) {\n        return {};\n    }\n    const extraProps = {};\n    const deletedProps = new Set();\n    return new Proxy(originalCtx, {\n        get(originalCtx, prop) {\n            if (waitUntilPromises != null && prop === 'waitUntil') {\n                return function waitUntil(promise) {\n                    waitUntilPromises.push(promise.catch(err => console.error(err)));\n                };\n            }\n            const extraPropVal = extraProps[prop];\n            if (extraPropVal != null) {\n                if (typeof extraPropVal === 'function') {\n                    return extraPropVal.bind(extraProps);\n                }\n                return extraPropVal;\n            }\n            if (deletedProps.has(prop)) {\n                return undefined;\n            }\n            return originalCtx[prop];\n        },\n        set(_originalCtx, prop, value) {\n            extraProps[prop] = value;\n            return true;\n        },\n        has(originalCtx, prop) {\n            if (waitUntilPromises != null && prop === 'waitUntil') {\n                return true;\n            }\n            if (deletedProps.has(prop)) {\n                return false;\n            }\n            if (prop in extraProps) {\n                return true;\n            }\n            return prop in originalCtx;\n        },\n        defineProperty(_originalCtx, prop, descriptor) {\n            return Reflect.defineProperty(extraProps, prop, descriptor);\n        },\n        deleteProperty(_originalCtx, prop) {\n            if (prop in extraProps) {\n                return Reflect.deleteProperty(extraProps, prop);\n            }\n            deletedProps.add(prop);\n            return true;\n        },\n        ownKeys(originalCtx) {\n            const extraKeys = Reflect.ownKeys(extraProps);\n            const originalKeys = Reflect.ownKeys(originalCtx);\n            const deletedKeys = Array.from(deletedProps);\n            const allKeys = new Set(extraKeys.concat(originalKeys.filter(keys => !deletedKeys.includes(keys))));\n            if (waitUntilPromises != null) {\n                allKeys.add('waitUntil');\n            }\n            return Array.from(allKeys);\n        },\n        getOwnPropertyDescriptor(originalCtx, prop) {\n            if (prop in extraProps) {\n                return Reflect.getOwnPropertyDescriptor(extraProps, prop);\n            }\n            if (deletedProps.has(prop)) {\n                return undefined;\n            }\n            return Reflect.getOwnPropertyDescriptor(originalCtx, prop);\n        },\n    });\n}\n", "import { ServerAdapterRequestAbortSignal } from './utils.js';\nexport function isUWSResponse(res) {\n    return !!res.onData;\n}\nexport function getRequestFromUWSRequest({ req, res, fetchAPI }) {\n    let body;\n    const method = req.getMethod();\n    if (method !== 'get' && method !== 'head') {\n        body = new fetchAPI.ReadableStream({});\n        const readable = body.readable;\n        res.onAborted(() => {\n            readable.push(null);\n        });\n        res.onData(function (ab, isLast) {\n            const chunk = Buffer.from(ab, 0, ab.byteLength);\n            readable.push(Buffer.from(chunk));\n            if (isLast) {\n                readable.push(null);\n            }\n        });\n    }\n    const headers = new fetchAPI.Headers();\n    req.forEach((key, value) => {\n        headers.append(key, value);\n    });\n    let url = `http://localhost${req.getUrl()}`;\n    const query = req.getQuery();\n    if (query) {\n        url += `?${query}`;\n    }\n    return new fetchAPI.Request(url, {\n        method,\n        headers,\n        body: body,\n        signal: new ServerAdapterRequestAbortSignal(),\n    });\n}\nasync function forwardResponseBodyToUWSResponse(uwsResponse, fetchResponse) {\n    let resAborted = false;\n    uwsResponse.onAborted(function () {\n        resAborted = true;\n    });\n    for await (const chunk of fetchResponse.body) {\n        if (resAborted) {\n            return;\n        }\n        uwsResponse.cork(() => {\n            uwsResponse.write(chunk);\n        });\n    }\n    uwsResponse.cork(() => {\n        uwsResponse.end();\n    });\n}\nexport function sendResponseToUwsOpts(uwsResponse, fetchResponse) {\n    if (!fetchResponse) {\n        uwsResponse.writeStatus('404 Not Found');\n        uwsResponse.end();\n        return;\n    }\n    const bufferOfRes = fetchResponse._buffer;\n    uwsResponse.cork(() => {\n        uwsResponse.writeStatus(`${fetchResponse.status} ${fetchResponse.statusText}`);\n        for (const [key, value] of fetchResponse.headers) {\n            // content-length causes an error with Node.js's fetch\n            if (key !== 'content-length') {\n                if (key === 'set-cookie') {\n                    const setCookies = fetchResponse.headers.getSetCookie?.();\n                    if (setCookies) {\n                        for (const setCookie of setCookies) {\n                            uwsResponse.writeHeader(key, setCookie);\n                        }\n                        continue;\n                    }\n                }\n                uwsResponse.writeHeader(key, value);\n            }\n        }\n        if (bufferOfRes) {\n            uwsResponse.end(bufferOfRes);\n        }\n    });\n    if (bufferOfRes) {\n        return;\n    }\n    if (!fetchResponse.body) {\n        uwsResponse.end();\n        return;\n    }\n    return forwardResponseBodyToUWSResponse(uwsResponse, fetchResponse);\n}\n", "export function getCORSHeadersByRequestAndOptions(request, corsOptions) {\n    const currentOrigin = request.headers.get('origin');\n    if (corsOptions === false || currentOrigin == null) {\n        return null;\n    }\n    const headers = {};\n    // If defined origins have '*' or undefined by any means, we should allow all origins\n    if (corsOptions.origin == null ||\n        corsOptions.origin.length === 0 ||\n        corsOptions.origin.includes('*')) {\n        headers['Access-Control-Allow-Origin'] = currentOrigin;\n        // Vary by origin because there are multiple origins\n        headers['Vary'] = 'Origin';\n    }\n    else if (typeof corsOptions.origin === 'string') {\n        // If there is one specific origin is specified, use it directly\n        headers['Access-Control-Allow-Origin'] = corsOptions.origin;\n    }\n    else if (Array.isArray(corsOptions.origin)) {\n        // If there is only one origin defined in the array, consider it as a single one\n        if (corsOptions.origin.length === 1) {\n            headers['Access-Control-Allow-Origin'] = corsOptions.origin[0];\n        }\n        else if (corsOptions.origin.includes(currentOrigin)) {\n            // If origin is available in the headers, use it\n            headers['Access-Control-Allow-Origin'] = currentOrigin;\n            // Vary by origin because there are multiple origins\n            headers['Vary'] = 'Origin';\n        }\n        else {\n            // There is no origin found in the headers, so we should return null\n            headers['Access-Control-Allow-Origin'] = 'null';\n        }\n    }\n    if (corsOptions.methods?.length) {\n        headers['Access-Control-Allow-Methods'] = corsOptions.methods.join(', ');\n    }\n    else {\n        const requestMethod = request.headers.get('access-control-request-method');\n        if (requestMethod) {\n            headers['Access-Control-Allow-Methods'] = requestMethod;\n        }\n    }\n    if (corsOptions.allowedHeaders?.length) {\n        headers['Access-Control-Allow-Headers'] = corsOptions.allowedHeaders.join(', ');\n    }\n    else {\n        const requestHeaders = request.headers.get('access-control-request-headers');\n        if (requestHeaders) {\n            headers['Access-Control-Allow-Headers'] = requestHeaders;\n            if (headers['Vary']) {\n                headers['Vary'] += ', Access-Control-Request-Headers';\n            }\n            headers['Vary'] = 'Access-Control-Request-Headers';\n        }\n    }\n    if (corsOptions.credentials != null) {\n        if (corsOptions.credentials === true) {\n            headers['Access-Control-Allow-Credentials'] = 'true';\n        }\n    }\n    else if (headers['Access-Control-Allow-Origin'] !== '*') {\n        headers['Access-Control-Allow-Credentials'] = 'true';\n    }\n    if (corsOptions.exposedHeaders) {\n        headers['Access-Control-Expose-Headers'] = corsOptions.exposedHeaders.join(', ');\n    }\n    if (corsOptions.maxAge) {\n        headers['Access-Control-Max-Age'] = corsOptions.maxAge.toString();\n    }\n    return headers;\n}\nasync function getCORSResponseHeaders(request, corsOptionsFactory, serverContext) {\n    const corsOptions = await corsOptionsFactory(request, serverContext);\n    return getCORSHeadersByRequestAndOptions(request, corsOptions);\n}\nexport function useCORS(options) {\n    let corsOptionsFactory = () => ({});\n    if (options != null) {\n        if (typeof options === 'function') {\n            corsOptionsFactory = options;\n        }\n        else if (typeof options === 'object') {\n            const corsOptions = {\n                ...options,\n            };\n            corsOptionsFactory = () => corsOptions;\n        }\n        else if (options === false) {\n            corsOptionsFactory = () => false;\n        }\n    }\n    return {\n        onRequest({ request, fetchAPI, endResponse }) {\n            if (request.method.toUpperCase() === 'OPTIONS') {\n                const response = new fetchAPI.Response(null, {\n                    status: 204,\n                    // Safari (and potentially other browsers) need content-length 0,\n                    // for 204 or they just hang waiting for a body\n                    // see: https://github.com/expressjs/cors/blob/master/lib/index.js#L176\n                    headers: {\n                        'Content-Length': '0',\n                    },\n                });\n                endResponse(response);\n            }\n        },\n        async onResponse({ request, serverContext, response }) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const headers = await getCORSResponseHeaders(request, corsOptionsFactory, serverContext);\n            if (headers != null) {\n                for (const headerName in headers) {\n                    response.headers.set(headerName, headers[headerName]);\n                }\n            }\n        },\n    };\n}\n", "import { Response as DefaultResponseCtor } from '@whatwg-node/fetch';\nimport { isPromise } from '../utils.js';\nexport function createDefaultErrorHandler(ResponseCtor = DefaultResponseCtor) {\n    return function defaultErrorHandler(e) {\n        if (e.details || e.status || e.headers || e.name === 'HTTPError') {\n            return new ResponseCtor(typeof e.details === 'object' ? JSON.stringify(e.details) : e.message, {\n                status: e.status,\n                headers: e.headers || {},\n            });\n        }\n        console.error(e);\n        if (ResponseCtor.error) {\n            return ResponseCtor.error();\n        }\n        return new ResponseCtor(null, { status: 500 });\n    };\n}\nexport class HTTPError extends Error {\n    constructor(status = 500, message, headers = {}, details) {\n        super(message);\n        this.status = status;\n        this.message = message;\n        this.headers = headers;\n        this.details = details;\n        this.name = 'HTTPError';\n        Error.captureStackTrace(this, HTTPError);\n    }\n}\nexport function useErrorHandling(onError) {\n    return {\n        onRequest({ requestHandler, setRequestHandler, fetchAPI }) {\n            const errorHandler = onError || createDefaultErrorHandler(fetchAPI.Response);\n            setRequestHandler(function handlerWithErrorHandling(request, serverContext) {\n                try {\n                    const response$ = requestHandler(request, serverContext);\n                    if (isPromise(response$)) {\n                        return response$.catch(e => errorHandler(e, request, serverContext));\n                    }\n                    return response$;\n                }\n                catch (e) {\n                    return errorHandler(e, request, serverContext);\n                }\n            });\n        },\n    };\n}\n", "import { URLSearchParams } from '@whatwg-node/fetch';\nimport { handleURLSearchParams } from './utils.js';\nexport function isGETRequest(request) {\n    return request.method === 'GET';\n}\nexport function parseGETRequest(request) {\n    const [, queryString = ''] = request.url.split('?');\n    const searchParams = new URLSearchParams(queryString);\n    return handleURLSearchParams(searchParams);\n}\n", "import { URLSearchParams } from '@whatwg-node/fetch';\nexport function handleURLSearchParams(searchParams) {\n    const operationName = searchParams.get('operationName') || undefined;\n    const query = searchParams.get('query') || undefined;\n    const variablesStr = searchParams.get('variables') || undefined;\n    const extensionsStr = searchParams.get('extensions') || undefined;\n    return {\n        operationName,\n        query,\n        variables: variablesStr ? JSON.parse(variablesStr) : undefined,\n        extensions: extensionsStr ? JSON.parse(extensionsStr) : undefined,\n    };\n}\nexport function parseURLSearchParams(requestBody) {\n    const searchParams = new URLSearchParams(requestBody);\n    return handleURLSearchParams(searchParams);\n}\nexport function isContentTypeMatch(request, expectedContentType) {\n    let contentType = request.headers.get('content-type');\n    // a list of content-types is not valid as per HTTP spec, but some clients dont care\n    contentType = contentType?.split(',')[0] || null;\n    return (contentType === expectedContentType || !!contentType?.startsWith(`${expectedContentType};`));\n}\n", "import { isContentTypeMatch, parseURLSearchParams } from './utils.js';\nexport function isPOSTFormUrlEncodedRequest(request) {\n    return (request.method === 'POST' && isContentTypeMatch(request, 'application/x-www-form-urlencoded'));\n}\nexport async function parsePOSTFormUrlEncodedRequest(request) {\n    const requestBody = await request.text();\n    return parseURLSearchParams(requestBody);\n}\n", "import { isContentTypeMatch } from './utils.js';\nexport function isPOSTGraphQLStringRequest(request) {\n    return request.method === 'POST' && isContentTypeMatch(request, 'application/graphql');\n}\nexport async function parsePOSTGraphQLStringRequest(request) {\n    const requestBody = await request.text();\n    return {\n        query: requestBody,\n    };\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isContentTypeMatch } from './utils.js';\nexport function isPOSTJsonRequest(request) {\n    return (request.method === 'POST' &&\n        (isContentTypeMatch(request, 'application/json') ||\n            isContentTypeMatch(request, 'application/graphql+json')));\n}\nexport async function parsePOSTJsonRequest(request) {\n    let requestBody;\n    try {\n        requestBody = await request.json();\n    }\n    catch (err) {\n        const extensions = {\n            http: {\n                spec: true,\n                status: 400,\n            },\n        };\n        if (err instanceof Error) {\n            extensions.originalError = {\n                name: err.name,\n                message: err.message,\n            };\n        }\n        throw createGraphQLError('POST body sent invalid JSON.', {\n            extensions,\n        });\n    }\n    if (requestBody == null) {\n        throw createGraphQLError(`POST body is expected to be object but received ${requestBody}`, {\n            extensions: {\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    const requestBodyTypeof = typeof requestBody;\n    if (requestBodyTypeof !== 'object') {\n        throw createGraphQLError(`POST body is expected to be object but received ${requestBodyTypeof}`, {\n            extensions: {\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    return requestBody;\n}\n", "import { dset } from 'dset';\nimport { createGraphQLError } from '@graphql-tools/utils';\nimport { isContentTypeMatch } from './utils.js';\nexport function isPOSTMultipartRequest(request) {\n    return request.method === 'POST' && isContentTypeMatch(request, 'multipart/form-data');\n}\nexport async function parsePOSTMultipartRequest(request) {\n    let requestBody;\n    try {\n        requestBody = await request.formData();\n    }\n    catch (e) {\n        if (e instanceof Error && e.message.startsWith('File size limit exceeded: ')) {\n            throw createGraphQLError(e.message, {\n                extensions: {\n                    http: {\n                        status: 413,\n                    },\n                },\n            });\n        }\n        throw e;\n    }\n    const operationsStr = requestBody.get('operations');\n    if (!operationsStr) {\n        throw createGraphQLError('Missing multipart form field \"operations\"');\n    }\n    if (typeof operationsStr !== 'string') {\n        throw createGraphQLError('Multipart form field \"operations\" must be a string');\n    }\n    let operations;\n    try {\n        operations = JSON.parse(operationsStr);\n    }\n    catch (err) {\n        throw createGraphQLError('Multipart form field \"operations\" must be a valid JSON string');\n    }\n    const mapStr = requestBody.get('map');\n    if (mapStr != null) {\n        if (typeof mapStr !== 'string') {\n            throw createGraphQLError('Multipart form field \"map\" must be a string');\n        }\n        let map;\n        try {\n            map = JSON.parse(mapStr);\n        }\n        catch (err) {\n            throw createGraphQLError('Multipart form field \"map\" must be a valid JSON string');\n        }\n        for (const fileIndex in map) {\n            const file = requestBody.get(fileIndex);\n            const keys = map[fileIndex];\n            for (const key of keys) {\n                dset(operations, key, file);\n            }\n        }\n    }\n    return operations;\n}\n", "export function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nconst expectedParameters = new Set(['query', 'variables', 'operationName', 'extensions']);\nexport function assertInvalidParams(params) {\n    if (params == null || typeof params !== 'object') {\n        throw createGraphQLError('Invalid \"params\" in the request body', {\n            extensions: {\n                http: {\n                    spec: true,\n                    status: 400,\n                },\n            },\n        });\n    }\n    for (const paramKey in params) {\n        if (params[paramKey] == null) {\n            continue;\n        }\n        if (!expectedParameters.has(paramKey)) {\n            throw createGraphQLError(`Unexpected parameter \"${paramKey}\" in the request body.`, {\n                extensions: {\n                    http: {\n                        status: 400,\n                    },\n                },\n            });\n        }\n    }\n}\nexport function checkGraphQLQueryParams(params) {\n    if (!isObject(params)) {\n        throw createGraphQLError(`Expected params to be an object but given ${extendedTypeof(params)}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    assertInvalidParams(params);\n    if (params.query == null) {\n        throw createGraphQLError('Must provide query string.', {\n            extensions: {\n                http: {\n                    spec: true,\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    const queryType = extendedTypeof(params.query);\n    if (queryType !== 'string') {\n        throw createGraphQLError(`Expected \"query\" param to be a string, but given ${queryType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    const variablesParamType = extendedTypeof(params.variables);\n    if (!['object', 'null', 'undefined'].includes(variablesParamType)) {\n        throw createGraphQLError(`Expected \"variables\" param to be empty or an object, but given ${variablesParamType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    const extensionsParamType = extendedTypeof(params.extensions);\n    if (!['object', 'null', 'undefined'].includes(extensionsParamType)) {\n        throw createGraphQLError(`Expected \"extensions\" param to be empty or an object, but given ${extensionsParamType}.`, {\n            extensions: {\n                http: {\n                    status: 400,\n                    headers: {\n                        Allow: 'GET, POST',\n                    },\n                },\n            },\n        });\n    }\n    return params;\n}\nexport function isValidGraphQLParams(params) {\n    try {\n        checkGraphQLQueryParams(params);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function useCheckGraphQLQueryParams() {\n    return {\n        onParams({ params }) {\n            checkGraphQLQueryParams(params);\n        },\n    };\n}\nfunction extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\nfunction isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nexport function isValidMethodForGraphQL(method) {\n    return method === 'GET' || method === 'POST';\n}\nexport function useCheckMethodForGraphQL() {\n    return {\n        onRequestParse({ request }) {\n            if (!isValidMethodForGraphQL(request.method)) {\n                throw createGraphQLError('GraphQL only supports GET and POST requests.', {\n                    extensions: {\n                        http: {\n                            status: 405,\n                            headers: {\n                                Allow: 'GET, POST',\n                            },\n                        },\n                    },\n                });\n            }\n        },\n    };\n}\n", "export function useHTTPValidationError() {\n    return {\n        onValidate() {\n            return ({ valid, result }) => {\n                if (!valid) {\n                    for (const error of result) {\n                        error.extensions.http = {\n                            ...error.extensions.http,\n                            spec: error.extensions.http?.spec ?? true,\n                            status: error.extensions.http?.status ?? 400,\n                        };\n                    }\n                }\n            };\n        },\n    };\n}\n", "import { createGraphQLError } from '../../error.js';\nexport function useLimitBatching(limit) {\n    return {\n        onRequestParse() {\n            return {\n                onRequestParseDone({ requestParserResult }) {\n                    if (Array.isArray(requestParserResult)) {\n                        if (!limit) {\n                            throw createGraphQLError(`Batching is not supported.`, {\n                                extensions: {\n                                    http: {\n                                        status: 400,\n                                    },\n                                },\n                            });\n                        }\n                        if (requestParserResult.length > limit) {\n                            throw createGraphQLError(`Batching is limited to ${limit} operations per request.`, {\n                                extensions: {\n                                    http: {\n                                        status: 413,\n                                    },\n                                },\n                            });\n                        }\n                    }\n                },\n            };\n        },\n    };\n}\n", "import { getOperationAST, GraphQLError } from 'graphql';\nimport { createGraphQLError } from '@graphql-tools/utils';\nexport function assertMutationViaGet(method, document, operationName) {\n    const operation = document\n        ? getOperationAST(document, operationName) ?? undefined\n        : undefined;\n    if (!operation) {\n        throw createGraphQLError('Could not determine what operation to execute.', {\n            extensions: {\n                http: {\n                    status: 400,\n                },\n            },\n        });\n    }\n    if (operation.operation === 'mutation' && method === 'GET') {\n        throw createGraphQLError('Can only perform a mutation operation from a POST request.', {\n            extensions: {\n                http: {\n                    status: 405,\n                    headers: {\n                        Allow: 'POST',\n                    },\n                },\n            },\n        });\n    }\n}\nexport function usePreventMutationViaGET() {\n    return {\n        onParse() {\n            // We should improve this by getting Yoga stuff from the hook params directly instead of the context\n            return ({ result, context: { request, \n            // the `params` might be missing in cases where the user provided\n            // malformed context to getEnveloped (like `yoga.getEnveloped({})`)\n            params: { operationName } = {}, }, }) => {\n                // Run only if this is a Yoga request\n                // the `request` might be missing when using graphql-ws for example\n                // in which case throwing an error would abruptly close the socket\n                if (!request) {\n                    return;\n                }\n                if (result instanceof Error) {\n                    if (result instanceof GraphQLError) {\n                        result.extensions.http = {\n                            spec: true,\n                            status: 400,\n                        };\n                    }\n                    throw result;\n                }\n                assertMutationViaGet(request.method, result, operationName);\n            };\n        },\n    };\n}\n", "export function useHealthCheck({ id = Date.now().toString(), logger = console, endpoint = '/health', } = {}) {\n    return {\n        onRequest({ endResponse, fetchAPI, request }) {\n            if (request.url.endsWith(endpoint)) {\n                logger.debug('Responding Health Check');\n                const response = new fetchAPI.Response(null, {\n                    status: 200,\n                    headers: {\n                        'x-yoga-id': id,\n                    },\n                });\n                endResponse(response);\n            }\n        },\n    };\n}\n", "import { createLRUCache } from '../utils/create-lru-cache.js';\nexport function useParserAndValidationCache({ documentCache = createLRUCache(), errorCache = createLRUCache(), validationCache = true, }) {\n    const validationCacheByRules = createLRUCache();\n    return {\n        onParse({ params, setParsedDocument }) {\n            const strDocument = params.source.toString();\n            const document = documentCache.get(strDocument);\n            if (document) {\n                setParsedDocument(document);\n                return;\n            }\n            const parserError = errorCache.get(strDocument);\n            if (parserError) {\n                throw parserError;\n            }\n            return ({ result }) => {\n                if (result != null) {\n                    if (result instanceof Error) {\n                        errorCache.set(strDocument, result);\n                    }\n                    else {\n                        documentCache.set(strDocument, result);\n                    }\n                }\n            };\n        },\n        onValidate({ params: { schema, documentAST, rules }, setResult,\n        // eslint-disable-next-line @typescript-eslint/ban-types\n         }) {\n            /** No schema no cache */\n            if (schema == null) {\n                return;\n            }\n            if (validationCache !== false) {\n                const rulesKey = rules?.map((rule) => rule.name).join(',') || '';\n                let validationCacheBySchema = validationCacheByRules.get(rulesKey);\n                if (!validationCacheBySchema) {\n                    validationCacheBySchema = new WeakMap();\n                    validationCacheByRules.set(rulesKey, validationCacheBySchema);\n                }\n                let validationCacheByDocument = validationCacheBySchema.get(schema);\n                if (!validationCacheByDocument) {\n                    validationCacheByDocument = new WeakMap();\n                    validationCacheBySchema.set(schema, validationCacheByDocument);\n                }\n                const cachedResult = validationCacheByDocument.get(documentAST);\n                if (cachedResult) {\n                    setResult(cachedResult);\n                    return;\n                }\n                return ({ result }) => {\n                    if (result != null) {\n                        validationCacheByDocument?.set(documentAST, result);\n                    }\n                };\n            }\n        },\n    };\n}\n", "/* eslint-disable @typescript-eslint/ban-types */\nimport { LRUCache as LRU } from 'lru-cache';\nconst DEFAULT_MAX = 1024;\nconst DEFAULT_TTL = 3600000;\nexport function createLRUCache({ max = DEFAULT_MAX, ttl = DEFAULT_TTL, } = {}) {\n    return new LRU({ max, ttl });\n}\n", "/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ? process : {}\n) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof PROCESS.emitWarning === 'function'\n    ? PROCESS.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   */\n  export type DisposeReason = 'evict' | 'set' | 'delete'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Status object that may be passed to {@link LRUCache#fetch},\n   * {@link LRUCache#get}, {@link LRUCache#set}, and {@link LRUCache#has}.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no fetchMethod, so {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed\n     * by default, and MAY live in the cache long after they have expired.\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * Must be an integer number of ms. If set to 0, this indicates \"no TTL\"\n     *\n     * @default 0\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     * Note that this may significantly degrade performance,\n     * especially if the cache is storing a large number of items.\n     * It is almost always best to just leave the stale items in\n     * the cache, and let them fall out as new items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * @default false\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * Update the age of items on {@link LRUCache#get}, renewing their TTL\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * @default false\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * Update the age of items on {@link LRUCache#has}, renewing their TTL\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * @default false\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the cache.\n     * This can be handy if you want to close file descriptors or do other\n     * cleanup tasks when items are no longer accessible. Called with `key,\n     * value`.  It's called before actually removing the item from the\n     * internal cache, so it is *NOT* safe to re-add them.\n     *\n     * Use {@link OptionsBase.disposeAfter} if you wish to dispose items after\n     * they have been full removed, when it is safe to add them back to the\n     * cache.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when\n     * setting a new value for an existing key (ie, when updating a value\n     * rather than inserting a new value).  Note that the TTL value is\n     * _always_ set (if provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * If you wish to track item size, you must provide a maxSize\n     * note that we still will only keep up to max *actual items*,\n     * if max is set, so size tracking may cause fewer than max items\n     * to be stored.  At the extreme, a single item of maxSize size\n     * will cause everything else in the cache to be dropped when it\n     * is added.  Use with caution!\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod}, then it will not be stored in the\n     * cache.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the\n     * {@link LRUCache#fetch} fails, not any other times.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches an `'abort'`\n     * event, whether user-triggered, or due to internal cache behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls are not\n     * immediately resolved or rejected when they are aborted, and instead\n     * take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * All properties from the options object (with the exception of\n * {@link OptionsBase.max} and {@link OptionsBase.maxSize}) are added as\n * normal public members. (`max` and `maxBase` are read-only getters.)\n * Changing any of these will alter the defaults for subsequent method calls,\n * but is otherwise safe.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown> implements Map<K,V> {\n  // properties coming in from the options of these, only max and maxSize\n  // really *need* to be protected. The rest can be modified, as they just\n  // set defaults for various methods.\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the remaining TTL time for a given entry key\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.delete(this.#keyList[index] as K)\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string description of an object.\n   * Called by the built-in method Object.prototype.toString.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to Array.find().  fn is called as fn(value, key, cache).\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from\n   * most recently used to least recently used.  fn is called as\n   * fn(value, key, cache).  Does not update age or recenty of use.\n   * Does not iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.delete(this.#keyList[i] as K)\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Like {@link LRUCache#dump}, but just for a\n   * single key. Always returns stale values, if their info is found in the\n   * cache, so be sure to check for expired TTLs if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    const value: V | undefined = this.#isBackgroundFetch(v)\n      ? v.__staleWhileFetching\n      : v\n    if (value === undefined) return undefined\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to cache.load()\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   * Note that the shape of the resulting cache may be different if the\n   * same options are not used in both caches.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.delete(k)\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   */\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<undefined | V>\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<undefined | V>\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.clear()\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, 'delete')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, 'delete'])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, 'delete')\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, 'delete'])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n", "const DEFAULT_MATCHER = () => true;\nexport function useRequestParser(options) {\n    const matchFn = options.match || DEFAULT_MATCHER;\n    return {\n        onRequestParse({ request, setRequestParser }) {\n            if (matchFn(request)) {\n                setRequestParser(options.parse);\n            }\n        },\n    };\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { getMediaTypesForRequestInOrder, isMatchingMediaType } from './result-processor/accept.js';\nimport { processMultipartResult } from './result-processor/multipart.js';\nimport { processRegularResult } from './result-processor/regular.js';\nimport { getSSEProcessor } from './result-processor/sse.js';\nconst multipart = {\n    mediaTypes: ['multipart/mixed'],\n    asyncIterables: true,\n    processResult: processMultipartResult,\n};\nfunction getSSEProcessorConfig() {\n    return {\n        mediaTypes: ['text/event-stream'],\n        asyncIterables: true,\n        processResult: getSSEProcessor(),\n    };\n}\nconst regular = {\n    mediaTypes: ['application/graphql-response+json', 'application/json'],\n    asyncIterables: false,\n    processResult: processRegularResult,\n};\nexport function useResultProcessors() {\n    const isSubscriptionRequestMap = new WeakMap();\n    const sse = getSSEProcessorConfig();\n    const defaultList = [sse, multipart, regular];\n    const subscriptionList = [sse, regular];\n    return {\n        onSubscribe({ args: { contextValue } }) {\n            if (contextValue.request) {\n                isSubscriptionRequestMap.set(contextValue.request, true);\n            }\n        },\n        onResultProcess({ request, result, acceptableMediaTypes, setResultProcessor }) {\n            const isSubscriptionRequest = isSubscriptionRequestMap.get(request);\n            const processorConfigList = isSubscriptionRequest ? subscriptionList : defaultList;\n            const requestMediaTypes = getMediaTypesForRequestInOrder(request);\n            const isAsyncIterableResult = isAsyncIterable(result);\n            for (const resultProcessorConfig of processorConfigList) {\n                for (const requestMediaType of requestMediaTypes) {\n                    if (isAsyncIterableResult && !resultProcessorConfig.asyncIterables) {\n                        continue;\n                    }\n                    for (const processorMediaType of resultProcessorConfig.mediaTypes) {\n                        acceptableMediaTypes.push(processorMediaType);\n                        if (isMatchingMediaType(processorMediaType, requestMediaType)) {\n                            setResultProcessor(resultProcessorConfig.processResult, processorMediaType);\n                        }\n                    }\n                }\n            }\n        },\n    };\n}\n", "export function getMediaTypesForRequestInOrder(request) {\n    const accepts = (request.headers.get('accept') || '*/*')\n        .replace(/\\s/g, '')\n        .toLowerCase()\n        .split(',');\n    const mediaTypes = [];\n    for (const accept of accepts) {\n        const [mediaType, ...params] = accept.split(';');\n        const charset = params?.find(param => param.includes('charset=')) || 'charset=utf-8'; // utf-8 is assumed when not specified;\n        if (charset !== 'charset=utf-8') {\n            // only utf-8 is supported\n            continue;\n        }\n        mediaTypes.push(mediaType);\n    }\n    return mediaTypes.reverse();\n}\nexport function isMatchingMediaType(askedMediaType, processorMediaType) {\n    const [askedPre, askedSuf] = askedMediaType.split('/');\n    const [pre, suf] = processorMediaType.split('/');\n    if ((pre === '*' || pre === askedPre) && (suf === '*' || suf === askedSuf)) {\n        return true;\n    }\n    return false;\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { getResponseInitByRespectingErrors } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function processMultipartResult(result, fetchAPI) {\n    const headersInit = {\n        Connection: 'keep-alive',\n        'Content-Type': 'multipart/mixed; boundary=\"-\"',\n        'Transfer-Encoding': 'chunked',\n    };\n    const responseInit = getResponseInitByRespectingErrors(result, headersInit);\n    let iterator;\n    const textEncoder = new fetchAPI.TextEncoder();\n    const readableStream = new fetchAPI.ReadableStream({\n        start(controller) {\n            if (isAsyncIterable(result)) {\n                iterator = result[Symbol.asyncIterator]();\n            }\n            else {\n                let finished = false;\n                iterator = {\n                    next: () => {\n                        if (finished) {\n                            return Promise.resolve({ done: true, value: null });\n                        }\n                        finished = true;\n                        return Promise.resolve({ done: false, value: result });\n                    },\n                };\n            }\n            controller.enqueue(textEncoder.encode(`---`));\n        },\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (value != null) {\n                controller.enqueue(textEncoder.encode('\\r\\n'));\n                controller.enqueue(textEncoder.encode('Content-Type: application/json; charset=utf-8'));\n                controller.enqueue(textEncoder.encode('\\r\\n'));\n                const chunk = jsonStringifyResultWithoutInternals(value);\n                const encodedChunk = textEncoder.encode(chunk);\n                controller.enqueue(textEncoder.encode('Content-Length: ' + encodedChunk.byteLength));\n                controller.enqueue(textEncoder.encode('\\r\\n'));\n                controller.enqueue(textEncoder.encode('\\r\\n'));\n                controller.enqueue(encodedChunk);\n                controller.enqueue(textEncoder.encode('\\r\\n'));\n                controller.enqueue(textEncoder.encode('---'));\n            }\n            if (done) {\n                controller.enqueue(textEncoder.encode('--\\r\\n'));\n                controller.close();\n            }\n        },\n        async cancel(e) {\n            await iterator.return?.(e);\n        },\n    });\n    return new fetchAPI.Response(readableStream, responseInit);\n}\n", "import { createGraphQLError, isGraphQLError } from '../../error.js';\n// JSON stringifier that adjusts the result error extensions while serialising\nexport function jsonStringifyResultWithoutInternals(result) {\n    if (Array.isArray(result)) {\n        return `[${result\n            .map(r => {\n            const sanitizedResult = omitInternalsFromResultErrors(r);\n            const stringifier = r.stringify || JSON.stringify;\n            return stringifier(sanitizedResult);\n        })\n            .join(',')}]`;\n    }\n    const sanitizedResult = omitInternalsFromResultErrors(result);\n    const stringifier = result.stringify || JSON.stringify;\n    return stringifier(sanitizedResult);\n}\nexport function omitInternalsFromResultErrors(result) {\n    if (result.errors?.length || result.extensions?.http) {\n        const newResult = { ...result };\n        newResult.errors &&= newResult.errors.map(omitInternalsFromError);\n        if (newResult.extensions) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TS should check for unused vars instead\n            const { http, ...extensions } = result.extensions;\n            newResult.extensions = Object.keys(extensions).length ? extensions : undefined;\n        }\n        return newResult;\n    }\n    return result;\n}\nfunction omitInternalsFromError(err) {\n    if (isGraphQLError(err)) {\n        const serializedError = 'toJSON' in err && typeof err.toJSON === 'function' ? err.toJSON() : Object(err);\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TS should check for unused vars instead\n        const { http, unexpected, ...extensions } = serializedError.extensions || {};\n        return createGraphQLError(err.message, {\n            nodes: err.nodes,\n            source: err.source,\n            positions: err.positions,\n            path: err.path,\n            originalError: omitInternalsFromError(err.originalError || undefined),\n            extensions: Object.keys(extensions).length ? extensions : undefined,\n        });\n    }\n    return err;\n}\n", "import { isAsyncIterable } from '@graphql-tools/utils';\nimport { areGraphQLErrors, getResponseInitByRespectingErrors, isGraphQLError, } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function processRegularResult(executionResult, fetchAPI, acceptedHeader) {\n    if (isAsyncIterable(executionResult)) {\n        return new fetchAPI.Response(null, {\n            status: 406,\n            statusText: 'Not Acceptable',\n            headers: {\n                accept: 'application/json; charset=utf-8, application/graphql-response+json; charset=utf-8',\n            },\n        });\n    }\n    const headersInit = {\n        'Content-Type': acceptedHeader + '; charset=utf-8',\n    };\n    const responseInit = getResponseInitByRespectingErrors(executionResult, headersInit, \n    // prefer 200 only if accepting application/json and all errors are exclusively GraphQL errors\n    acceptedHeader === 'application/json' &&\n        !Array.isArray(executionResult) &&\n        areGraphQLErrors(executionResult.errors) &&\n        executionResult.errors.some(err => !err.extensions?.originalError || isGraphQLError(err.extensions.originalError)));\n    const responseBody = jsonStringifyResultWithoutInternals(executionResult);\n    return new fetchAPI.Response(responseBody, responseInit);\n}\n", "import { isAsyncIterable } from '@envelop/core';\nimport { getResponseInitByRespectingErrors } from '../../error.js';\nimport { jsonStringifyResultWithoutInternals } from './stringify.js';\nexport function getSSEProcessor() {\n    return function processSSEResult(result, fetchAPI) {\n        let pingIntervalMs = 12000;\n        // for testing the pings, reduce the timeout\n        if (globalThis.process?.env?.NODE_ENV === 'test') {\n            pingIntervalMs = 300;\n        }\n        const headersInit = {\n            'Content-Type': 'text/event-stream',\n            Connection: 'keep-alive',\n            'Cache-Control': 'no-cache',\n            'Content-Encoding': 'none',\n        };\n        const responseInit = getResponseInitByRespectingErrors(result, headersInit, true);\n        let iterator;\n        let pingInterval;\n        const textEncoder = new fetchAPI.TextEncoder();\n        const readableStream = new fetchAPI.ReadableStream({\n            start(controller) {\n                // always start with a ping because some browsers dont accept a header flush\n                // causing the fetch to stall until something is streamed through the response\n                controller.enqueue(textEncoder.encode(':\\n\\n'));\n                // ping client every 12 seconds to keep the connection alive\n                pingInterval = setInterval(() => {\n                    if (!controller.desiredSize) {\n                        clearInterval(pingInterval);\n                        return;\n                    }\n                    controller.enqueue(textEncoder.encode(':\\n\\n'));\n                }, pingIntervalMs);\n                if (isAsyncIterable(result)) {\n                    iterator = result[Symbol.asyncIterator]();\n                }\n                else {\n                    let finished = false;\n                    iterator = {\n                        next: () => {\n                            if (finished) {\n                                return Promise.resolve({ done: true, value: null });\n                            }\n                            finished = true;\n                            return Promise.resolve({ done: false, value: result });\n                        },\n                    };\n                }\n            },\n            async pull(controller) {\n                const { done, value } = await iterator.next();\n                if (value != null) {\n                    controller.enqueue(textEncoder.encode(`event: next\\n`));\n                    const chunk = jsonStringifyResultWithoutInternals(value);\n                    controller.enqueue(textEncoder.encode(`data: ${chunk}\\n\\n`));\n                }\n                if (done) {\n                    controller.enqueue(textEncoder.encode(`event: complete\\n\\n`));\n                    clearInterval(pingInterval);\n                    controller.close();\n                }\n            },\n            async cancel(e) {\n                clearInterval(pingInterval);\n                await iterator.return?.(e);\n            },\n        });\n        return new fetchAPI.Response(readableStream, responseInit);\n    };\n}\n", "import landingPageBody from '../landing-page-html.js';\nexport function useUnhandledRoute(args) {\n    let urlPattern;\n    function getUrlPattern({ URLPattern }) {\n        urlPattern ||= new URLPattern({\n            pathname: args.graphqlEndpoint,\n        });\n        return urlPattern;\n    }\n    return {\n        onRequest({ request, fetchAPI, endResponse, url }) {\n            if (!request.url.endsWith(args.graphqlEndpoint) &&\n                !request.url.endsWith(`${args.graphqlEndpoint}/`) &&\n                url.pathname !== args.graphqlEndpoint &&\n                url.pathname !== `${args.graphqlEndpoint}/` &&\n                !getUrlPattern(fetchAPI).test(url)) {\n                if (args.showLandingPage === true &&\n                    request.method === 'GET' &&\n                    !!request.headers?.get('accept')?.includes('text/html')) {\n                    endResponse(new fetchAPI.Response(landingPageBody\n                        .replace(/__GRAPHIQL_LINK__/g, args.graphqlEndpoint)\n                        .replace(/__REQUEST_PATH__/g, url.pathname), {\n                        status: 200,\n                        statusText: 'OK',\n                        headers: {\n                            'Content-Type': 'text/html',\n                        },\n                    }));\n                    return;\n                }\n                endResponse(new fetchAPI.Response('', {\n                    status: 404,\n                    statusText: 'Not Found',\n                }));\n            }\n        },\n    };\n}\n", "export default \"<!doctype html><html lang=en><head><meta charset=utf-8><title>Welcome to GraphQL Yoga</title><link rel=icon href=https://raw.githubusercontent.com/dotansimha/graphql-yoga/main/website/public/favicon.ico><style>body,html{padding:0;margin:0;height:100%;font-family:Inter,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Fira Sans','Droid Sans','Helvetica Neue',sans-serif;color:#fff;background-color:#000}main>section.hero{display:flex;height:90vh;justify-content:center;align-items:center;flex-direction:column}.logo{display:flex;align-items:center}.buttons{margin-top:24px}h1{font-size:80px}h2{color:#888;max-width:50%;margin-top:0;text-align:center}a{color:#fff;text-decoration:none;margin-left:10px;margin-right:10px;font-weight:700;transition:color .3s ease;padding:4px;overflow:visible}a.graphiql:hover{color:rgba(255,0,255,.7)}a.docs:hover{color:rgba(28,200,238,.7)}a.tutorial:hover{color:rgba(125,85,245,.7)}svg{margin-right:24px}.not-what-your-looking-for{margin-top:5vh}.not-what-your-looking-for>*{margin-left:auto;margin-right:auto}.not-what-your-looking-for>p{text-align:center}.not-what-your-looking-for>h2{color:#464646}.not-what-your-looking-for>p{max-width:600px;line-height:1.3em}.not-what-your-looking-for>pre{max-width:300px}</style></head><body id=body><main><section class=hero><div class=logo><div><svg xmlns=http://www.w3.org/2000/svg viewBox=\\\"-0.41 0.445 472.812 499.811\\\" height=150><defs><linearGradient id=paint0_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint1_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint2_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint3_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint4_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><linearGradient id=paint5_linear_1677_11483 x1=16 y1=14 x2=87.2132 y2=44.5982 gradientUnits=userSpaceOnUse><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter0_f_1677_11483 x=23 y=-25 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter1_f_1677_11483 x=-24 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><linearGradient id=paint6_linear_1677_11483 x1=30 y1=28 x2=66.1645 y2=44.4363 gradientUnits=userSpaceOnUse gradientTransform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346407, -113.25101)\\\"><stop stop-color=#7433FF /><stop offset=1 stop-color=#FFA3FD /></linearGradient><filter id=filter2_f_1677_11483 x=-12 y=-44 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter><filter id=filter3_f_1677_11483 x=13 y=19 width=100 height=100 filterUnits=userSpaceOnUse color-interpolation-filters=sRGB><feFlood flood-opacity=0 result=BackgroundImageFix /><feBlend mode=normal in=SourceGraphic in2=BackgroundImageFix result=shape /><feGaussianBlur stdDeviation=12 result=effect1_foregroundBlur_1677_11483 /></filter></defs><mask id=mask0_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=16 y=14 width=58 height=62><path d=\\\"M21 25.3501C21.7279 25.3501 22.4195 25.5056 23.0433 25.7853L42.1439 14.8C43.0439 14.3 44.1439 14 45.1439 14C46.2439 14 47.2439 14.3 48.1439 14.8L64.5439 24.3C63.3439 25.1 62.4439 26.3 61.8439 27.7L45.9438 18.5C45.6439 18.3 45.344 18.3 45.0441 18.3C44.7441 18.3 44.4439 18.4 44.1439 18.5L25.8225 29.0251C25.9382 29.4471 26 29.8914 26 30.3501C26 33.1115 23.7614 35.3501 21 35.3501C18.2386 35.3501 16 33.1115 16 30.3501C16 27.5887 18.2386 25.3501 21 25.3501Z\\\" fill=url(#paint3_linear_1677_11483) /><path d=\\\"M67.2438 35.0329C65.3487 34.3219 64 32.4934 64 30.35C64 27.5886 66.2386 25.35 69 25.35C71.7614 25.35 74 27.5886 74 30.35C74 32.1825 73.0142 33.7848 71.5439 34.6554V55.2C71.5439 57.4 70.3439 59.4 68.5439 60.5L52.1439 69.9C52.1439 68.4 51.6438 66.9 50.7438 65.8L66.3439 56.8C66.9439 56.5 67.2438 55.9 67.2438 55.2V35.0329Z\\\" fill=url(#paint4_linear_1677_11483) /><path d=\\\"M49.8439 69.1055C49.9458 69.5034 50 69.9204 50 70.3501C50 73.1115 47.7614 75.3501 45 75.3501C42.5102 75.3501 40.4454 73.5302 40.0633 71.1481L21.8439 60.6C19.9439 59.5 18.8439 57.5 18.8439 55.3V36.8C19.5439 37 20.3439 37.2 21.0439 37.2C21.7439 37.2 22.4439 37.1 23.0439 36.9V55.3C23.0439 56 23.4438 56.6 23.9438 56.9L41.3263 66.9583C42.2398 65.9694 43.5476 65.3501 45 65.3501C47.3291 65.3501 49.2862 66.9426 49.8419 69.0981L49.8436 69.0997L49.8439 69.1055Z\\\" fill=url(#paint5_linear_1677_11483) /></mask><mask id=mask1_1677_11483 style=mask-type:alpha maskUnits=userSpaceOnUse x=30 y=28 width=30 height=30><path fill-rule=evenodd clip-rule=evenodd d=\\\"M49.3945 32.3945C49.3945 34.7088 47.5796 38.5469 45 38.5469C42.4271 38.5469 40.6055 34.7112 40.6055 32.3945C40.6055 29.9714 42.5769 28 45 28C47.4231 28 49.3945 29.9714 49.3945 32.3945ZM35.332 49.0433V48.2148C35.332 42.8117 37.8535 41.0004 39.8796 39.545L39.8801 39.5447C40.3928 39.1767 40.8604 38.8404 41.2488 38.4742C42.3293 39.6642 43.626 40.3047 45 40.3047C46.3752 40.3047 47.6725 39.6642 48.7529 38.4754C49.1408 38.841 49.6078 39.1773 50.1199 39.5447L50.1204 39.545C52.1465 41.0004 54.668 42.8117 54.668 48.2148V49.0433L53.8406 49.092C49.9848 49.3185 46.8646 46.9002 45 43.5777C43.1159 46.935 39.9847 49.318 36.1594 49.092L35.332 49.0433ZM58.1463 51.0747L58.1463 51.0746C57.0179 50.891 50.0128 49.7507 45.0007 55.693C40.0116 49.7553 33.1965 50.8592 31.9095 51.0677L31.9095 51.0677C31.7906 51.087 31.7189 51.0986 31.7002 51.0963C31.7005 51.0969 31.7011 51.1045 31.7023 51.1187C31.726 51.4003 31.9682 54.2745 34.0566 56.2422L30 58H60L55.8956 56.2422C57.8537 54.4764 58.1396 52.2685 58.2508 51.4092V51.4091C58.2697 51.2628 58.2836 51.1556 58.2998 51.0963C58.2881 51.0977 58.2356 51.0892 58.1463 51.0747ZM40.4836 50.104C42.3956 49.3212 43.6746 48.1737 45 46.61C46.332 48.1841 47.6159 49.3259 49.5164 50.104C49.5356 50.1425 49.5557 50.1805 49.5756 50.2182C49.5793 50.2253 49.583 50.2323 49.5867 50.2393C48.0911 50.8127 46.4264 51.825 45.0047 53.1444C43.5906 51.8221 41.9673 50.8196 40.4256 50.2153C40.4455 50.1784 40.4648 50.1415 40.4836 50.104Z\\\" fill=black /></mask><path d=\\\"M 40.59 93.095 C 46.517 93.095 52.14 94.365 57.22 96.635 L 212.7 7.22 C 220.025 3.149 228.978 0.706 237.12 0.706 C 246.073 0.706 254.213 3.149 261.54 7.22 L 395.032 84.547 C 385.264 91.059 377.939 100.827 373.055 112.224 L 243.631 37.338 C 241.19 35.71 238.747 35.71 236.305 35.71 C 233.863 35.71 231.42 36.523 228.978 37.338 L 79.84 123.009 C 80.786 126.443 81.29 130.058 81.29 133.793 C 81.29 156.269 63.065 174.493 40.59 174.493 C 18.116 174.493 -0.109 156.269 -0.109 133.793 C -0.109 111.32 18.116 93.095 40.59 93.095 Z\\\" fill=url(#paint0_linear_1677_11483) /><path d=\\\"M 417.01 171.913 C 401.585 166.126 390.603 151.238 390.603 133.793 C 390.603 111.32 408.83 93.095 431.303 93.095 C 453.777 93.095 472.001 111.32 472.001 133.793 C 472.001 148.706 463.976 161.755 452.011 168.835 L 452.011 336.07 C 452.011 353.977 442.243 370.258 427.591 379.21 L 294.098 455.726 C 294.098 443.516 290.029 431.306 282.703 422.353 L 409.683 349.093 C 414.568 346.651 417.01 341.767 417.01 336.07 L 417.01 171.913 Z\\\" fill=url(#paint1_linear_1677_11483) /><path d=\\\"M 275.376 449.253 C 276.206 452.495 276.646 455.889 276.646 459.389 C 276.646 481.863 258.422 500.087 235.947 500.087 C 215.679 500.087 198.87 485.272 195.761 465.883 L 47.46 380.025 C 31.995 371.071 23.041 354.792 23.041 336.884 L 23.041 186.296 C 28.738 187.923 35.25 189.553 40.948 189.553 C 46.646 189.553 52.345 188.738 57.228 187.111 L 57.228 336.884 C 57.228 342.582 60.485 347.465 64.554 349.908 L 206.042 431.777 C 213.481 423.728 224.127 418.689 235.947 418.689 C 254.905 418.689 270.833 431.656 275.36 449.196 L 275.376 449.214 L 275.376 449.253 Z\\\" fill=url(#paint2_linear_1677_11483) /><g mask=url(#mask0_1677_11483) transform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)\\\"><g filter=url(#filter0_f_1677_11483)><circle cx=73 cy=25 r=26 fill=#ED2E7E /></g><g filter=url(#filter1_f_1677_11483)><circle cx=26 cy=69 r=26 fill=#1CC8EE /></g></g><path fill-rule=evenodd clip-rule=evenodd d=\\\"M 271.713 150.431 C 271.713 169.275 256.948 200.517 235.947 200.517 C 215.003 200.517 200.172 169.292 200.172 150.431 C 200.172 130.708 216.225 114.666 235.947 114.666 C 255.67 114.666 271.713 130.708 271.713 150.431 Z M 157.251 285.952 L 157.251 279.212 C 157.251 235.233 177.771 220.485 194.27 208.641 C 198.447 205.644 202.247 202.901 205.414 199.923 C 214.204 209.608 224.763 214.826 235.947 214.826 C 247.138 214.826 257.697 209.608 266.496 199.931 C 269.653 202.911 273.456 205.644 277.622 208.641 C 294.114 220.485 314.642 235.233 314.642 279.212 L 314.642 285.952 L 307.912 286.351 C 276.525 288.191 251.128 268.509 235.947 241.468 C 220.611 268.795 195.126 288.191 163.981 286.351 L 157.251 285.952 Z M 342.953 302.492 C 333.771 300.994 276.751 291.715 235.955 340.082 C 195.345 291.749 139.865 300.734 129.389 302.436 C 128.428 302.59 127.841 302.688 127.687 302.665 C 127.687 302.673 127.695 302.729 127.702 302.85 C 127.897 305.138 129.867 328.532 146.872 344.55 L 113.849 358.862 L 358.044 358.862 L 324.639 344.55 C 340.576 330.177 342.905 312.202 343.807 305.212 C 343.962 304.022 344.077 303.153 344.206 302.665 C 344.108 302.68 343.686 302.606 342.953 302.492 Z M 199.188 294.59 C 214.751 288.215 225.161 278.879 235.947 266.15 C 246.788 278.96 257.241 288.255 272.707 294.59 C 272.869 294.898 273.031 295.207 273.196 295.518 C 273.219 295.574 273.252 295.631 273.285 295.688 C 261.107 300.361 247.555 308.598 235.989 319.334 C 224.477 308.573 211.258 300.417 198.715 295.493 C 198.87 295.191 199.033 294.891 199.188 294.59 Z\\\" fill=url(#paint6_linear_1677_11483) /><g mask=url(#mask1_1677_11483) transform=\\\"matrix(8.139854, 0, 0, 8.139854, -130.346375, -113.251038)\\\"><g filter=url(#filter2_f_1677_11483)><circle cx=38 cy=6 r=26 fill=#ED2E7E /></g><g filter=url(#filter3_f_1677_11483)><circle cx=63 cy=69 r=26 fill=#1CC8EE /></g></g></svg></div><h1>GraphQL Yoga</h1></div><h2>The batteries-included cross-platform GraphQL Server.</h2><div class=buttons><a href=https://www.the-guild.dev/graphql/yoga-server/docs class=docs>Read the Docs</a> <a href=https://www.the-guild.dev/graphql/yoga-server/tutorial/basic class=tutorial>Start the Tutorial </a><a href=__GRAPHIQL_LINK__ class=graphiql>Visit GraphiQL</a></div></section><section class=not-what-your-looking-for><h2>Not the page you are looking for? \uD83D\uDC40</h2><p>This page is shown be default whenever a 404 is hit.<br>You can disable this by behavior via the <code>landingPage</code> option.</p><pre>\\n          <code>\\nimport { createYoga } from 'graphql-yoga';\\n\\nconst yoga = createYoga({\\n  landingPage: false\\n})\\n          </code>\\n        </pre><p>If you expected this page to be the GraphQL route, you need to configure Yoga. Currently, the GraphQL route is configured to be on <code>__GRAPHIQL_LINK__</code>.</p><pre>\\n          <code>\\nimport { createYoga } from 'graphql-yoga';\\n\\nconst yoga = createYoga({\\n  graphqlEndpoint: '__REQUEST_PATH__',\\n})\\n          </code>\\n        </pre></section></main></body></html>\";\n", "import { getOperationAST } from 'graphql';\nexport async function processResult({ request, result, fetchAPI, onResultProcessHooks, }) {\n    let resultProcessor;\n    const acceptableMediaTypes = [];\n    let acceptedMediaType = '*/*';\n    for (const onResultProcessHook of onResultProcessHooks) {\n        await onResultProcessHook({\n            request,\n            acceptableMediaTypes,\n            result,\n            setResult(newResult) {\n                result = newResult;\n            },\n            resultProcessor,\n            setResultProcessor(newResultProcessor, newAcceptedMimeType) {\n                resultProcessor = newResultProcessor;\n                acceptedMediaType = newAcceptedMimeType;\n            },\n        });\n    }\n    // If no result processor found for this result, return an error\n    if (!resultProcessor) {\n        return new fetchAPI.Response(null, {\n            status: 406,\n            statusText: 'Not Acceptable',\n            headers: {\n                accept: acceptableMediaTypes.join('; charset=utf-8, '),\n            },\n        });\n    }\n    return resultProcessor(result, fetchAPI, acceptedMediaType);\n}\nexport async function processRequest({ params, enveloped, }) {\n    // Parse GraphQLParams\n    const document = enveloped.parse(params.query);\n    // Validate parsed Document Node\n    const errors = enveloped.validate(enveloped.schema, document);\n    if (errors.length > 0) {\n        return { errors };\n    }\n    // Build the context for the execution\n    const contextValue = await enveloped.contextFactory();\n    const executionArgs = {\n        schema: enveloped.schema,\n        document,\n        contextValue,\n        variableValues: params.variables,\n        operationName: params.operationName,\n    };\n    // Get the actual operation\n    const operation = getOperationAST(document, params.operationName);\n    // Choose the right executor\n    const executeFn = operation?.operation === 'subscription' ? enveloped.subscribe : enveloped.execute;\n    // Get the result to be processed\n    return executeFn(executionArgs);\n}\n", "import { createGraphQLError } from '@graphql-tools/utils';\nimport { isGraphQLError } from '../error.js';\nexport const maskError = (error, message, isDev = globalThis.process?.env?.NODE_ENV === 'development') => {\n    if (isGraphQLError(error)) {\n        if (error.originalError) {\n            if (error.originalError.name === 'GraphQLError') {\n                return error;\n            }\n            // Original error should be removed\n            const extensions = {\n                ...error.extensions,\n                unexpected: true,\n            };\n            if (isDev) {\n                extensions.originalError = {\n                    message: error.originalError.message,\n                    stack: error.originalError.stack,\n                };\n            }\n            return createGraphQLError(message, {\n                nodes: error.nodes,\n                source: error.source,\n                positions: error.positions,\n                path: error.path,\n                extensions,\n            });\n        }\n        return error;\n    }\n    return createGraphQLError(message, {\n        extensions: {\n            unexpected: true,\n            originalError: isDev\n                ? error instanceof Error\n                    ? {\n                        message: error.message,\n                        stack: error.stack,\n                    }\n                    : error\n                : undefined,\n        },\n    });\n};\n", "/* eslint-disable @typescript-eslint/no-redeclare */\nimport './types/global';\nimport SchemaBuilderClass from './builder';\nimport InternalFieldBuilder from './fieldUtils/builder';\nimport InternalInputFieldBuilder from './fieldUtils/input';\nimport InternalInterfaceFieldBuilder from './fieldUtils/interface';\nimport InternalMutationFieldBuilder from './fieldUtils/mutation';\nimport InternalObjectFieldBuilder from './fieldUtils/object';\nimport InternalQueryFieldBuilder from './fieldUtils/query';\nimport InternalRootFieldBuilder from './fieldUtils/root';\nimport InternalSubscriptionFieldBuilder from './fieldUtils/subscription';\nimport InternalBaseTypeRef from './refs/base';\nimport InternalEnumRef from './refs/enum';\nimport InternalInputListRef from './refs/input-list';\nimport InternalInputObjectRef from './refs/input-object';\nimport InternalInterfaceRef from './refs/interface';\nimport InternalListRef from './refs/list';\nimport InternalObjectRef from './refs/object';\nimport InternalScalarRef from './refs/scalar';\nimport InternalUnionRef from './refs/union';\nimport type { FieldKind, NormalizeSchemeBuilderOptions, RootName, SchemaTypes } from './types';\n\nexport * from './errors';\nexport * from './plugins';\nexport * from './types';\nexport * from './utils';\n\nconst SchemaBuilder = SchemaBuilderClass as unknown as {\n  registerPlugin: typeof SchemaBuilderClass.registerPlugin;\n  allowPluginReRegistration: boolean;\n\n  new <Types extends Partial<PothosSchemaTypes.UserSchemaTypes> = {}>(\n    options: NormalizeSchemeBuilderOptions<PothosSchemaTypes.ExtendDefaultTypes<Types>>,\n  ): PothosSchemaTypes.SchemaBuilder<PothosSchemaTypes.ExtendDefaultTypes<Types>>;\n};\n\nexport default SchemaBuilder;\n\nexport const FieldBuilder = InternalFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n  Kind extends Exclude<FieldKind, RootName> = Exclude<FieldKind, RootName>,\n>(\n  name: string,\n  builder: SchemaBuilderClass<Types>,\n  kind: FieldKind,\n  graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[FieldKind],\n) => PothosSchemaTypes.FieldBuilder<Types, ParentShape, Kind>;\n\nexport type RootFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n  Kind extends FieldKind = FieldKind,\n> = PothosSchemaTypes.RootFieldBuilder<Types, ParentShape, Kind>;\n\nexport const RootFieldBuilder = InternalRootFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n  Kind extends FieldKind = FieldKind,\n>(\n  name: string,\n  builder: SchemaBuilderClass<Types>,\n  kind: FieldKind,\n  graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[FieldKind],\n) => PothosSchemaTypes.RootFieldBuilder<Types, ParentShape, Kind>;\n\nexport type QueryFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> = PothosSchemaTypes.QueryFieldBuilder<Types, ParentShape>;\nexport const QueryFieldBuilder = InternalQueryFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n>(\n  builder: SchemaBuilderClass<Types>,\n) => PothosSchemaTypes.QueryFieldBuilder<Types, ParentShape>;\n\nexport type MutationFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> = PothosSchemaTypes.MutationFieldBuilder<Types, ParentShape>;\nexport const MutationFieldBuilder = InternalMutationFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n>(\n  builder: SchemaBuilderClass<Types>,\n) => PothosSchemaTypes.MutationFieldBuilder<Types, ParentShape>;\n\nexport type SubscriptionFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> = PothosSchemaTypes.SubscriptionFieldBuilder<Types, ParentShape>;\nexport const SubscriptionFieldBuilder = InternalSubscriptionFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n>(\n  builder: SchemaBuilderClass<Types>,\n) => PothosSchemaTypes.SubscriptionFieldBuilder<Types, ParentShape>;\n\nexport type ObjectFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> = PothosSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;\nexport const ObjectFieldBuilder = InternalObjectFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n>(\n  name: string,\n  builder: SchemaBuilderClass<Types>,\n) => PothosSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;\n\nexport type InterfaceFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> = PothosSchemaTypes.InterfaceFieldBuilder<Types, ParentShape>;\nexport const InterfaceFieldBuilder = InternalInterfaceFieldBuilder as new <\n  Types extends SchemaTypes,\n  ParentShape,\n>(\n  name: string,\n  builder: SchemaBuilderClass<Types>,\n) => PothosSchemaTypes.InterfaceFieldBuilder<Types, ParentShape>;\n\nexport type InputFieldBuilder<\n  Types extends SchemaTypes,\n  Kind extends 'Arg' | 'InputObject' = 'Arg' | 'InputObject',\n> = PothosSchemaTypes.InputFieldBuilder<Types, Kind>;\nexport const InputFieldBuilder = InternalInputFieldBuilder as new <\n  Types extends SchemaTypes,\n  Kind extends 'Arg' | 'InputObject' = 'Arg' | 'InputObject',\n>(\n  builder: SchemaBuilderClass<Types>,\n  kind: Kind,\n  typename: string,\n) => PothosSchemaTypes.InputFieldBuilder<Types, Kind>;\n\nexport type BaseTypeRef = PothosSchemaTypes.BaseTypeRef;\nexport const BaseTypeRef = InternalBaseTypeRef as new (\n  kind: 'Enum' | 'InputObject' | 'Interface' | 'Object' | 'Scalar' | 'Union',\n  name: string,\n) => PothosSchemaTypes.BaseTypeRef;\n\nexport type EnumRef<T, P = T> = PothosSchemaTypes.EnumRef<T, P>;\nexport const EnumRef = InternalEnumRef as new <T, P = T>(\n  name: string,\n) => PothosSchemaTypes.EnumRef<T, P>;\n\nexport type InputObjectRef<T> = PothosSchemaTypes.InputObjectRef<T>;\nexport const InputObjectRef = InternalInputObjectRef as new <T>(\n  name: string,\n) => PothosSchemaTypes.InputObjectRef<T>;\n\nexport type InputListRef<Types extends SchemaTypes, T> = PothosSchemaTypes.InputListRef<Types, T>;\nexport const InputListRef = InternalInputListRef as new <Types extends SchemaTypes, T>(\n  name: string,\n  required: boolean,\n) => PothosSchemaTypes.InputListRef<Types, T>;\n\nexport type InterfaceRef<T, P = T> = PothosSchemaTypes.InterfaceRef<T, P>;\nexport const InterfaceRef = InternalInterfaceRef as new <T, P = T>(\n  name: string,\n) => PothosSchemaTypes.InterfaceRef<T, P>;\n\nexport type ObjectRef<T, P = T> = PothosSchemaTypes.ObjectRef<T, P>;\nexport const ObjectRef = InternalObjectRef as new <T, P = T>(\n  name: string,\n) => PothosSchemaTypes.ObjectRef<T, P>;\n\nexport type ScalarRef<T, U, P = T> = PothosSchemaTypes.ScalarRef<T, U, P>;\nexport const ScalarRef = InternalScalarRef as new <T, U, P = T>(\n  name: string,\n) => PothosSchemaTypes.ScalarRef<T, U, P>;\n\nexport type UnionRef<T, P = T> = PothosSchemaTypes.UnionRef<T, P>;\nexport const UnionRef = InternalUnionRef as new <T, P = T>(\n  name: string,\n) => PothosSchemaTypes.UnionRef<T, P>;\n\nexport type ListRef<Types extends SchemaTypes, T, P = T> = PothosSchemaTypes.ListRef<Types, T, P>;\nexport const ListRef = InternalListRef as new <Types extends SchemaTypes, T, P = T>(\n  name: string,\n  nullable: boolean,\n) => PothosSchemaTypes.ListRef<Types, T, P>;\n\nexport { default as BuildCache } from './build-cache';\nexport { default as BuiltinScalarRef } from './refs/builtin-scalar';\nexport { default as FieldRef } from './refs/field';\nexport { default as InputTypeRef } from './refs/input';\nexport { default as InputFieldRef } from './refs/input-field';\nexport { ImplementableInputObjectRef } from './refs/input-object';\nexport { ImplementableInterfaceRef } from './refs/interface';\nexport { ImplementableObjectRef } from './refs/object';\nexport { default as OutputTypeRef } from './refs/output';\n", "import './type-options';\nimport './field-options';\nimport './classes';\nimport './schema-types';\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  GraphQLIsTypeOfFn,\n  GraphQLResolveInfo,\n  GraphQLScalarLiteralParser,\n  GraphQLScalarValueParser,\n  GraphQLUnionType,\n} from 'graphql';\nimport type {\n  EnumValues,\n  InputFieldMap,\n  InterfaceFieldsShape,\n  MutationFieldsShape,\n  ObjectFieldsShape,\n  QueryFieldsShape,\n  SubscriptionFieldsShape,\n  ValidateInterfaces,\n} from '../builder-options';\nimport type { RootName, SchemaTypes } from '../schema-types';\nimport type { InterfaceParam, ObjectParam, ParentShape } from '../type-params';\nimport type { MaybePromise } from '../utils';\n\ndeclare global {\n  export namespace PothosSchemaTypes {\n    export interface BaseTypeOptions<Types extends SchemaTypes = SchemaTypes> {\n      description?: string;\n      extensions?: Readonly<Record<string, unknown>>;\n    }\n    export interface EnumTypeOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Values extends EnumValues<Types> = EnumValues<Types>,\n    > extends BaseTypeOptions<Types> {\n      values: Values;\n    }\n\n    export interface ObjectTypeOptions<Types extends SchemaTypes = SchemaTypes, Shape = unknown>\n      extends BaseTypeOptions<Types> {\n      fields?: ObjectFieldsShape<Types, Shape>;\n      interfaces?: undefined;\n      isTypeOf?: GraphQLIsTypeOfFn<unknown, Types['Context']>;\n    }\n\n    export interface ObjectTypeWithInterfaceOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Shape = unknown,\n      Interfaces extends InterfaceParam<Types>[] = InterfaceParam<Types>[],\n    > extends Omit<ObjectTypeOptions<Types, Shape>, 'interfaces'> {\n      interfaces?:\n        | (() => Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[])\n        | (Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[]);\n    }\n    export interface RootTypeOptions<Types extends SchemaTypes, Type extends RootName>\n      extends BaseTypeOptions<Types> {}\n\n    export interface QueryTypeOptions<Types extends SchemaTypes = SchemaTypes>\n      extends RootTypeOptions<Types, 'Query'> {\n      fields?: QueryFieldsShape<Types>;\n    }\n\n    export interface MutationTypeOptions<Types extends SchemaTypes = SchemaTypes>\n      extends RootTypeOptions<Types, 'Mutation'> {\n      fields?: MutationFieldsShape<Types>;\n    }\n\n    export interface SubscriptionTypeOptions<Types extends SchemaTypes = SchemaTypes>\n      extends RootTypeOptions<Types, 'Subscription'> {\n      fields?: SubscriptionFieldsShape<Types>;\n    }\n\n    export interface InputObjectTypeOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Fields extends InputFieldMap = InputFieldMap,\n    > extends BaseTypeOptions<Types> {\n      isOneOf?: boolean;\n      fields: (t: InputFieldBuilder<Types, 'InputObject'>) => Fields;\n    }\n\n    export interface InterfaceTypeOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Shape = unknown,\n      Interfaces extends InterfaceParam<Types>[] = InterfaceParam<Types>[],\n      ResolveType = unknown,\n    > extends BaseTypeOptions<Types> {\n      fields?: InterfaceFieldsShape<Types, Shape>;\n      interfaces?:\n        | (() => Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[])\n        | (Interfaces & ValidateInterfaces<Shape, Types, Interfaces[number]>[]);\n      resolveType?: ResolveType &\n        ((\n          parent: Shape,\n          context: Types['Context'],\n          info: GraphQLResolveInfo,\n          type: GraphQLUnionType,\n        ) => MaybePromise<ObjectParam<Types> | string | null | undefined>);\n    }\n\n    export interface UnionTypeOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Member extends ObjectParam<Types> = ObjectParam<Types>,\n      ResolveType = unknown,\n    > extends BaseTypeOptions<Types> {\n      types: Member[] | (() => Member[]);\n      resolveType?: ResolveType &\n        ((\n          parent: ParentShape<Types, Member>,\n          context: Types['Context'],\n          info: GraphQLResolveInfo,\n          type: GraphQLUnionType,\n        ) => MaybePromise<Member | string | null | undefined>);\n    }\n\n    export interface ScalarTypeOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      ScalarInputShape = unknown,\n      ScalarOutputShape = unknown,\n    > extends BaseTypeOptions<Types> {\n      // Serializes an internal value to include in a response.\n      serialize: (outputValue: ScalarOutputShape) => unknown;\n      // Parses an externally provided value to use as an input.\n      parseValue?: GraphQLScalarValueParser<ScalarInputShape>;\n      // Parses an externally provided literal value to use as an input.\n      parseLiteral?: GraphQLScalarLiteralParser<ScalarInputShape>;\n    }\n\n    export interface EnumValueConfig<Types extends SchemaTypes> {\n      description?: string;\n      value?: number | string;\n      deprecationReason?: string;\n      extensions?: Readonly<Record<string, unknown>>;\n    }\n  }\n}\n", "import type { GraphQLFieldExtensions } from 'graphql';\nimport type { InputFieldMap, InputShapeFromFields, Resolver, Subscriber } from '../builder-options';\nimport type { SchemaTypes } from '../schema-types';\nimport type {\n  FieldNullability,\n  FieldRequiredness,\n  InputShapeFromTypeParam,\n  InputType,\n  ShapeFromTypeParam,\n  TypeParam,\n} from '../type-params';\n\ndeclare global {\n  export namespace PothosSchemaTypes {\n    export interface FieldOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      ParentShape = unknown,\n      Type extends TypeParam<Types> = TypeParam<Types>,\n      Nullable extends FieldNullability<Type> = FieldNullability<Type>,\n      Args extends InputFieldMap = InputFieldMap,\n      ResolveShape = unknown,\n      ResolveReturnShape = unknown,\n    > {\n      /** The type for this field */\n      type: Type;\n      /** arguments for this field (created via `t.args`) */\n      args?: Args;\n      /** determins if this field can return null */\n      nullable?: Nullable;\n      /** text description for this field.  This will be added into your schema file and visable in tools like graphql-playground */\n      description?: string;\n      /** When present marks this field as deprecated */\n      deprecationReason?: string;\n      /** extensions for this field for use by directives, server plugins or other tools that depend on extensions */\n      extensions?: GraphQLFieldExtensions<\n        ParentShape,\n        Types['Context'],\n        InputShapeFromFields<Args>\n      >;\n      /**\n       * Resolver function for this field\n       * @param parent - The parent object for the current type\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      resolve?: Resolver<\n        ResolveShape,\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ShapeFromTypeParam<Types, Type, Nullable>,\n        ResolveReturnShape\n      >;\n    }\n\n    export interface ObjectFieldOptions<\n      Types extends SchemaTypes,\n      ParentShape,\n      Type extends TypeParam<Types>,\n      Nullable extends FieldNullability<Type>,\n      Args extends InputFieldMap,\n      ResolveReturnShape,\n    > extends FieldOptions<\n        Types,\n        ParentShape,\n        Type,\n        Nullable,\n        Args,\n        ParentShape,\n        ResolveReturnShape\n      > {\n      /**\n       * Resolver function for this field\n       * @param parent - The parent object for the current type\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      resolve: Resolver<\n        ParentShape,\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ShapeFromTypeParam<Types, Type, Nullable>,\n        ResolveReturnShape\n      >;\n    }\n\n    export interface QueryFieldOptions<\n      Types extends SchemaTypes,\n      Type extends TypeParam<Types>,\n      Nullable extends FieldNullability<Type>,\n      Args extends InputFieldMap,\n      ResolveReturnShape,\n    > extends FieldOptions<\n        Types,\n        Types['Root'],\n        Type,\n        Nullable,\n        Args,\n        Types['Root'],\n        ResolveReturnShape\n      > {\n      /**\n       * Resolver function for this field\n       * @param root - The root object for this request\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      resolve: Resolver<\n        Types['Root'],\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ShapeFromTypeParam<Types, Type, Nullable>,\n        ResolveReturnShape\n      >;\n    }\n\n    export interface MutationFieldOptions<\n      Types extends SchemaTypes,\n      Type extends TypeParam<Types>,\n      Nullable extends FieldNullability<Type>,\n      Args extends InputFieldMap,\n      ResolveReturnShape,\n    > extends FieldOptions<\n        Types,\n        Types['Root'],\n        Type,\n        Nullable,\n        Args,\n        Types['Root'],\n        ResolveReturnShape\n      > {\n      /**\n       * Resolver function for this field\n       * @param root - The root object for this request\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      resolve: Resolver<\n        Types['Root'],\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ShapeFromTypeParam<Types, Type, Nullable>,\n        ResolveReturnShape\n      >;\n    }\n\n    export interface InterfaceFieldOptions<\n      Types extends SchemaTypes,\n      ParentShape,\n      Type extends TypeParam<Types>,\n      Nullable extends FieldNullability<Type>,\n      Args extends InputFieldMap,\n      ResolveReturnShape,\n    > extends FieldOptions<\n        Types,\n        ParentShape,\n        Type,\n        Nullable,\n        Args,\n        ParentShape,\n        ResolveReturnShape\n      > {\n      /**\n       * Resolver function for this field\n       * @param root - The root object for this request\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      resolve?: Resolver<\n        ParentShape,\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ShapeFromTypeParam<Types, Type, Nullable>,\n        ResolveReturnShape\n      >;\n    }\n\n    export interface SubscriptionFieldOptions<\n      Types extends SchemaTypes,\n      Type extends TypeParam<Types>,\n      Nullable extends FieldNullability<Type>,\n      Args extends InputFieldMap,\n      ResolveShape,\n      ResolveReturnShape,\n    > extends FieldOptions<\n        Types,\n        Types['Root'],\n        Type,\n        Nullable,\n        Args,\n        ResolveShape,\n        ResolveReturnShape\n      > {\n      /**\n       * Resolver function for this field\n       * @param parent - The parent object for this subscription (yielded by subscribe)\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      resolve: Resolver<\n        ResolveShape,\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ShapeFromTypeParam<Types, Type, Nullable>,\n        ResolveReturnShape\n      >;\n      /**\n       * Resolver function for this field\n       * @param root - The root object for this request\n       * @param {object} args - args object based on the args defined for this field\n       * @param {object} context - the context object for the current query, based on `Context` type provided to the SchemaBuilder\n       * @param {GraphQLResolveInfo} info - info about how this field was queried\n       */\n      subscribe: Subscriber<\n        Types['Root'],\n        InputShapeFromFields<Args>,\n        Types['Context'],\n        ResolveShape\n      >;\n    }\n\n    export interface FieldOptionsByKind<\n      Types extends SchemaTypes,\n      ParentShape,\n      Type extends TypeParam<Types>,\n      Nullable extends FieldNullability<Type>,\n      Args extends InputFieldMap,\n      ResolveShape,\n      ResolveReturnShape,\n    > {\n      Query: QueryFieldOptions<Types, Type, Nullable, Args, ResolveReturnShape>;\n      Mutation: MutationFieldOptions<Types, Type, Nullable, Args, ResolveReturnShape>;\n      Subscription: SubscriptionFieldOptions<\n        Types,\n        Type,\n        Nullable,\n        Args,\n        ResolveShape,\n        ResolveReturnShape\n      >;\n      Object: ObjectFieldOptions<Types, ParentShape, Type, Nullable, Args, ResolveReturnShape>;\n      Interface: InterfaceFieldOptions<\n        Types,\n        ParentShape,\n        Type,\n        Nullable,\n        Args,\n        ResolveReturnShape\n      >;\n    }\n\n    export interface InputFieldOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Type extends InputType<Types> | [InputType<Types>] = InputType<Types> | [InputType<Types>],\n      Req extends FieldRequiredness<Type> = FieldRequiredness<Type>,\n    > {\n      /** The type for this field */\n      type: Type;\n      /** text description for this field.  This will be added into your schema file and visable in tools like graphql-playground */\n      description?: string;\n      /** When present marks this field as deprecated */\n      deprecationReason?: string;\n      /** determines if this field can be omitted (or set as null) */\n      required?: Req;\n      /** default value if this field is not included in the query */\n      defaultValue?: InputShapeFromTypeParam<Types, Type, Req>;\n      /** extensions for this field for use by directives, server plugins or other tools that depend on extensions */\n      extensions?: Readonly<Record<string, unknown>>;\n    }\n\n    export interface ArgFieldOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Type extends InputType<Types> | [InputType<Types>] = InputType<Types> | [InputType<Types>],\n      Req extends FieldRequiredness<Type> = FieldRequiredness<Type>,\n    > extends InputFieldOptions<Types, Type, Req> {}\n\n    export interface InputObjectFieldOptions<\n      Types extends SchemaTypes = SchemaTypes,\n      Type extends InputType<Types> | [InputType<Types>] = InputType<Types> | [InputType<Types>],\n      Req extends FieldRequiredness<Type> = FieldRequiredness<Type>,\n    > extends InputFieldOptions<Types, Type, Req> {}\n\n    export interface InputFieldOptionsByKind<\n      Types extends SchemaTypes = SchemaTypes,\n      Type extends InputType<Types> | [InputType<Types>] = InputType<Types> | [InputType<Types>],\n      Req extends FieldRequiredness<Type> = FieldRequiredness<Type>,\n    > {\n      Arg: ArgFieldOptions<Types, Type, Req>;\n      InputObject: InputObjectFieldOptions<Types, Type, Req>;\n    }\n  }\n}\n", "import type Builder from '../../builder';\nimport type InternalFieldBuilder from '../../fieldUtils/builder';\nimport type InternalInputFieldBuilder from '../../fieldUtils/input';\nimport type InternalRootFieldBuilder from '../../fieldUtils/root';\nimport type InternalBaseRef from '../../refs/base';\nimport type InternalEnumRef from '../../refs/enum';\nimport type InternalInputListRef from '../../refs/input-list';\nimport type InternalInputObjectRef from '../../refs/input-object';\nimport type InternalInterfaceRef from '../../refs/interface';\nimport type InternalListRef from '../../refs/list';\nimport type InternalObjectRef from '../../refs/object';\nimport type InternalScalarRef from '../../refs/scalar';\nimport type InternalUnionRef from '../../refs/union';\nimport type { FieldKind } from '../builder-options';\nimport type { SchemaTypes } from '../schema-types';\n\ndeclare global {\n  export namespace PothosSchemaTypes {\n    export interface SchemaBuilder<Types extends SchemaTypes> extends Builder<Types> {}\n\n    export interface RootFieldBuilder<\n      Types extends SchemaTypes,\n      ParentShape,\n      Kind extends FieldKind = FieldKind,\n    > extends InternalRootFieldBuilder<Types, ParentShape, Kind> {}\n\n    export interface FieldBuilder<\n      Types extends SchemaTypes,\n      ParentShape,\n      Kind extends FieldKind = FieldKind,\n    > extends InternalFieldBuilder<Types, ParentShape, Kind>,\n        RootFieldBuilder<Types, ParentShape, Kind> {}\n\n    export interface QueryFieldBuilder<Types extends SchemaTypes, ParentShape>\n      extends RootFieldBuilder<Types, ParentShape, 'Query'> {}\n\n    export interface MutationFieldBuilder<Types extends SchemaTypes, ParentShape>\n      extends RootFieldBuilder<Types, ParentShape, 'Mutation'> {}\n\n    export interface SubscriptionFieldBuilder<Types extends SchemaTypes, ParentShape>\n      extends RootFieldBuilder<Types, ParentShape, 'Subscription'> {}\n\n    export interface ObjectFieldBuilder<Types extends SchemaTypes, ParentShape>\n      extends FieldBuilder<Types, ParentShape, 'Object'> {}\n\n    export interface InterfaceFieldBuilder<Types extends SchemaTypes, ParentShape>\n      extends FieldBuilder<Types, ParentShape, 'Interface'> {}\n\n    export interface InputFieldBuilder<\n      Types extends SchemaTypes,\n      Kind extends 'Arg' | 'InputObject',\n    > extends InternalInputFieldBuilder<Types, Kind> {}\n\n    export interface BaseTypeRef extends InternalBaseRef {}\n    export interface EnumRef<T, U = T> extends InternalEnumRef<T, U> {}\n    export interface InputObjectRef<T> extends InternalInputObjectRef<T> {}\n    export interface InputListRef<Types extends SchemaTypes, T>\n      extends InternalInputListRef<Types, T> {}\n    export interface InterfaceRef<T, P = T> extends InternalInterfaceRef<T, P> {}\n    export interface ObjectRef<T, P = T> extends InternalObjectRef<T, P> {}\n    export interface ScalarRef<T, U, P = T> extends InternalScalarRef<T, U, P> {}\n    export interface UnionRef<T, P = T> extends InternalUnionRef<T, P> {}\n    export interface ListRef<Types extends SchemaTypes, T, P = T>\n      extends InternalListRef<Types, T, P> {}\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface */\nimport type { GraphQLDirective } from 'graphql';\nimport type { PluginConstructorMap } from '../plugins';\nimport type { MergedScalars, SchemaTypes } from '../schema-types';\nimport type { IsStrictMode, RecursivelyNormalizeNullableFields } from '../utils';\n\ndeclare global {\n  export namespace PothosSchemaTypes {\n    export interface SchemaBuilderOptions<Types extends SchemaTypes> {\n      plugins?: (keyof PluginConstructorMap<Types>)[];\n      defaultFieldNullability: false extends Types['DefaultFieldNullability']\n        ? never\n        : Types['DefaultFieldNullability'];\n      defaultInputFieldRequiredness: false extends Types['DefaultInputFieldRequiredness']\n        ? never\n        : Types['DefaultInputFieldRequiredness'];\n      notStrict: IsStrictMode extends true\n        ? never\n        : 'Pothos may not work correctly when strict mode is not enabled in tsconfig.json';\n    }\n\n    export interface BuildSchemaOptions<Types extends SchemaTypes> {\n      directives?: readonly GraphQLDirective[];\n      extensions?: Record<string, unknown>;\n      sortSchema?: boolean;\n    }\n\n    export interface Plugins<Types extends SchemaTypes> {}\n\n    export interface PothosKindToGraphQLType {\n      Object: 'Object';\n      Query: 'Object';\n      Mutation: 'Object';\n      Subscription: 'Object';\n      Interface: 'Interface';\n      Union: 'Union';\n      Enum: 'Enum';\n      Scalar: 'Scalar';\n      InputObject: 'InputObject';\n    }\n\n    export interface UserSchemaTypes {\n      Scalars: Record<\n        string,\n        {\n          Input: unknown;\n          Output: unknown;\n        }\n      >;\n      Objects: {};\n      Inputs: {};\n      Interfaces: {};\n      Root: object;\n      Context: object;\n      DefaultFieldNullability: boolean;\n      DefaultInputFieldRequiredness: boolean;\n    }\n\n    export interface ExtendDefaultTypes<PartialTypes extends Partial<UserSchemaTypes>>\n      extends SchemaTypes {\n      Scalars: MergedScalars<PartialTypes>;\n      Objects: PartialTypes['Objects'] & {};\n      Inputs: PartialTypes['Inputs'] & {};\n      Interfaces: PartialTypes['Interfaces'] & {};\n      Root: PartialTypes['Root'] & {};\n      Context: PartialTypes['Context'] & {};\n      DefaultFieldNullability: PartialTypes['DefaultFieldNullability'] extends true ? true : false;\n      DefaultInputFieldRequiredness: PartialTypes['DefaultInputFieldRequiredness'] extends true\n        ? true\n        : false;\n      outputShapes: {\n        [K in keyof MergedScalars<PartialTypes>]: MergedScalars<PartialTypes>[K] extends {\n          Output: infer T;\n        }\n          ? T\n          : never;\n      } & {\n        [K in keyof PartialTypes['Objects']]: PartialTypes['Objects'][K];\n      } & { [K in keyof PartialTypes['Interfaces']]: PartialTypes['Interfaces'][K] };\n      inputShapes: {\n        [K in keyof MergedScalars<PartialTypes>]: MergedScalars<PartialTypes>[K] extends {\n          Input: infer T;\n        }\n          ? T\n          : never;\n      } & {\n        [K in keyof PartialTypes['Inputs']]: RecursivelyNormalizeNullableFields<\n          PartialTypes['Inputs'][K]\n        >;\n      };\n    }\n  }\n}\n", "/* eslint-disable no-continue */\nimport {\n  defaultFieldResolver,\n  defaultTypeResolver,\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFieldConfigArgumentMap,\n  GraphQLFieldConfigMap,\n  GraphQLFloat,\n  GraphQLID,\n  GraphQLInputFieldConfigMap,\n  GraphQLInputObjectType,\n  GraphQLInputType,\n  GraphQLInt,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNamedType,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLOutputType,\n  GraphQLScalarType,\n  GraphQLString,\n  GraphQLTypeResolver,\n  GraphQLUnionType,\n} from 'graphql';\nimport type SchemaBuilder from './builder';\nimport ConfigStore from './config-store';\nimport { PothosError, PothosSchemaError } from './errors';\nimport { BasePlugin, MergedPlugins } from './plugins';\nimport BuiltinScalarRef from './refs/builtin-scalar';\nimport {\n  InputType,\n  OutputType,\n  PluginMap,\n  PothosEnumTypeConfig,\n  PothosEnumValueConfig,\n  PothosInputFieldConfig,\n  PothosInputFieldType,\n  PothosInputObjectTypeConfig,\n  PothosInterfaceTypeConfig,\n  PothosKindToGraphQLTypeClass,\n  PothosMutationTypeConfig,\n  PothosObjectTypeConfig,\n  PothosOutputFieldConfig,\n  PothosOutputFieldType,\n  PothosQueryTypeConfig,\n  PothosScalarTypeConfig,\n  PothosSubscriptionTypeConfig,\n  PothosTypeConfig,\n  PothosTypeKind,\n  PothosUnionTypeConfig,\n  SchemaTypes,\n  typeBrandKey,\n} from './types';\nimport { assertNever, getTypeBrand, isThenable } from './utils';\n\nexport default class BuildCache<Types extends SchemaTypes> {\n  types = new Map<string, GraphQLNamedType>();\n\n  builder: PothosSchemaTypes.SchemaBuilder<Types>;\n\n  plugin: BasePlugin<Types>;\n\n  options: PothosSchemaTypes.BuildSchemaOptions<Types>;\n\n  private configStore: ConfigStore<Types>;\n\n  private pluginMap: PluginMap<Types>;\n\n  private pluginList: BasePlugin<Types>[];\n\n  private implementers = new Map<string, PothosObjectTypeConfig[]>();\n\n  private typeConfigs = new Map<string, PothosTypeConfig>();\n\n  private enumValueConfigs = new Map<\n    PothosEnumValueConfig<Types>,\n    PothosEnumValueConfig<Types> | null\n  >();\n\n  private outputFieldConfigs = new Map<\n    PothosOutputFieldConfig<Types>,\n    PothosOutputFieldConfig<Types> | null\n  >();\n\n  private inputFieldConfigs = new Map<\n    PothosInputFieldConfig<Types>,\n    PothosInputFieldConfig<Types> | null\n  >();\n\n  constructor(builder: SchemaBuilder<Types>, options: PothosSchemaTypes.BuildSchemaOptions<Types>) {\n    this.builder = builder;\n    this.configStore = builder.configStore;\n    this.options = options;\n\n    const plugins: Record<string, unknown> = {};\n\n    this.pluginList = (builder.options.plugins ?? []).map((pluginName) => {\n      const Plugin = (\n        this.builder as unknown as { constructor: { plugins: Record<string, typeof BasePlugin> } }\n      ).constructor.plugins[pluginName];\n\n      if (!Plugin) {\n        throw new PothosError(`No plugin named ${pluginName} was registered`);\n      }\n\n      plugins[pluginName] = new Plugin(this, pluginName);\n\n      return plugins[pluginName] as BasePlugin<Types>;\n    });\n\n    this.pluginMap = plugins as PluginMap<Types>;\n\n    this.plugin = new MergedPlugins(this, this.pluginList);\n  }\n\n  getTypeConfig<T extends PothosTypeConfig['kind']>(\n    ref: InputType<Types> | OutputType<Types> | string,\n    kind?: T,\n  ) {\n    const baseConfig = this.configStore.getTypeConfig(ref, kind);\n\n    if (!this.typeConfigs.has(baseConfig.name)) {\n      this.typeConfigs.set(baseConfig.name, this.plugin.onTypeConfig(baseConfig));\n    }\n\n    const typeConfig = this.typeConfigs.get(baseConfig.name)!;\n\n    return typeConfig as Extract<PothosTypeConfig, { kind: T }>;\n  }\n\n  getInputTypeFieldConfigs(ref: InputType<Types>) {\n    const typeConfig = this.getTypeConfig(ref, 'InputObject');\n    const builtType = this.types.get(typeConfig.name) as GraphQLInputObjectType | undefined;\n\n    if (!builtType) {\n      throw new PothosSchemaError(`Input type ${typeConfig.name} has not been built yet`);\n    }\n\n    const fields = builtType.getFields();\n\n    const fieldConfigs: Record<string, PothosInputFieldConfig<Types>> = {};\n\n    Object.keys(fields).forEach((fieldName) => {\n      fieldConfigs[fieldName] = fields[fieldName].extensions\n        ?.pothosConfig as PothosInputFieldConfig<Types>;\n    });\n\n    return fieldConfigs;\n  }\n\n  getImplementers(iface: GraphQLInterfaceType) {\n    if (this.implementers.has(iface.name)) {\n      return this.implementers.get(iface.name)!;\n    }\n\n    const implementers = [...this.configStore.typeConfigs.values()].filter(\n      (type) =>\n        type.kind === 'Object' &&\n        type.interfaces.find((i) => this.configStore.getTypeConfig(i).name === iface.name),\n    ) as PothosObjectTypeConfig[];\n\n    this.implementers.set(iface.name, implementers);\n\n    return implementers;\n  }\n\n  buildAll() {\n    this.configStore.prepareForBuild();\n\n    this.configStore.typeConfigs.forEach((baseConfig) => {\n      if (baseConfig.kind === 'Enum' || baseConfig.kind === 'Scalar') {\n        this.buildTypeFromConfig(baseConfig);\n      }\n    });\n\n    this.configStore.typeConfigs.forEach((baseConfig) => {\n      if (baseConfig.kind === 'InputObject') {\n        this.buildTypeFromConfig(baseConfig);\n      }\n    });\n\n    this.types.forEach((type) => {\n      if (type instanceof GraphQLInputObjectType) {\n        type.getFields();\n      }\n    });\n\n    this.configStore.typeConfigs.forEach((baseConfig) => {\n      if (baseConfig.kind === 'Interface') {\n        this.buildTypeFromConfig(baseConfig);\n      }\n    });\n\n    this.configStore.typeConfigs.forEach((baseConfig) => {\n      if (baseConfig.kind === 'Object') {\n        this.buildTypeFromConfig(baseConfig);\n      }\n    });\n\n    this.configStore.typeConfigs.forEach((baseConfig) => {\n      if (baseConfig.kind === 'Union') {\n        this.buildTypeFromConfig(baseConfig);\n      }\n    });\n\n    this.configStore.typeConfigs.forEach((baseConfig) => {\n      if (\n        baseConfig.kind === 'Query' ||\n        baseConfig.kind === 'Mutation' ||\n        baseConfig.kind === 'Subscription'\n      ) {\n        this.buildTypeFromConfig(baseConfig);\n      }\n    });\n\n    this.types.forEach((type) => {\n      if (type instanceof GraphQLObjectType || type instanceof GraphQLInterfaceType) {\n        type.getFields();\n      } else if (type instanceof GraphQLUnionType) {\n        type.getTypes();\n      }\n    });\n  }\n\n  buildTypeFromConfig(baseConfig: PothosTypeConfig) {\n    const config = this.getTypeConfig(baseConfig.name);\n\n    const { name } = config;\n\n    this.typeConfigs.set(name, config);\n\n    switch (config.kind) {\n      case 'Enum':\n        this.addType(name, this.buildEnum(config));\n        break;\n      case 'InputObject':\n        this.addType(name, this.buildInputObject(config));\n        break;\n      case 'Interface':\n        this.addType(name, this.buildInterface(config));\n        break;\n      case 'Scalar':\n        this.addType(name, this.buildScalar(config));\n        break;\n      case 'Union':\n        this.addType(name, this.buildUnion(config));\n        break;\n      case 'Object':\n      case 'Query':\n      case 'Mutation':\n      case 'Subscription':\n        this.addType(name, this.buildObject(config));\n        break;\n      default:\n        assertNever(config);\n    }\n  }\n\n  private addType(ref: string, type: GraphQLNamedType) {\n    if (this.types.has(ref)) {\n      throw new PothosSchemaError(\n        `reference or name has already been used to create another type (${type.name})`,\n      );\n    }\n\n    this.types.set(ref, type);\n  }\n\n  private buildOutputTypeParam(type: PothosOutputFieldType<Types>): GraphQLOutputType {\n    if (type.kind === 'List') {\n      if (type.nullable) {\n        return new GraphQLList(this.buildOutputTypeParam(type.type));\n      }\n\n      return new GraphQLNonNull(new GraphQLList(this.buildOutputTypeParam(type.type)));\n    }\n\n    if (type.nullable) {\n      return this.getOutputType(type.ref);\n    }\n\n    return new GraphQLNonNull(this.getOutputType(type.ref));\n  }\n\n  private buildInputTypeParam(type: PothosInputFieldType<Types>): GraphQLInputType {\n    if (type.kind === 'List') {\n      if (type.required) {\n        return new GraphQLNonNull(new GraphQLList(this.buildInputTypeParam(type.type)));\n      }\n\n      return new GraphQLList(this.buildInputTypeParam(type.type));\n    }\n\n    if (type.required) {\n      return new GraphQLNonNull(this.getInputType(type.ref));\n    }\n\n    return this.getInputType(type.ref);\n  }\n\n  private buildFields(\n    fields: Map<string, PothosOutputFieldConfig<Types>>,\n  ): GraphQLFieldConfigMap<unknown, object> {\n    const built: GraphQLFieldConfigMap<unknown, object> = {};\n\n    for (const [fieldName, originalConfig] of fields) {\n      if (!this.outputFieldConfigs.has(originalConfig)) {\n        this.outputFieldConfigs.set(\n          originalConfig,\n          this.plugin.onOutputFieldConfig(originalConfig),\n        );\n      }\n\n      const updatedConfig = this.outputFieldConfigs.get(originalConfig)!;\n\n      if (!updatedConfig) {\n        continue;\n      }\n\n      const config = {\n        ...updatedConfig,\n      };\n\n      const argMap = new Map<string, PothosInputFieldConfig<Types>>();\n\n      Object.keys(config.args).forEach((argName) => {\n        argMap.set(argName, config.args[argName]);\n      });\n\n      const args = this.buildInputFields(argMap);\n      const argConfigs: Record<string, PothosInputFieldConfig<Types>> = {};\n\n      Object.keys(config.args).forEach((argName) => {\n        argConfigs[argName] = this.inputFieldConfigs.get(config.args[argName])!;\n      });\n\n      config.args = argConfigs;\n\n      const resolve = this.plugin.wrapResolve(config.resolve ?? defaultFieldResolver, config);\n      const subscribe = this.plugin.wrapSubscribe(config.subscribe, config);\n\n      built[fieldName] = {\n        ...config,\n        type: this.buildOutputTypeParam(config.type),\n        args,\n        extensions: {\n          ...config.extensions,\n          pothosResolveWrapped: resolve !== (config.resolve ?? defaultFieldResolver),\n          pothosSubscribeWrapped: subscribe !== config.subscribe,\n          pothosOptions: config.pothosOptions,\n          pothosConfig: config,\n        },\n        resolve: resolve === defaultFieldResolver ? undefined : resolve,\n        subscribe,\n      };\n    }\n\n    return built;\n  }\n\n  private buildInputFields(\n    fields: Map<string, PothosInputFieldConfig<Types>>,\n  ): GraphQLInputFieldConfigMap {\n    const built: GraphQLFieldConfigArgumentMap | GraphQLInputFieldConfigMap = {};\n\n    for (const [fieldName, originalConfig] of fields) {\n      if (!this.inputFieldConfigs.has(originalConfig)) {\n        this.inputFieldConfigs.set(originalConfig, this.plugin.onInputFieldConfig(originalConfig));\n      }\n\n      const config = this.inputFieldConfigs.get(originalConfig)!;\n\n      if (config) {\n        built[fieldName] = {\n          ...config,\n          type: this.buildInputTypeParam(config.type),\n          extensions: {\n            ...config.extensions,\n            pothosOptions: config.pothosOptions,\n            pothosConfig: config,\n          },\n        };\n      }\n    }\n\n    return built;\n  }\n\n  private getInterfaceFields(type: GraphQLInterfaceType): GraphQLFieldConfigMap<unknown, object> {\n    const interfaceFields = type\n      .getInterfaces()\n      .reduce((all, iface) => ({ ...this.getFields(iface), ...all }), {});\n\n    const configs = this.configStore.getFields(type.name, 'Interface');\n\n    const fields = this.buildFields(configs);\n\n    return {\n      ...interfaceFields,\n      ...fields,\n    };\n  }\n\n  private getObjectFields(type: GraphQLObjectType): GraphQLFieldConfigMap<unknown, object> {\n    const interfaceFields = type\n      .getInterfaces()\n      .reduce((all, iface) => ({ ...this.getFields(iface), ...all }), {});\n\n    const objectFields = this.buildFields(this.configStore.getFields(type.name, 'Object'));\n\n    return { ...interfaceFields, ...objectFields };\n  }\n\n  private getRootFields(type: GraphQLObjectType): GraphQLFieldConfigMap<unknown, object> {\n    return this.buildFields(this.configStore.getFields(type.name, 'Object'));\n  }\n\n  private getFields(type: GraphQLNamedType): GraphQLFieldConfigMap<unknown, object> {\n    if (type instanceof GraphQLObjectType) {\n      if (type.name === 'Query' || type.name === 'Mutation' || type.name === 'Subscription') {\n        return this.getRootFields(type);\n      }\n\n      return this.getObjectFields(type);\n    }\n\n    if (type instanceof GraphQLInterfaceType) {\n      return this.getInterfaceFields(type);\n    }\n\n    throw new PothosSchemaError(`Type ${type.name} does not have fields to resolve`);\n  }\n\n  private getInputFields(type: GraphQLInputObjectType): GraphQLInputFieldConfigMap {\n    return this.buildInputFields(this.configStore.getFields(type.name, 'InputObject'));\n  }\n\n  private getType(ref: InputType<Types> | OutputType<Types> | string) {\n    if (ref instanceof BuiltinScalarRef) {\n      return ref.type;\n    }\n\n    const typeConfig = this.configStore.getTypeConfig(ref);\n\n    const type = this.types.get(typeConfig.name);\n\n    if (!type) {\n      this.buildTypeFromConfig(typeConfig);\n\n      return this.types.get(typeConfig.name)!;\n    }\n\n    return type;\n  }\n\n  private getOutputType(ref: OutputType<Types> | string): GraphQLOutputType {\n    const type = this.getType(ref);\n\n    if (type instanceof GraphQLInputObjectType) {\n      throw new PothosSchemaError(\n        `Expected ${String(ref)} to be an output type but it was defined as an InputObject`,\n      );\n    }\n\n    return type;\n  }\n\n  private getInputType(ref: InputType<Types> | string): GraphQLInputType {\n    const type = this.getType(ref);\n\n    if (!type) {\n      throw new PothosSchemaError(`Missing implementation of for type ${String(ref)}`);\n    }\n\n    if (type instanceof GraphQLObjectType) {\n      throw new PothosSchemaError(\n        `Expected ${type.name} to be an input type but it was defined as a GraphQLObjectType`,\n      );\n    }\n\n    if (type instanceof GraphQLInterfaceType) {\n      throw new PothosSchemaError(\n        `Expected ${type.name} to be an input type but it was defined as a GraphQLInterfaceType`,\n      );\n    }\n\n    if (type instanceof GraphQLUnionType) {\n      throw new PothosSchemaError(\n        `Expected ${String(ref)} to be an input type but it was defined as an GraphQLUnionType`,\n      );\n    }\n\n    return type;\n  }\n\n  private getTypeOfKind<T extends PothosTypeKind>(\n    ref: InputType<Types> | OutputType<Types> | string,\n    kind: T,\n  ): PothosKindToGraphQLTypeClass<T> {\n    const type = this.getType(ref);\n\n    switch (kind) {\n      case 'Object':\n      case 'Query':\n      case 'Mutation':\n      case 'Subscription':\n        if (type instanceof GraphQLObjectType) {\n          return type as PothosKindToGraphQLTypeClass<T>;\n        }\n        break;\n      case 'Interface':\n        if (type instanceof GraphQLInterfaceType) {\n          return type as PothosKindToGraphQLTypeClass<T>;\n        }\n        break;\n      case 'Union':\n        if (type instanceof GraphQLUnionType) {\n          return type as PothosKindToGraphQLTypeClass<T>;\n        }\n        break;\n      case 'Enum':\n        if (type instanceof GraphQLEnumType) {\n          return type as PothosKindToGraphQLTypeClass<T>;\n        }\n        break;\n      case 'Scalar':\n        if (type instanceof GraphQLScalarType) {\n          return type as PothosKindToGraphQLTypeClass<T>;\n        }\n        break;\n      case 'InputObject':\n        if (type instanceof GraphQLScalarType) {\n          return type as PothosKindToGraphQLTypeClass<T>;\n        }\n        break;\n      default:\n        break;\n    }\n\n    throw new PothosSchemaError(`Expected ${String(ref)} to be of type ${kind}`);\n  }\n\n  private buildObject(\n    config:\n      | PothosMutationTypeConfig\n      | PothosObjectTypeConfig\n      | PothosQueryTypeConfig\n      | PothosSubscriptionTypeConfig,\n  ) {\n    const type: GraphQLObjectType = new GraphQLObjectType({\n      ...config,\n      extensions: {\n        ...config.extensions,\n        pothosOptions: config.pothosOptions,\n        pothosConfig: config,\n      },\n      fields: () => this.getFields(type),\n      isTypeOf:\n        config.kind === 'Object'\n          ? this.plugin.wrapIsTypeOf(config.isTypeOf ?? undefined, config)\n          : undefined,\n      interfaces:\n        config.kind === 'Object'\n          ? () => config.interfaces.map((iface) => this.getTypeOfKind(iface, 'Interface'))\n          : undefined,\n    });\n\n    return type;\n  }\n\n  private buildInterface(config: PothosInterfaceTypeConfig) {\n    const resolveType: GraphQLTypeResolver<unknown, Types['Context']> = (parent, context, info) => {\n      const typeBrand = getTypeBrand(parent);\n      if (typeBrand) {\n        if (typeof typeBrand === 'string') {\n          return typeBrand;\n        }\n\n        return this.getTypeConfig(typeBrand).name;\n      }\n\n      const resolver = config.resolveType ?? defaultTypeResolver;\n\n      return resolver(parent, context, info, type);\n    };\n\n    const type: GraphQLInterfaceType = new GraphQLInterfaceType({\n      ...config,\n      extensions: {\n        ...config.extensions,\n        pothosOptions: config.pothosOptions,\n        pothosConfig: config,\n      },\n      interfaces: () => config.interfaces.map((iface) => this.getTypeOfKind(iface, 'Interface')),\n      fields: () => this.getFields(type),\n      resolveType: this.plugin.wrapResolveType(resolveType, config),\n    });\n\n    return type;\n  }\n\n  private buildUnion(config: PothosUnionTypeConfig) {\n    const resolveType: GraphQLTypeResolver<unknown, Types['Context']> = (\n      parent,\n      context,\n      info,\n      type,\n    ) => {\n      if (typeof parent === 'object' && parent !== null && typeBrandKey in parent) {\n        const typeBrand = (parent as { [typeBrandKey]: OutputType<SchemaTypes> })[typeBrandKey];\n\n        if (typeof typeBrand === 'string') {\n          return typeBrand;\n        }\n\n        return this.getTypeConfig(typeBrand).name;\n      }\n\n      if (!config.resolveType) {\n        return defaultTypeResolver(parent, context, info, type);\n      }\n\n      const resultOrPromise = config.resolveType(parent, context, info, type);\n\n      const getResult = (\n        result: GraphQLObjectType<unknown, object> | string | null | undefined,\n      ) => {\n        if (typeof result === 'string' || !result) {\n          return result!;\n        }\n\n        if (result instanceof GraphQLObjectType) {\n          return result.name;\n        }\n\n        try {\n          const typeConfig = this.configStore.getTypeConfig(result);\n\n          return typeConfig.name;\n        } catch {\n          // ignore\n        }\n\n        return result;\n      };\n\n      return isThenable(resultOrPromise)\n        ? resultOrPromise.then(getResult)\n        : getResult(resultOrPromise);\n    };\n\n    return new GraphQLUnionType({\n      ...config,\n      extensions: {\n        ...config.extensions,\n        pothosOptions: config.pothosOptions,\n        pothosConfig: config,\n      },\n      types: () => config.types.map((member) => this.getTypeOfKind(member, 'Object')),\n      resolveType: this.plugin.wrapResolveType(resolveType, config),\n    });\n  }\n\n  private buildInputObject(config: PothosInputObjectTypeConfig) {\n    const type: GraphQLInputType = new GraphQLInputObjectType({\n      ...config,\n      extensions: {\n        ...config.extensions,\n        pothosOptions: config.pothosOptions,\n        pothosConfig: config,\n      },\n      fields: () => this.getInputFields(type as GraphQLInputObjectType),\n    });\n\n    return type;\n  }\n\n  private buildScalar(config: PothosScalarTypeConfig) {\n    if (config.name === 'ID') {\n      return GraphQLID;\n    }\n\n    if (config.name === 'Int') {\n      return GraphQLInt;\n    }\n\n    if (config.name === 'Float') {\n      return GraphQLFloat;\n    }\n\n    if (config.name === 'Boolean') {\n      return GraphQLBoolean;\n    }\n\n    if (config.name === 'String') {\n      return GraphQLString;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      extensions: {\n        ...config.extensions,\n        pothosOptions: config.pothosOptions,\n        pothosConfig: config,\n      },\n    });\n  }\n\n  private buildEnum(config: PothosEnumTypeConfig) {\n    const values: Record<string, PothosEnumValueConfig<Types>> = {};\n\n    for (const key of Object.keys(config.values)) {\n      const original = config.values[key] as PothosEnumValueConfig<Types>;\n\n      if (!this.enumValueConfigs.has(original)) {\n        this.enumValueConfigs.set(original, this.plugin.onEnumValueConfig(original));\n      }\n\n      const valueConfig = this.enumValueConfigs.get(original)!;\n      if (valueConfig) {\n        values[key] = this.enumValueConfigs.get(original)!;\n      }\n    }\n\n    return new GraphQLEnumType({\n      ...config,\n      values,\n      extensions: {\n        ...config.extensions,\n        pothosOptions: config.pothosOptions,\n        pothosConfig: config,\n      },\n    });\n  }\n}\n", "/* eslint-disable max-classes-per-file */\n\nimport { GraphQLError, GraphQLErrorOptions } from 'graphql';\n\nexport class PothosError extends GraphQLError {\n  constructor(message: string, options?: GraphQLErrorOptions) {\n    super(message, options);\n    this.name = 'PothosError';\n  }\n}\n\nexport class PothosSchemaError extends PothosError {\n  constructor(message: string, options?: GraphQLErrorOptions) {\n    super(message, options);\n    this.name = 'PothosSchemaError';\n  }\n}\n\nexport class PothosValidationError extends PothosError {\n  constructor(message: string, options?: GraphQLErrorOptions) {\n    super(message, options);\n    this.name = 'PothosValidationError';\n  }\n}\n", "export * from './merge-plugins';\nexport * from './plugin';\n", "export const contextCacheSymbol = Symbol.for('Pothos.contextCache');\n\nexport function initContextCache() {\n  return {\n    [contextCacheSymbol]: {},\n  };\n}\n\nexport type ContextCache<T, C extends object, Args extends unknown[]> = (\n  context: C,\n  ...args: Args\n) => T;\n\nexport function createContextCache<T, C extends object = object, Args extends unknown[] = []>(\n  create: (context: C, ...args: Args) => T,\n): ContextCache<T, C, Args> {\n  const cache = new WeakMap<object, T>();\n\n  return (context, ...args) => {\n    const cacheKey = (context as { [contextCacheSymbol]: object })[contextCacheSymbol] || context;\n\n    if (cache.has(cacheKey)) {\n      return cache.get(cacheKey)!;\n    }\n\n    const entry = create(context, ...args);\n\n    cache.set(cacheKey, entry);\n\n    return entry;\n  };\n}\n", "import {\n  GraphQLFieldResolver,\n  GraphQLIsTypeOfFn,\n  GraphQLSchema,\n  GraphQLTypeResolver,\n} from 'graphql';\nimport type BuildCache from '../build-cache';\nimport { PothosError } from '../errors';\nimport type {\n  PothosEnumValueConfig,\n  PothosInputFieldConfig,\n  PothosInterfaceTypeConfig,\n  PothosObjectTypeConfig,\n  PothosOutputFieldConfig,\n  PothosTypeConfig,\n  PothosUnionTypeConfig,\n  SchemaTypes,\n} from '../types';\nimport { createContextCache } from '../utils/context-cache';\n\nconst runCache = new WeakMap<{}, Map<unknown, unknown>>();\nexport class BasePlugin<Types extends SchemaTypes, T extends object = object> {\n  name;\n\n  builder;\n\n  buildCache;\n\n  options;\n\n  private requestDataMap = createContextCache<T, Types['Context']>((ctx) =>\n    this.createRequestData(ctx),\n  );\n\n  constructor(buildCache: BuildCache<Types>, name: keyof PothosSchemaTypes.Plugins<Types>) {\n    this.name = name;\n    this.builder = buildCache.builder;\n    this.buildCache = buildCache;\n    this.options = buildCache.options;\n  }\n\n  /**\n   * Called for each type defined with the SchemaBuilder\n   * @param  {PothosTypeConfig} typeConfig - Config object describing the added type\n   * @return {PothosTypeConfig} Original or updated `typeConfig`\n   */\n  onTypeConfig(typeConfig: PothosTypeConfig): PothosTypeConfig {\n    return typeConfig;\n  }\n\n  /**\n   * Called for each field on an Object or Interface type\n   * @param  {PothosOutputFieldConfig} fieldConfig - Config object describing the added field\n   * @return {PothosOutputFieldConfig} Original or updated `fieldConfig`\n   */\n  onOutputFieldConfig(\n    fieldConfig: PothosOutputFieldConfig<Types>,\n  ): PothosOutputFieldConfig<Types> | null {\n    return fieldConfig;\n  }\n\n  /**\n   * Called for each argument or field on an Input object defined in your schema\n   * @param  {PothosInputFieldConfig} fieldConfig - Config object describing the added field\n   * @return {PothosInputFieldConfig} Original or updated `fieldConfig`\n   */\n  onInputFieldConfig(\n    fieldConfig: PothosInputFieldConfig<Types>,\n  ): PothosInputFieldConfig<Types> | null {\n    return fieldConfig;\n  }\n\n  /**\n   * Called for each Enum value defined in your schema\n   * @param  {PothosEnumValueConfig} valueConfig - Config object describing the enum value\n   * @return {PothosEnumValueConfig} Original or updated `valueConfig`\n   */\n  onEnumValueConfig(\n    valueConfig: PothosEnumValueConfig<Types>,\n  ): PothosEnumValueConfig<Types> | null {\n    return valueConfig;\n  }\n\n  /**\n   * Called before builder.toSchema() schema is called\n   */\n  beforeBuild() {}\n\n  /**\n   * Called after all fields and types have been built during `builder.toSchema()`\n   * @param  {GraphQLSchema} schema - the generated schema\n   * @return {PothosEnumValueConfig} Original or updated `schema`\n   */\n  afterBuild(schema: GraphQLSchema): GraphQLSchema {\n    return schema;\n  }\n\n  /**\n   * Called with the resolver for each field in the schema\n   * @param  {GraphQLFieldResolver} resolve - the resolve function\n   * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this resolve function\n   * @return {GraphQLFieldResolver} - Either the original, or a new resolver function to use for this field\n   */\n  wrapResolve(\n    resolver: GraphQLFieldResolver<unknown, Types['Context'], object>,\n    fieldConfig: PothosOutputFieldConfig<Types>,\n  ): GraphQLFieldResolver<unknown, Types['Context'], object> {\n    return resolver;\n  }\n\n  /**\n   * Called with the subscribe for each field on the Subscription type\n   * @param  {GraphQLFieldResolver} subscribe - the subscribe function\n   * @param  {PothosOutputFieldConfig} fieldConfig - the config object for the field associated with this subscribe function\n   * @return {GraphQLFieldResolver} - Either the original, or a new subscribe function to use for this field\n   */\n  wrapSubscribe(\n    subscribe: GraphQLFieldResolver<unknown, Types['Context'], object> | undefined,\n    fieldConfig: PothosOutputFieldConfig<Types>,\n  ): GraphQLFieldResolver<unknown, Types['Context'], object> | undefined {\n    return subscribe;\n  }\n\n  /**\n   * Called with the resolveType for each Interface or Union type\n   * @param  {GraphQLTypeResolver} resolveType - the resolveType function\n   * @param  {PothosInterfaceTypeConfig | PothosUnionTypeConfig} typeConfig - the config object for the Interface or Union type\n   * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field\n   */\n  wrapResolveType(\n    resolveType: GraphQLTypeResolver<unknown, Types['Context']>,\n    typeConfig: PothosInterfaceTypeConfig | PothosUnionTypeConfig,\n  ): GraphQLTypeResolver<unknown, Types['Context']> {\n    return resolveType;\n  }\n\n  /**\n   * Called with the isTypeOf for each Object type\n   * @param  {GraphQLTypeResolver} resolveType - the resolveType function\n   * @param  {PothosObjectTypeConfig} typeConfig - the config object for the Interface or Union type\n   * @return {GraphQLTypeResolver} - Either the original, or a new resolveType function to use for this field\n   */\n  wrapIsTypeOf(\n    isTypeOf: GraphQLIsTypeOfFn<unknown, Types['Context']> | undefined,\n    typeConfig: PothosObjectTypeConfig,\n  ): GraphQLIsTypeOfFn<unknown, Types['Context']> | undefined {\n    return isTypeOf;\n  }\n\n  protected runUnique<R>(key: unknown, cb: () => R): R {\n    if (!runCache.has(this.builder)) {\n      runCache.set(this.builder, new Map<unknown, unknown>());\n    }\n\n    if (!runCache.get(this.builder)!.has(key)) {\n      const result = cb();\n\n      runCache.get(this.builder)!.set(key, result);\n\n      return result;\n    }\n\n    return runCache.get(this.builder)!.get(key) as R;\n  }\n\n  /**\n   * Creates a data object unique to the current request for use by this plugin\n   * @param  {Types['Context']} context - the context object for the current request\n   * @return {object} - The data object for the current request\n   */\n  protected createRequestData(context: Types['Context']): T {\n    throw new PothosError('createRequestData not implemented');\n  }\n\n  /**\n   * Returns a data object for the current request.  requires `createRequestData` to be implemented\n   * @param  {Types['Context']} context - the context object for the current request\n   * @return {object} - The data object for the current request\n   */\n  protected requestData(context: Types['Context']): T {\n    return this.requestDataMap(context)!;\n  }\n}\n", "import {\n  GraphQLFieldResolver,\n  GraphQLIsTypeOfFn,\n  GraphQLSchema,\n  GraphQLTypeResolver,\n} from 'graphql';\nimport type BuildCache from '../build-cache';\nimport type {\n  PothosEnumValueConfig,\n  PothosInputFieldConfig,\n  PothosInterfaceTypeConfig,\n  PothosObjectTypeConfig,\n  PothosOutputFieldConfig,\n  PothosTypeConfig,\n  PothosUnionTypeConfig,\n  SchemaTypes,\n} from '../types';\nimport { BasePlugin } from './plugin';\n\nexport class MergedPlugins<Types extends SchemaTypes> extends BasePlugin<Types> {\n  plugins;\n\n  constructor(buildCache: BuildCache<Types>, plugins: BasePlugin<Types>[]) {\n    super(buildCache, 'PothosMergedPlugin' as never);\n\n    this.plugins = plugins;\n  }\n\n  override onTypeConfig(typeConfig: PothosTypeConfig) {\n    return this.plugins.reduceRight(\n      (config, plugin) => (config === null ? config : plugin.onTypeConfig(config)),\n      typeConfig,\n    );\n  }\n\n  override onInputFieldConfig(fieldConfig: PothosInputFieldConfig<Types>) {\n    return this.plugins.reduceRight<PothosInputFieldConfig<Types> | null>(\n      (config, plugin) => (config === null ? config : plugin.onInputFieldConfig(config)),\n      fieldConfig,\n    );\n  }\n\n  override onOutputFieldConfig(fieldConfig: PothosOutputFieldConfig<Types>) {\n    return this.plugins.reduceRight<PothosOutputFieldConfig<Types> | null>(\n      (config, plugin) => (config === null ? config : plugin.onOutputFieldConfig(config)),\n      fieldConfig,\n    );\n  }\n\n  override onEnumValueConfig(valueConfig: PothosEnumValueConfig<Types>) {\n    return this.plugins.reduceRight<PothosEnumValueConfig<Types> | null>(\n      (config, plugin) => (config === null ? config : plugin.onEnumValueConfig(config)),\n      valueConfig,\n    );\n  }\n\n  override beforeBuild() {\n    for (const plugin of this.plugins) {\n      plugin.beforeBuild();\n    }\n  }\n\n  override afterBuild(schema: GraphQLSchema) {\n    return this.plugins.reduceRight((nextSchema, plugin) => plugin.afterBuild(nextSchema), schema);\n  }\n\n  override wrapResolve(\n    resolve: GraphQLFieldResolver<unknown, Types['Context'], object>,\n    fieldConfig: PothosOutputFieldConfig<Types>,\n  ) {\n    return this.plugins.reduceRight(\n      (nextResolve, plugin) => plugin.wrapResolve(nextResolve, fieldConfig),\n      resolve,\n    );\n  }\n\n  override wrapSubscribe(\n    subscribe: GraphQLFieldResolver<unknown, Types['Context'], object> | undefined,\n    fieldConfig: PothosOutputFieldConfig<Types>,\n  ) {\n    return this.plugins.reduceRight(\n      (nextSubscribe, plugin) => plugin.wrapSubscribe(nextSubscribe, fieldConfig),\n      subscribe,\n    );\n  }\n\n  override wrapResolveType(\n    resolveType: GraphQLTypeResolver<unknown, Types['Context']>,\n    typeConfig: PothosInterfaceTypeConfig | PothosUnionTypeConfig,\n  ) {\n    return this.plugins.reduceRight(\n      (nextResolveType, plugin) => plugin.wrapResolveType(nextResolveType, typeConfig),\n      resolveType,\n    );\n  }\n\n  override wrapIsTypeOf(\n    isTypeOf: GraphQLIsTypeOfFn<unknown, Types['Context']> | undefined,\n    typeConfig: PothosObjectTypeConfig,\n  ) {\n    return this.plugins.reduceRight(\n      (nextResolveType, plugin) => plugin.wrapIsTypeOf(nextResolveType, typeConfig),\n      isTypeOf,\n    );\n  }\n}\n", "import './global';\n\nexport * from './builder-options';\nexport * from './configs';\nexport * from './plugins';\nexport * from './schema-types';\nexport * from './type-params';\nexport * from './utils';\n", "import type { GraphQLResolveInfo } from 'graphql';\nimport type FieldRef from '../refs/field';\nimport type InputFieldRef from '../refs/input-field';\nimport type InterfaceRef from '../refs/interface';\nimport type ObjectRef from '../refs/object';\nimport type { SchemaTypes } from './schema-types';\nimport type {\n  BaseEnum,\n  EnumParam,\n  FieldNullability,\n  inputFieldShapeKey,\n  InputRef,\n  InterfaceParam,\n  ObjectParam,\n  ParentShape as GetParentShape,\n  ShapeFromTypeParam,\n  TypeParam,\n} from './type-params';\nimport type {\n  MaybePromise,\n  Merge,\n  Normalize,\n  NormalizeNullableFields,\n  RemoveNeverKeys,\n} from './utils';\n\nexport type NormalizeSchemeBuilderOptions<Types extends SchemaTypes> = RemoveNeverKeys<\n  PothosSchemaTypes.SchemaBuilderOptions<Types>\n>;\n\nexport type Resolver<Parent, Args, Context, Type, Return = unknown> = (\n  parent: Parent,\n  args: Args,\n  context: Context,\n  info: GraphQLResolveInfo,\n) => [Type] extends [readonly (infer Item)[] | null | undefined]\n  ? ListResolveValue<Type, Item, Return>\n  : MaybePromise<Type>;\n\nexport type ListResolveValue<Type, Item, Return> = Return extends AsyncGenerator<unknown, unknown>\n  ? GeneratorResolver<Type, Item> & Return\n  : null extends Type\n    ? Return extends MaybePromise<readonly MaybePromise<Item>[] | null | undefined>\n      ? Return\n      : MaybePromise<readonly MaybePromise<Item>[]> | null | undefined\n    : Return extends MaybePromise<readonly MaybePromise<Item>[]>\n      ? Return\n      : MaybePromise<readonly MaybePromise<Item>[]>;\n\nexport type GeneratorResolver<Type, Item> = null extends Type\n  ? AsyncGenerator<Item | null | undefined, Item | null | undefined>\n  : AsyncGenerator<Item, Item>;\n\nexport type Subscriber<Parent, Args, Context, Shape> = (\n  parent: Parent,\n  args: Args,\n  context: Context,\n  info: GraphQLResolveInfo,\n) => MaybePromise<AsyncIterable<Shape>>;\n\nexport type EnumValues<Types extends SchemaTypes> = EnumValueConfigMap<Types> | readonly string[];\n\nexport type EnumValueConfigMap<Types extends SchemaTypes> = Record<\n  string,\n  PothosSchemaTypes.EnumValueConfig<Types>\n>;\n\nexport type ShapeFromEnumValues<\n  Types extends SchemaTypes,\n  Values extends EnumValues<Types>,\n> = Values extends readonly string[]\n  ? Values[number]\n  : Values extends EnumValueConfigMap<Types>\n    ? {\n        [K in keyof Values]: Values[K]['value'] extends number | string ? Values[K]['value'] : K;\n      }[keyof Values]\n    : never;\n\nexport type ObjectFieldsShape<Types extends SchemaTypes, Shape> = (\n  t: PothosSchemaTypes.ObjectFieldBuilder<Types, Shape>,\n) => FieldMap;\n\nexport type InterfaceFieldsShape<Types extends SchemaTypes, Shape> = (\n  t: PothosSchemaTypes.InterfaceFieldBuilder<Types, Shape>,\n) => FieldMap;\n\nexport type QueryFieldsShape<Types extends SchemaTypes> = (\n  t: PothosSchemaTypes.QueryFieldBuilder<Types, Types['Root']>,\n) => FieldMap;\n\nexport type MutationFieldsShape<Types extends SchemaTypes> = (\n  t: PothosSchemaTypes.MutationFieldBuilder<Types, Types['Root']>,\n) => FieldMap;\n\nexport type SubscriptionFieldsShape<Types extends SchemaTypes> = (\n  t: PothosSchemaTypes.SubscriptionFieldBuilder<Types, Types['Root']>,\n) => FieldMap;\n\nexport type ObjectFieldThunk<Types extends SchemaTypes, Shape> = (\n  t: PothosSchemaTypes.ObjectFieldBuilder<Types, Shape>,\n) => FieldRef<unknown>;\n\nexport type InterfaceFieldThunk<Types extends SchemaTypes, Shape> = (\n  t: PothosSchemaTypes.InterfaceFieldBuilder<Types, Shape>,\n) => FieldRef<unknown>;\n\nexport type QueryFieldThunk<Types extends SchemaTypes> = (\n  t: PothosSchemaTypes.QueryFieldBuilder<Types, Types['Root']>,\n) => FieldRef<unknown>;\n\nexport type MutationFieldThunk<Types extends SchemaTypes> = (\n  t: PothosSchemaTypes.MutationFieldBuilder<Types, Types['Root']>,\n) => FieldRef<unknown>;\n\nexport type SubscriptionFieldThunk<Types extends SchemaTypes> = (\n  t: PothosSchemaTypes.SubscriptionFieldBuilder<Types, Types['Root']>,\n) => FieldRef<unknown>;\n\nexport type FieldMap = Record<string, FieldRef>;\n\nexport type InputFieldMap<Kind extends 'Arg' | 'InputObject' = 'Arg' | 'InputObject'> = Record<\n  string,\n  InputFieldRef<unknown, Kind>\n>;\n\nexport type FieldOptionsFromKind<\n  Types extends SchemaTypes,\n  ParentShape,\n  Type extends TypeParam<Types>,\n  Nullable extends FieldNullability<Type>,\n  Args extends InputFieldMap,\n  Kind extends FieldKind,\n  ResolveShape,\n  ResolveReturnShape,\n> = PothosSchemaTypes.FieldOptionsByKind<\n  Types,\n  ParentShape,\n  Type,\n  Nullable,\n  Args,\n  ResolveShape,\n  ResolveReturnShape\n>[Kind];\n\nexport type ObjectTypeOptions<\n  Types extends SchemaTypes,\n  Param extends ObjectParam<Types>,\n  Shape,\n  Interfaces extends InterfaceParam<Types>[],\n> = Normalize<\n  (Param extends string\n    ? {}\n    : Param extends ObjectRef<unknown>\n      ? { name?: string }\n      : { name: string }) &\n    (\n      | PothosSchemaTypes.ObjectTypeOptions<Types, Shape>\n      | PothosSchemaTypes.ObjectTypeWithInterfaceOptions<Types, Shape, Interfaces>\n    )\n>;\n\nexport type InterfaceTypeOptions<\n  Types extends SchemaTypes,\n  Param extends InterfaceParam<Types>,\n  Shape,\n  Interfaces extends InterfaceParam<Types>[] = InterfaceParam<Types>[],\n  ResolveType = unknown,\n> = PothosSchemaTypes.InterfaceTypeOptions<Types, Shape, Interfaces, ResolveType> &\n  (Param extends string\n    ? {}\n    : Param extends InterfaceRef<unknown>\n      ? { name?: string }\n      : { name: string });\n\nexport type EnumTypeOptions<\n  Types extends SchemaTypes,\n  Param extends EnumParam,\n  Values extends EnumValues<Types>,\n> = Param extends BaseEnum\n  ? Merge<\n      Omit<PothosSchemaTypes.EnumTypeOptions<Types, Values>, 'values'> & {\n        name: string;\n        values?: Partial<\n          Record<keyof Param, Omit<PothosSchemaTypes.EnumValueConfig<Types>, 'value'>>\n        >;\n      }\n    >\n  : PothosSchemaTypes.EnumTypeOptions<Types, Values>;\n\nexport type ArgBuilder<Types extends SchemaTypes> = Omit<\n  PothosSchemaTypes.InputFieldBuilder<Types, 'Arg'>,\n  'field'\n> &\n  PothosSchemaTypes.InputFieldBuilder<Types, 'Arg'>['field'];\n\nexport type ValidateInterfaces<\n  Shape,\n  Types extends SchemaTypes,\n  Interfaces extends InterfaceParam<Types>,\n> = Interfaces extends InterfaceParam<Types>\n  ? Shape extends GetParentShape<Types, Interfaces>\n    ? Interfaces\n    : 'Object shape must extend interface shape'\n  : never;\n\nexport type InputShapeFromFields<Fields extends InputFieldMap> = NormalizeNullableFields<{\n  [K in string & keyof Fields]: InputShapeFromField<Fields[K]>;\n}>;\n\nexport type InputFieldsFromShape<Shape> = {\n  [K in keyof Shape]: InputFieldRef<Shape[K], 'InputObject'>;\n};\n\nexport type InputShapeFromField<Field extends InputFieldRef> = Field extends {\n  [inputFieldShapeKey]: infer T;\n}\n  ? T\n  : never;\n\nexport type FieldKind = keyof PothosSchemaTypes.FieldOptionsByKind<\n  SchemaTypes,\n  {},\n  TypeParam<SchemaTypes>,\n  boolean,\n  {},\n  {},\n  {}\n> &\n  keyof PothosSchemaTypes.PothosKindToGraphQLType;\n\nexport type InputFieldKind = keyof PothosSchemaTypes.InputFieldOptionsByKind<\n  SchemaTypes,\n  InputRef<unknown>,\n  boolean\n>;\n\nexport type CompatibleTypes<\n  Types extends SchemaTypes,\n  ParentShape,\n  Type extends TypeParam<Types>,\n  Nullable extends FieldNullability<Type>,\n> = {\n  [K in keyof ParentShape]-?: Awaited<ParentShape[K]> extends ShapeFromTypeParam<\n    Types,\n    Type,\n    Nullable\n  >\n    ? K\n    : never;\n}[keyof ParentShape] &\n  string;\n\nexport type ExposeNullability<\n  Types extends SchemaTypes,\n  Type extends TypeParam<Types>,\n  ParentShape,\n  Name extends keyof ParentShape,\n  Nullable extends FieldNullability<Type>,\n> = Awaited<ParentShape[Name]> extends ShapeFromTypeParam<Types, Type, Nullable>\n  ? {\n      nullable?: ExposeNullableOption<Types, Type, ParentShape, Name> & Nullable;\n    }\n  : {\n      nullable: ExposeNullableOption<Types, Type, ParentShape, Name> & Nullable;\n    };\n\nexport type ExposeNullableOption<\n  Types extends SchemaTypes,\n  Type extends TypeParam<Types>,\n  ParentShape,\n  Name extends keyof ParentShape,\n> = FieldNullability<Type> &\n  (Type extends [unknown]\n    ? Awaited<ParentShape[Name]> extends readonly (infer T)[] | null | undefined\n      ? [T] extends [NonNullable<T>]\n        ? Awaited<ParentShape[Name]> extends NonNullable<Awaited<ParentShape[Name]>>\n          ? boolean | { items: boolean; list: boolean }\n          : true | { items: boolean; list: true }\n        : Awaited<ParentShape[Name]> extends NonNullable<Awaited<ParentShape[Name]>>\n          ? { items: true; list: boolean }\n          : { items: true; list: true }\n      : never\n    : Awaited<ParentShape[Name]> extends NonNullable<Awaited<ParentShape[Name]>>\n      ? boolean\n      : true);\n", "import type {\n  GraphQLEnumType,\n  GraphQLEnumTypeConfig,\n  GraphQLEnumValueConfig,\n  GraphQLFieldConfig,\n  GraphQLInputFieldConfig,\n  GraphQLInputObjectType,\n  GraphQLInputObjectTypeConfig,\n  GraphQLInterfaceType,\n  GraphQLInterfaceTypeConfig,\n  GraphQLObjectType,\n  GraphQLObjectTypeConfig,\n  GraphQLScalarType,\n  GraphQLScalarTypeConfig,\n  GraphQLUnionType,\n  GraphQLUnionTypeConfig,\n} from 'graphql';\nimport type { FieldKind, FieldOptionsFromKind, InputFieldMap } from './builder-options';\nimport type { SchemaTypes } from './schema-types';\nimport type {\n  FieldNullability,\n  FieldRequiredness,\n  InputType,\n  InputTypeParam,\n  InterfaceParam,\n  ObjectParam,\n  OutputType,\n  TypeParam,\n} from './type-params';\nimport type { Merge } from './utils';\n\nexport interface PothosQueryTypeConfig\n  extends Omit<GraphQLObjectTypeConfig<unknown, object>, 'fields' | 'interfaces'> {\n  kind: 'Query';\n  graphqlKind: 'Object';\n  pothosOptions: PothosSchemaTypes.QueryTypeOptions;\n}\nexport interface PothosMutationTypeConfig\n  extends Omit<GraphQLObjectTypeConfig<unknown, object>, 'fields' | 'interfaces'> {\n  kind: 'Mutation';\n  graphqlKind: 'Object';\n  pothosOptions: PothosSchemaTypes.MutationTypeOptions;\n}\n\nexport interface PothosSubscriptionTypeConfig\n  extends Omit<GraphQLObjectTypeConfig<unknown, object>, 'fields' | 'interfaces'> {\n  kind: 'Subscription';\n  graphqlKind: 'Object';\n  pothosOptions: PothosSchemaTypes.SubscriptionTypeOptions;\n}\n\nexport interface PothosObjectTypeConfig\n  extends Omit<GraphQLObjectTypeConfig<unknown, object>, 'fields' | 'interfaces'> {\n  kind: 'Object';\n  graphqlKind: 'Object';\n  interfaces: InterfaceParam<SchemaTypes>[];\n  pothosOptions: PothosSchemaTypes.ObjectTypeOptions;\n}\n\nexport interface PothosInterfaceTypeConfig\n  extends Omit<GraphQLInterfaceTypeConfig<unknown, object>, 'fields' | 'interfaces'> {\n  kind: 'Interface';\n  graphqlKind: 'Interface';\n  interfaces: InterfaceParam<SchemaTypes>[];\n  pothosOptions: PothosSchemaTypes.InterfaceTypeOptions;\n}\n\nexport interface PothosUnionTypeConfig\n  extends Omit<GraphQLUnionTypeConfig<unknown, object>, 'types'> {\n  kind: 'Union';\n  graphqlKind: 'Union';\n  types: ObjectParam<SchemaTypes>[];\n  pothosOptions: PothosSchemaTypes.UnionTypeOptions;\n}\n\nexport interface PothosEnumTypeConfig extends GraphQLEnumTypeConfig {\n  kind: 'Enum';\n  graphqlKind: 'Enum';\n  pothosOptions: PothosSchemaTypes.EnumTypeOptions;\n}\n\nexport interface PothosScalarTypeConfig extends GraphQLScalarTypeConfig<unknown, unknown> {\n  kind: 'Scalar';\n  graphqlKind: 'Scalar';\n  pothosOptions: PothosSchemaTypes.ScalarTypeOptions;\n}\n\nexport interface PothosInputObjectTypeConfig extends Omit<GraphQLInputObjectTypeConfig, 'fields'> {\n  kind: 'InputObject';\n  graphqlKind: 'InputObject';\n  pothosOptions: PothosSchemaTypes.InputObjectTypeOptions;\n}\n\nexport type PothosTypeConfig =\n  | PothosEnumTypeConfig\n  | PothosInputObjectTypeConfig\n  | PothosInterfaceTypeConfig\n  | PothosMutationTypeConfig\n  | PothosObjectTypeConfig\n  | PothosQueryTypeConfig\n  | PothosScalarTypeConfig\n  | PothosSubscriptionTypeConfig\n  | PothosUnionTypeConfig;\n\nexport type PothosTypeKind = PothosTypeConfig['kind'];\n\nexport type PothosKindToGraphQLTypeClass<T extends PothosTypeKind> = {\n  Object: GraphQLObjectType;\n  Interface: GraphQLInterfaceType;\n  Union: GraphQLUnionType;\n  Enum: GraphQLEnumType;\n  Scalar: GraphQLScalarType;\n  InputObject: GraphQLInputObjectType;\n}[PothosSchemaTypes.PothosKindToGraphQLType[T]];\n\nexport type PothosFieldKindToConfig<Types extends SchemaTypes, Kind extends FieldKind> = {\n  [K in FieldKind]: Merge<\n    Omit<GraphQLFieldConfig<unknown, object>, 'args' | 'type'> & {\n      kind: K;\n      graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[K];\n      parentType: string;\n      name: string;\n      type: PothosOutputFieldType<Types>;\n      args: Record<string, PothosInputFieldConfig<Types>>;\n      pothosOptions: FieldOptionsFromKind<\n        Types,\n        unknown,\n        TypeParam<Types>,\n        FieldNullability<[unknown]>,\n        InputFieldMap,\n        K,\n        unknown,\n        unknown\n      >;\n    }\n  >;\n}[Kind];\n\nexport interface PothosInputFieldConfig<Types extends SchemaTypes>\n  extends Omit<GraphQLInputFieldConfig, 'type'> {\n  kind: 'Arg' | 'InputObject';\n  graphqlKind: 'Arg' | 'InputObject';\n  name: string;\n  parentField: string | undefined;\n  parentType: string;\n  type: PothosInputFieldType<Types>;\n  pothosOptions: PothosSchemaTypes.InputFieldOptionsByKind<\n    Types,\n    InputTypeParam<Types>,\n    FieldRequiredness<[unknown]>\n  >[keyof PothosSchemaTypes.InputFieldOptionsByKind];\n}\n\nexport interface PothosEnumValueConfig<Types extends SchemaTypes> extends GraphQLEnumValueConfig {\n  pothosOptions: PothosSchemaTypes.EnumValueConfig<Types>;\n}\n\nexport type PothosOutputFieldConfig<Types extends SchemaTypes> = PothosFieldKindToConfig<\n  Types,\n  FieldKind\n>;\n\nexport type PothosFieldConfig<Types extends SchemaTypes> =\n  | PothosInputFieldConfig<Types>\n  | PothosOutputFieldConfig<Types>;\n\nexport type GraphQLFieldKind = PothosFieldConfig<SchemaTypes>['graphqlKind'];\n\nexport type PothosOutputFieldType<Types extends SchemaTypes> =\n  | {\n      kind: 'Enum' | 'Interface' | 'Object' | 'Scalar' | 'Union';\n      ref: OutputType<Types>;\n      nullable: boolean;\n    }\n  | {\n      kind: 'List';\n      type: PothosOutputFieldType<Types>;\n      nullable: boolean;\n    };\n\nexport type PothosNameOutputFieldType<Types extends SchemaTypes> = Exclude<\n  PothosOutputFieldType<Types>,\n  { kind: 'List' }\n>;\n\nexport type PothosInputFieldType<Types extends SchemaTypes> =\n  | {\n      kind: 'Enum' | 'InputObject' | 'Scalar';\n      ref: InputType<Types>;\n      required: boolean;\n    }\n  | {\n      kind: 'List';\n      type: PothosInputFieldType<Types>;\n      required: boolean;\n    };\n\nexport type PothosNameInputFieldType<Types extends SchemaTypes> = Exclude<\n  PothosInputFieldType<Types>,\n  { kind: 'List' }\n>;\n", "import type { GraphQLFieldResolver, GraphQLResolveInfo } from 'graphql';\nimport type BuildCache from '../build-cache';\nimport type { BasePlugin } from '../plugins/plugin';\nimport type { PothosObjectTypeConfig } from './configs';\nimport type { SchemaTypes } from './schema-types';\nimport type { MaybePromise } from './utils';\n\n/**\n * @deprecated This will be replaced by by wrapResolve, wrapSubscribe, and wrapResolveType\n */\nexport interface ResolveHooks<Types extends SchemaTypes, T> {\n  overwriteResolve?: (\n    parent: unknown,\n    args: {},\n    context: Types['Context'],\n    info: GraphQLResolveInfo,\n    originalResolver: GraphQLFieldResolver<unknown, Types['Context']>,\n  ) => unknown;\n  onResolve?: (value: unknown) => MaybePromise<void>;\n  onChild?: (\n    child: unknown,\n    index: number | null,\n    type: PothosObjectTypeConfig,\n    update: (value: unknown) => void,\n  ) => MaybePromise<T | null>;\n  onWrappedResolve?: (wrapped: unknown) => MaybePromise<void>;\n}\n\n/**\n * @deprecated This will be replaced by by wrapResolve, wrapSubscribe, and wrapResolveType\n */\nexport interface SubscribeHooks<Types extends SchemaTypes, T> {\n  overwriteSubscribe?: (\n    parent: unknown,\n    args: {},\n    context: Types['Context'],\n    info: GraphQLResolveInfo,\n    originalResolver: GraphQLFieldResolver<unknown, Types['Context']>,\n  ) => unknown;\n  onSubscribe?: (value: unknown) => MaybePromise<void>;\n  onValue?: (child: unknown) => MaybePromise<T | null>;\n}\n\nexport type PluginConstructorMap<Types extends SchemaTypes> = {\n  [K in keyof PothosSchemaTypes.Plugins<SchemaTypes>]: new (\n    buildCache: BuildCache<SchemaTypes>,\n    name: K,\n  ) => BasePlugin<Types> & PothosSchemaTypes.Plugins<Types>[K];\n};\n\nexport type PluginMap<Types extends SchemaTypes> = {\n  [K in keyof PluginConstructorMap<Types>]: InstanceType<PluginConstructorMap<Types>[K]>;\n};\n\nexport type PluginName = keyof PluginConstructorMap<SchemaTypes>;\n", "export interface SchemaTypes extends PothosSchemaTypes.UserSchemaTypes {\n  outputShapes: {\n    String: unknown;\n    ID: unknown;\n    Int: unknown;\n    Float: unknown;\n    Boolean: unknown;\n  };\n  inputShapes: {\n    String: unknown;\n    ID: unknown;\n    Int: unknown;\n    Float: unknown;\n    Boolean: unknown;\n  };\n  Objects: {};\n  Inputs: {};\n  Interfaces: {};\n  Scalars: {\n    String: { Input: unknown; Output: unknown };\n    ID: { Input: unknown; Output: unknown };\n    Int: { Input: unknown; Output: unknown };\n    Float: { Input: unknown; Output: unknown };\n    Boolean: { Input: unknown; Output: unknown };\n  };\n  DefaultFieldNullability: boolean;\n  DefaultInputFieldRequiredness: boolean;\n  Root: object;\n  Context: object;\n}\n\nexport type MergedScalars<PartialTypes extends Partial<PothosSchemaTypes.UserSchemaTypes>> =\n  SchemaTypes['Scalars'] & {\n    [K in\n      | keyof DefaultScalars\n      | keyof PartialTypes['Scalars']]: K extends keyof PartialTypes['Scalars']\n      ? PartialTypes['Scalars'][K]\n      : K extends keyof DefaultScalars\n      ? DefaultScalars[K]\n      : never;\n  };\n\nexport interface DefaultScalars {\n  String: { Input: string; Output: string };\n  ID: { Input: number | string; Output: number | string };\n  Int: { Input: number; Output: number };\n  Float: { Input: number; Output: number };\n  Boolean: { Input: boolean; Output: boolean };\n}\n\nexport type BaseScalarNames = 'Boolean' | 'Float' | 'ID' | 'Int' | 'String';\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport type ScalarName<Types extends SchemaTypes> = string &\n  (BaseScalarNames | keyof Types['Scalars']);\n\nexport type RootName = 'Mutation' | 'Query' | 'Subscription';\n", "import type InterfaceRef from '../refs/interface';\nimport type ObjectRef from '../refs/object';\nimport type { RootName, SchemaTypes } from './schema-types';\n\nexport const outputShapeKey = Symbol.for('Pothos.outputShapeKey');\nexport const parentShapeKey = Symbol.for('Pothos.parentShapeKey');\nexport const abstractReturnShapeKey = Symbol.for('Pothos.abstractReturnShapeKey');\nexport const inputShapeKey = Symbol.for('Pothos.inputShapeKey');\nexport const inputFieldShapeKey = Symbol.for('Pothos.inputFieldShapeKey');\nexport const outputFieldShapeKey = Symbol.for('Pothos.outputFieldShapeKey');\nexport const typeBrandKey = Symbol.for('Pothos.typeBrandKey');\n\nexport type OutputShape<Types extends SchemaTypes, T> = T extends {\n  [outputShapeKey]: infer U;\n}\n  ? U\n  : T extends new (...args: any[]) => infer U\n    ? U extends {\n        [outputShapeKey]: infer V;\n      }\n      ? V\n      : U\n    : T extends keyof Types['outputShapes']\n      ? Types['outputShapes'][T]\n      : T extends BaseEnum\n        ? ValuesFromEnum<T>\n        : never;\n\nexport type ParentShape<Types extends SchemaTypes, T> = T extends {\n  [parentShapeKey]: infer U;\n}\n  ? U\n  : OutputShape<Types, T>;\n\nexport type AbstractReturnShape<\n  Types extends SchemaTypes,\n  T,\n  ResolveType = unknown,\n> = unknown extends ResolveType\n  ? T extends {\n      [abstractReturnShapeKey]: infer U;\n    }\n    ? U\n    : OutputShape<Types, T>\n  : OutputShape<Types, T>;\n\nexport type InputShape<Types extends SchemaTypes, T> = T extends {\n  [inputShapeKey]: infer U;\n}\n  ? U\n  : T extends new (...args: any[]) => infer U\n    ? U extends {\n        [inputShapeKey]: infer V;\n      }\n      ? V\n      : U\n    : T extends keyof Types['inputShapes']\n      ? Types['inputShapes'][T]\n      : T extends BaseEnum\n        ? ValuesFromEnum<T>\n        : never;\n\nexport interface OutputRefShape<T> {\n  [outputShapeKey]: T;\n}\n\nexport interface InputRefShape<T> {\n  [inputShapeKey]: T;\n}\n\nexport interface OutputRef<T = unknown> {\n  [outputShapeKey]: T;\n  name: string;\n  kind: 'Enum' | 'Interface' | 'Object' | 'Scalar' | 'Union';\n}\n\nexport interface InputRef<T = unknown> {\n  [inputShapeKey]: T;\n  name: string;\n  kind: 'Enum' | 'InputList' | 'InputObject' | 'Scalar';\n}\n\nexport type OutputType<Types extends SchemaTypes> =\n  | BaseEnum\n  | keyof Types['outputShapes']\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  | (new (...args: any[]) => any)\n  | {\n      [outputShapeKey]: unknown;\n    };\n\nexport type InputType<Types extends SchemaTypes> =\n  | BaseEnum\n  | keyof Types['inputShapes']\n  | {\n      [inputShapeKey]: unknown;\n    };\n\nexport type ConfigurableRef<Types extends SchemaTypes> =\n  | InputType<Types>\n  | OutputType<Types>\n  | RootName;\n\nexport type TypeParam<Types extends SchemaTypes> = OutputType<Types> | [OutputType<Types>];\n\nexport type InputTypeParam<Types extends SchemaTypes> = InputType<Types> | [InputType<Types>];\n\nexport type ObjectParam<Types extends SchemaTypes> =\n  | Extract<OutputType<Types>, keyof Types['Objects']>\n  | ObjectRef<unknown> // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  | (new (...args: any[]) => any);\n\nexport type InterfaceParam<Types extends SchemaTypes> =\n  | Extract<OutputType<Types>, keyof Types['Interfaces']>\n  | InterfaceRef<unknown>\n  | (new (...args: any[]) => unknown);\n\nexport interface BaseEnum {\n  [s: string]: number | string;\n  [s: number]: string;\n}\n\nexport type ValuesFromEnum<T extends BaseEnum> = T[keyof T];\n\nexport type EnumParam = BaseEnum | string;\n\nexport type ShapeWithNullability<\n  Types extends SchemaTypes,\n  Shape,\n  Nullable extends boolean,\n> = boolean extends Nullable\n  ? Types['DefaultFieldNullability'] extends true\n    ? Shape | null | undefined\n    : Shape\n  : Nullable extends true\n    ? Shape | null | undefined\n    : Shape;\n\nexport type ShapeFromTypeParam<\n  Types extends SchemaTypes,\n  Param extends TypeParam<Types>,\n  Nullable extends FieldNullability<Param>,\n> = Param extends [OutputType<Types>]\n  ? ShapeFromListTypeParam<Types, Param, Nullable>\n  : FieldNullability<Param> extends Nullable\n    ? Types['DefaultFieldNullability'] extends true\n      ? OutputShape<Types, Param> | null | undefined\n      : OutputShape<Types, Param>\n    : Nullable extends true\n      ? OutputShape<Types, Param> | null | undefined\n      : OutputShape<Types, Param>;\n\nexport type ShapeFromListTypeParam<\n  Types extends SchemaTypes,\n  Param extends [OutputType<Types>],\n  Nullable extends FieldNullability<Param>,\n> = FieldNullability<Param> extends Nullable\n  ? Types['DefaultFieldNullability'] extends true\n    ? readonly OutputShape<Types, Param[0]>[] | null | undefined\n    : readonly OutputShape<Types, Param[0]>[]\n  : Nullable extends true\n    ? readonly OutputShape<Types, Param[0]>[] | null | undefined\n    : Nullable extends false\n      ? readonly OutputShape<Types, Param[0]>[]\n      : Nullable extends { list: infer List; items: infer Items }\n        ? Items extends boolean\n          ? List extends true\n            ?\n                | readonly ShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[]\n                | null\n                | undefined\n            : readonly ShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[]\n          : never\n        : never;\n\nexport type FieldNullability<Param> =\n  | boolean\n  | (Param extends [unknown]\n      ?\n          | boolean\n          | {\n              items: boolean;\n              list: boolean;\n            }\n      : boolean);\n\nexport type InputShapeFromTypeParam<\n  Types extends SchemaTypes,\n  Param extends InputTypeParam<Types>,\n  Required extends FieldRequiredness<Param>,\n> = Param extends [InputType<Types>]\n  ? InputShapeFromListTypeParam<Types, Param, Required>\n  : FieldRequiredness<Param> extends Required\n    ? Types['DefaultInputFieldRequiredness'] extends false\n      ? InputShape<Types, Param> | null | undefined\n      : InputShape<Types, Param>\n    : Required extends true\n      ? InputShape<Types, Param>\n      : InputShape<Types, Param> | null | undefined;\n\nexport type InputShapeFromListTypeParam<\n  Types extends SchemaTypes,\n  Param extends [InputType<Types>],\n  Required extends FieldRequiredness<Param>,\n> = FieldRequiredness<Param> extends Required\n  ? Types['DefaultInputFieldRequiredness'] extends false\n    ? InputShape<Types, Param[0]>[] | null | undefined\n    : InputShape<Types, Param[0]>[]\n  : Required extends true\n    ? InputShape<Types, Param[0]>[]\n    : Required extends false\n      ? InputShape<Types, Param[0]>[] | null | undefined\n      : FieldRequiredness<Param> extends Required\n        ? InputShape<Types, Param[0]>[] | null | undefined\n        : Required extends boolean | { list: infer List; items: infer Items }\n          ? Items extends boolean\n            ? List extends true\n              ? InputShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[]\n              :\n                  | InputShapeFromTypeParam<Types, Param[0], Items extends false ? false : true>[]\n                  | null\n                  | undefined\n            : never\n          : never;\n\nexport type FieldRequiredness<Param> =\n  | boolean\n  | (Param extends [unknown]\n      ?\n          | boolean\n          | {\n              items: boolean;\n              list: boolean;\n            }\n      : boolean);\n", "export type MaybePromise<T> = Promise<T> | T;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (\n  k: infer I,\n) => void\n  ? I\n  : never;\n\nexport type RequiredKeys<T extends object> = Exclude<keyof T, OptionalKeys<T>>;\n\nexport type OptionalKeys<T extends object> = {\n  [K in keyof T]: T[K] | undefined extends T[K] ? K : T[K] | null extends T[K] ? K : never;\n}[keyof T];\n\nexport type NonEmptyKeys<T extends object> = undefined extends {}\n  ? // non-strict mode, all keys are optional\n    never\n  : {\n      [K in keyof T]: {} extends T[K] ? never : T[K] extends NonNullable<T[K]> ? K : never;\n    }[keyof T];\n\nexport type EmptyKeys<T extends object> = {\n  [K in keyof T]: {} extends T[K] ? K : T[K] extends NonNullable<T[K]> ? never : K;\n}[keyof T];\n\nexport type Normalize<T> = T extends object ? { [K in keyof T]: T[K] } : T;\n\nexport type NullableToOptional<T> = T extends object\n  ? Normalize<{ [K in OptionalKeys<T>]?: T[K] } & { [K in RequiredKeys<T>]: T[K] }>\n  : T;\n\nexport type EmptyToOptional<T> = T extends object\n  ? Normalize<{ [K in EmptyKeys<T> | OptionalKeys<T>]?: T[K] } & { [K in NonEmptyKeys<T>]: T[K] }>\n  : T;\n\nexport type NormalizeNullable<T> = undefined extends T\n  ? T | null | undefined\n  : null extends T\n  ? T | null | undefined\n  : T;\n\nexport type NormalizeNullableFields<T extends object> = {\n  [K in OptionalKeys<T>]?: T[K] | null | undefined;\n} & {\n  [K in RequiredKeys<T>]: T[K];\n};\n\n// Check if T is a Record of string keys who's values are not functions\nexport type IsSimpleRecord<T> = (\n  [T] extends [Record<string, any>] // eslint-disable-line @typescript-eslint/no-explicit-any\n    ? keyof T extends infer K\n      ? K extends string\n        ? T[K] extends (...args: any[]) => unknown\n          ? // check if T[K] is any (T[K] is distributed, so it can't also be a number unless its any)\n            [1] extends [T[K]]\n            ? never\n            : false\n          : never\n        : never\n      : false\n    : false\n) extends never\n  ? true\n  : false;\n\nexport type RecursivelyNormalizeNullableFields<T> = T extends null | undefined\n  ? null | undefined\n  : T extends (infer L)[]\n  ? RecursivelyNormalizeNullableFields<L>[]\n  : T extends (...args: any[]) => unknown\n  ? T\n  : keyof T extends string\n  ? IsSimpleRecord<T> extends true\n    ? Normalize<\n        {\n          [K in OptionalKeys<T & object>]?: K extends string\n            ? RecursivelyNormalizeNullableFields<NonNullable<T[K]>> | null | undefined\n            : T[K];\n        } & {\n          [K in RequiredKeys<T & object>]: RecursivelyNormalizeNullableFields<NonNullable<T[K]>>;\n        }\n      >\n    : T\n  : T;\n\nexport type RemoveNeverKeys<T extends {}> = {\n  [K in keyof T as [T[K]] extends [never] ? never : K]: T[K];\n};\n\nexport type Merge<T> = { [K in keyof T]: T[K] };\n\nexport interface Path {\n  prev: Path | undefined;\n  key: number | string;\n  typename: string | undefined;\n}\n\nexport type LastIndex<T extends unknown[]> = T extends [unknown, ...infer U] ? U['length'] : 0;\n\nexport type NormalizeArgs<\n  T extends unknown[],\n  Index extends keyof T = LastIndex<T>,\n> = undefined extends T[Index]\n  ? {} extends T[Index]\n    ? undefined extends {}\n      ? // fix for strictMode: false\n        { [K in keyof T]?: T[K] }\n      : T\n    : { [K in keyof T]-?: T[K] }\n  : {} extends T[Index]\n  ? { [K in keyof T]?: T[K] }\n  : T;\n\nexport type IsStrictMode = undefined extends {} ? false : true;\n", "export default class BaseTypeRef implements PothosSchemaTypes.BaseTypeRef {\n  kind;\n\n  name;\n\n  constructor(\n    kind:\n      | 'Enum'\n      | 'InputList'\n      | 'InputObject'\n      | 'Interface'\n      | 'List'\n      | 'Object'\n      | 'Scalar'\n      | 'Union',\n    name: string,\n  ) {\n    this.kind = kind;\n    this.name = name;\n  }\n\n  toString() {\n    return `${this.kind}Ref<${this.name}>`;\n  }\n}\n", "import { InputRef, inputShapeKey, OutputRef, outputShapeKey, parentShapeKey } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class ScalarRef<T, U, P = T>\n  extends BaseTypeRef\n  implements OutputRef, InputRef, PothosSchemaTypes.ScalarRef<T, U, P>\n{\n  override kind = 'Scalar' as const;\n\n  $inferType!: T;\n\n  $inferInput!: U;\n\n  [outputShapeKey]!: T;\n\n  [parentShapeKey]!: P;\n\n  [inputShapeKey]!: U;\n\n  constructor(name: string) {\n    super('Scalar', name);\n  }\n}\n", "import { GraphQLScalarType } from 'graphql';\nimport ScalarRef from './scalar';\n\nexport default class BuiltinScalarRef<T, U> extends ScalarRef<T, U> {\n  type;\n\n  constructor(type: GraphQLScalarType) {\n    super(type.name);\n\n    this.type = type;\n  }\n}\n", "import { PothosSchemaError, PothosValidationError } from '../errors';\nimport InputListRef from '../refs/input-list';\nimport ListRef from '../refs/list';\nimport {\n  InputType,\n  InputTypeParam,\n  OutputType,\n  SchemaTypes,\n  typeBrandKey,\n  TypeParam,\n} from '../types';\n\nexport * from './base64';\nexport * from './context-cache';\nexport * from './enums';\nexport * from './input';\nexport * from './params';\nexport * from './sort-classes';\n\nexport function assertNever(value: never): never {\n  throw new TypeError(`Unexpected value: ${value}`);\n}\n\nexport function assertArray(value: unknown): value is unknown[] {\n  if (!Array.isArray(value)) {\n    throw new PothosValidationError('List resolvers must return arrays');\n  }\n\n  return true;\n}\n\nexport function isThenable(value: unknown): value is PromiseLike<unknown> {\n  return !!(\n    value &&\n    (typeof value === 'object' || typeof value === 'function') &&\n    typeof (value as Record<string, unknown>).then === 'function'\n  );\n}\n\nexport function verifyRef(ref: unknown) {\n  if (ref === undefined) {\n    throw new PothosSchemaError(`Received undefined as a type ref.\n\nThis is often caused by a circular import\nIf this ref is imported from a file that re-exports it (like index.ts)\nyou may be able to resolve this by importing it directly from the file that defines it.\n`);\n  }\n}\n\nexport function verifyInterfaces(interfaces: unknown) {\n  if (!interfaces || typeof interfaces === 'function') {\n    return;\n  }\n\n  if (!Array.isArray(interfaces)) {\n    throw new PothosSchemaError('interfaces must be an array or function');\n  }\n\n  for (const iface of interfaces) {\n    if (iface === undefined) {\n      throw new PothosSchemaError(`Received undefined in list of interfaces.\n\nThis is often caused by a circular import\nIf this ref is imported from a file that re-exports it (like index.ts)\nyou may be able to resolve this by importing it directly from the file that defines it.\n\nAlternatively you can define interfaces with a function that will be lazily evaluated,\nwhich may resolver issues with circular dependencies:\n\nExample:\nbuilder.objectType('MyObject', {\n  interface: () => [Interface1, Interface2],\n  ...\n});\n`);\n    }\n  }\n}\n\nexport function brandWithType<Types extends SchemaTypes>(val: unknown, type: OutputType<Types>) {\n  if (typeof val !== 'object' || val === null) {\n    return;\n  }\n\n  Object.defineProperty(val, typeBrandKey, {\n    enumerable: false,\n    value: type,\n  });\n}\n\nexport function getTypeBrand(val: unknown) {\n  if (typeof val === 'object' && val !== null && typeBrandKey in val) {\n    return (val as { [typeBrandKey]: OutputType<SchemaTypes> })[typeBrandKey];\n  }\n\n  return null;\n}\n\nexport function unwrapListParam<Types extends SchemaTypes>(\n  param: InputTypeParam<Types> | TypeParam<Types>,\n): InputType<Types> | OutputType<Types> {\n  if (Array.isArray(param)) {\n    return unwrapListParam(param[0]);\n  }\n\n  if (param instanceof ListRef || param instanceof InputListRef) {\n    return unwrapListParam(param.listType as TypeParam<Types>);\n  }\n\n  return param;\n}\n\nexport function unwrapOutputListParam<Types extends SchemaTypes>(\n  param: TypeParam<Types>,\n): OutputType<Types> {\n  if (Array.isArray(param)) {\n    return unwrapOutputListParam(param[0]);\n  }\n\n  if (param instanceof ListRef) {\n    return unwrapOutputListParam(param.listType as TypeParam<Types>);\n  }\n\n  return param;\n}\n\nexport function unwrapInputListParam<Types extends SchemaTypes>(\n  param: InputTypeParam<Types>,\n): InputType<Types> {\n  if (Array.isArray(param)) {\n    return unwrapInputListParam(param[0]);\n  }\n\n  if (param instanceof InputListRef) {\n    return unwrapInputListParam(param.listType as InputTypeParam<Types>);\n  }\n\n  return param;\n}\n\n/**\n * Helper for allowing plugins to fulfill the return of the `next` resolver, without paying the cost of the\n * Promise if not required.\n */\nexport function completeValue<T, R>(\n  valOrPromise: PromiseLike<T> | T,\n  onSuccess: (completedVal: T) => R,\n  onError?: (errVal: unknown) => R,\n): Promise<R> | R {\n  if (isThenable(valOrPromise)) {\n    return Promise.resolve(valOrPromise).then(onSuccess, onError);\n  }\n  // No need to handle onError, this should just be a try/catch inside the `onSuccess` block\n  const result = onSuccess(valOrPromise);\n\n  // If the result of the synchronous call is a promise like, convert to a promise\n  // for consistency\n  if (isThenable(result)) {\n    return Promise.resolve(result);\n  }\n  return result;\n}\n", "import { inputShapeKey, InputTypeParam, SchemaTypes } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class InputListRef<Types extends SchemaTypes, T>\n  extends BaseTypeRef\n  implements PothosSchemaTypes.InputListRef<Types, T>\n{\n  override kind = 'InputList' as const;\n\n  [inputShapeKey]!: T;\n\n  $inferInput!: T;\n\n  listType: InputTypeParam<Types>;\n\n  required: boolean;\n\n  constructor(listType: InputTypeParam<Types>, required: boolean) {\n    super('InputList', `InputList<${String(listType)}>`);\n    this.listType = listType;\n    this.required = required;\n  }\n}\n", "import { outputShapeKey, parentShapeKey, SchemaTypes, TypeParam } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class ListRef<Types extends SchemaTypes, T, P = T>\n  extends BaseTypeRef\n  implements PothosSchemaTypes.ListRef<Types, T, P>\n{\n  override kind = 'List' as const;\n\n  $inferType!: T;\n\n  [outputShapeKey]!: T;\n\n  [parentShapeKey]!: P;\n\n  listType: TypeParam<Types>;\n\n  nullable: boolean;\n\n  constructor(listType: TypeParam<Types>, nullable: boolean) {\n    super('List', `List<${String(listType)}>`);\n    this.listType = listType;\n    this.nullable = nullable;\n  }\n}\n", "/* eslint-disable @typescript-eslint/prefer-ts-expect-error */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable @typescript-eslint/no-invalid-this */\n/* eslint-disable node/no-unsupported-features/es-builtins */\n\nimport { PothosValidationError } from '../errors';\n\nconst getGlobalThis = () => {\n  if (typeof globalThis !== 'undefined') return globalThis;\n  // @ts-ignore\n  if (typeof self !== 'undefined') return self;\n  // @ts-ignore\n  if (typeof window !== 'undefined') return window;\n  if (typeof global !== 'undefined') return global;\n  if (this !== undefined) return this!;\n  throw new Error('Unable to locate global `this`');\n};\n\nexport function encodeBase64(value: string): string {\n  const globalThis = getGlobalThis();\n\n  if (typeof globalThis.Buffer === 'function') {\n    return globalThis.Buffer.from(value).toString('base64');\n  }\n\n  if (typeof globalThis.btoa === 'function') {\n    return globalThis.btoa(value);\n  }\n\n  throw new Error('Unable to locate global `Buffer` or `btoa`');\n}\n\nconst base64Regex = /^(?:[\\d+/A-Za-z]{4})*(?:[\\d+/A-Za-z]{2}==|[\\d+/A-Za-z]{3}=)?$/;\nexport function decodeBase64(value: string): string {\n  if (!base64Regex.test(value)) {\n    throw new PothosValidationError('Invalid base64 string');\n  }\n  const globalThis = getGlobalThis();\n\n  if (typeof globalThis.Buffer === 'function') {\n    return globalThis.Buffer.from(value, 'base64').toString();\n  }\n\n  if (typeof globalThis.atob === 'function') {\n    return globalThis.atob(value);\n  }\n\n  throw new Error('Unable to locate global `Buffer` or `atob`');\n}\n", "import { BaseEnum, EnumValues, PothosEnumValueConfig, SchemaTypes } from '../types';\n\nexport function normalizeEnumValues<Types extends SchemaTypes>(\n  values: EnumValues<SchemaTypes>,\n): Record<string, PothosEnumValueConfig<Types>> {\n  const result: Record<string, PothosEnumValueConfig<Types>> = {};\n\n  if (Array.isArray(values)) {\n    values.forEach((key) => {\n      result[String(key)] = {\n        pothosOptions: {},\n      };\n    });\n  } else {\n    Object.entries(values).forEach(([key, value]) => {\n      if (value && typeof value === 'object') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        result[key] = {\n          ...value,\n          pothosOptions: value as PothosSchemaTypes.EnumValueConfig<Types>,\n        };\n      } else if (typeof value === 'string') {\n        result[value] = {\n          pothosOptions: {},\n        };\n      }\n    });\n  }\n\n  return result;\n}\n\nexport function valuesFromEnum<Types extends SchemaTypes>(\n  Enum: BaseEnum,\n  values?: Record<string, Omit<PothosSchemaTypes.EnumValueConfig<Types>, 'value'>>,\n): Record<string, PothosEnumValueConfig<Types>> {\n  const result: Record<string, PothosEnumValueConfig<Types>> = {};\n\n  Object.keys(Enum)\n    .filter((key) => typeof Enum[Enum[key]] !== 'number')\n    .forEach((key) => {\n      result[key] = {\n        value: Enum[key],\n        pothosOptions: {},\n        ...values?.[key],\n      };\n    });\n\n  return result;\n}\n", "import type BuildCache from '../build-cache';\nimport { PothosSchemaError } from '../errors';\nimport {\n  PothosInputFieldConfig,\n  PothosInputFieldType,\n  PothosTypeConfig,\n  SchemaTypes,\n} from '../types';\nimport { unwrapInputFieldType } from './params';\n\nexport interface InputTypeFieldsMapping<Types extends SchemaTypes, T> {\n  configs: Record<string, PothosInputFieldConfig<Types>>;\n  map: InputFieldsMapping<Types, T> | null;\n}\n\nexport type InputFieldMapping<Types extends SchemaTypes, T> =\n  | {\n      kind: 'Enum';\n      isList: boolean;\n      config: PothosInputFieldConfig<Types>;\n      value: T;\n    }\n  | {\n      kind: 'InputObject';\n      config: PothosInputFieldConfig<Types>;\n      isList: boolean;\n      value: T | null;\n      fields: InputTypeFieldsMapping<Types, T>;\n    }\n  | {\n      kind: 'Scalar';\n      isList: boolean;\n      config: PothosInputFieldConfig<Types>;\n      value: T;\n    };\n\nexport type InputFieldsMapping<Types extends SchemaTypes, T> = Map<\n  string,\n  InputFieldMapping<Types, T>\n>;\n\nexport function resolveInputTypeConfig<Types extends SchemaTypes>(\n  type: PothosInputFieldType<Types>,\n  buildCache: BuildCache<Types>,\n): Extract<PothosTypeConfig, { kind: 'Enum' | 'InputObject' | 'Scalar' }> {\n  if (type.kind === 'List') {\n    return resolveInputTypeConfig(type.type, buildCache);\n  }\n\n  const config = buildCache.getTypeConfig(type.ref);\n\n  if (config.kind === 'Enum' || config.kind === 'Scalar' || config.kind === 'InputObject') {\n    return config;\n  }\n\n  throw new PothosSchemaError(\n    `Unexpected config type ${config.kind} for input ref ${String(type.ref)}`,\n  );\n}\n\nexport function mapInputFields<Types extends SchemaTypes, T>(\n  inputs: Record<string, PothosInputFieldConfig<Types>>,\n  buildCache: BuildCache<Types>,\n  mapper: (config: PothosInputFieldConfig<Types>) => T | null,\n): InputFieldsMapping<Types, T> | null {\n  const filterMappings = new Map<InputFieldsMapping<Types, T>, InputFieldsMapping<Types, T>>();\n\n  return filterMapped(\n    internalMapInputFields(\n      inputs,\n      buildCache,\n      mapper,\n      new Map<string, InputTypeFieldsMapping<Types, T>>(),\n    ),\n  );\n\n  function filterMapped(map: InputFieldsMapping<Types, T>) {\n    if (filterMappings.has(map)) {\n      return filterMappings.get(map)!;\n    }\n\n    const filtered = new Map<string, InputFieldMapping<Types, T>>();\n\n    filterMappings.set(map, filtered);\n\n    map.forEach((mapping, fieldName) => {\n      if (mapping.kind === 'Enum' || mapping.kind === 'Scalar') {\n        filtered.set(fieldName, mapping);\n\n        return;\n      }\n\n      const hasNestedMappings = checkForMappings(mapping.fields.map!);\n\n      if (mapping.value !== null || hasNestedMappings) {\n        const filteredTypeFields = filterMapped(mapping.fields.map!);\n        const mappingForType = {\n          ...mapping,\n          fields: {\n            configs: mapping.fields.configs,\n            map: filteredTypeFields,\n          },\n        };\n\n        filtered.set(fieldName, mappingForType);\n      }\n    });\n\n    return filtered.size > 0 ? filtered : null;\n  }\n\n  function checkForMappings(\n    map: InputFieldsMapping<Types, T>,\n    hasMappings = new Map<InputFieldsMapping<Types, T>, boolean>(),\n  ): boolean {\n    if (hasMappings.has(map)) {\n      return hasMappings.get(map)!;\n    }\n\n    hasMappings.set(map, false);\n\n    let result = false;\n\n    map.forEach((mapping) => {\n      if (mapping.value !== null) {\n        result = true;\n      } else if (\n        mapping.kind === 'InputObject' &&\n        mapping.fields.map &&\n        checkForMappings(mapping.fields.map, hasMappings)\n      ) {\n        result = true;\n      }\n    });\n\n    hasMappings.set(map, result);\n\n    return result;\n  }\n}\n\nfunction internalMapInputFields<Types extends SchemaTypes, T>(\n  inputs: Record<string, PothosInputFieldConfig<Types>>,\n  buildCache: BuildCache<Types>,\n  mapper: (config: PothosInputFieldConfig<Types>) => T | null,\n  seenTypes: Map<string, InputTypeFieldsMapping<Types, T>>,\n) {\n  const map = new Map<string, InputFieldMapping<Types, T>>();\n\n  Object.keys(inputs).forEach((fieldName) => {\n    const inputField = inputs[fieldName];\n    const typeConfig = resolveInputTypeConfig(inputField.type, buildCache);\n    const fieldMapping = mapper(inputField);\n\n    if (typeConfig.kind === 'Enum' || typeConfig.kind === 'Scalar') {\n      if (fieldMapping !== null) {\n        map.set(fieldName, {\n          kind: typeConfig.kind,\n          isList: inputField.type.kind === 'List',\n          config: inputField,\n          value: fieldMapping,\n        });\n      }\n\n      return;\n    }\n\n    const inputFieldConfigs = buildCache.getInputTypeFieldConfigs(\n      unwrapInputFieldType(inputField.type),\n    );\n\n    if (!seenTypes.has(typeConfig.name)) {\n      const typeEntry = {\n        configs: inputFieldConfigs,\n        map: new Map<string, InputFieldMapping<Types, T>>(),\n      };\n\n      seenTypes.set(typeConfig.name, typeEntry);\n\n      typeEntry.map = internalMapInputFields(inputFieldConfigs, buildCache, mapper, seenTypes);\n    }\n\n    const typeFields = seenTypes.get(typeConfig.name)!;\n\n    map.set(fieldName, {\n      kind: typeConfig.kind,\n      isList: inputField.type.kind === 'List',\n      config: inputField,\n      value: fieldMapping,\n      fields: typeFields,\n    });\n  });\n\n  return map;\n}\n\nexport function createInputValueMapper<Types extends SchemaTypes, T, Args extends unknown[] = []>(\n  argMap: InputFieldsMapping<Types, T>,\n  mapValue: (val: unknown, mapping: InputFieldMapping<Types, T>, ...args: Args) => unknown,\n) {\n  return function mapObject(\n    obj: object,\n    map: InputFieldsMapping<Types, T> = argMap,\n    ...args: Args\n  ) {\n    const mapped: Record<string, unknown> = { ...obj };\n\n    map.forEach((field, fieldName) => {\n      let fieldVal = (obj as Record<string, unknown>)[fieldName];\n\n      if (fieldVal === null || fieldVal === undefined) {\n        return;\n      }\n\n      if (field.kind === 'InputObject' && field.fields.map) {\n        fieldVal = field.isList\n          ? (fieldVal as (Record<string, unknown> | null)[]).map(\n              (val) => val && mapObject(val, field.fields.map!, ...args),\n            )\n          : mapObject(fieldVal as Record<string, unknown>, field.fields.map, ...args);\n\n        mapped[fieldName] = fieldVal;\n      }\n\n      if (field.kind !== 'InputObject' || field.value !== null) {\n        mapped[fieldName] = field.isList\n          ? (fieldVal as unknown[]).map((val) =>\n              val == null ? val : mapValue(val, field, ...args),\n            )\n          : mapValue(fieldVal, field, ...args);\n      }\n    });\n\n    return mapped;\n  };\n}\n", "import type ConfigStore from '../config-store';\nimport { PothosSchemaError } from '../errors';\nimport BaseTypeRef from '../refs/base';\nimport InputListRef from '../refs/input-list';\nimport ListRef from '../refs/list';\nimport {\n  FieldNullability,\n  FieldRequiredness,\n  InputType,\n  InputTypeParam,\n  OutputType,\n  PothosInputFieldType,\n  PothosOutputFieldType,\n  SchemaTypes,\n  TypeParam,\n} from '../types';\n\nexport function unwrapOutputFieldType<Types extends SchemaTypes>(\n  type: PothosOutputFieldType<Types>,\n): OutputType<Types> {\n  if (type.kind === 'List') {\n    return unwrapOutputFieldType(type.type);\n  }\n\n  return type.ref;\n}\n\nexport function typeFromParam<Types extends SchemaTypes>(\n  param: TypeParam<Types>,\n  configStore: ConfigStore<Types>,\n  nullableOption: FieldNullability<[unknown]>,\n): PothosOutputFieldType<Types> {\n  const itemNullable = typeof nullableOption === 'object' ? nullableOption.items : false;\n  const nullable = typeof nullableOption === 'object' ? nullableOption.list : !!nullableOption;\n\n  if (Array.isArray(param)) {\n    return {\n      kind: 'List',\n      type: typeFromParam(param[0], configStore, itemNullable),\n      nullable,\n    };\n  }\n\n  if (param instanceof ListRef) {\n    return {\n      kind: 'List',\n      type: typeFromParam(param.listType as TypeParam<Types>, configStore, param.nullable),\n      nullable,\n    };\n  }\n\n  const ref = configStore.getOutputTypeRef(param);\n  const kind = ref instanceof BaseTypeRef ? ref.kind : configStore.getTypeConfig(ref).graphqlKind;\n  const name = ref instanceof BaseTypeRef ? ref.name : configStore.getTypeConfig(ref).name;\n\n  if (kind !== 'InputObject' && kind !== 'List' && kind !== 'InputList') {\n    return {\n      kind,\n      ref,\n      nullable,\n    };\n  }\n\n  throw new PothosSchemaError(`Expected input param ${name} to be an output type but got ${kind}`);\n}\n\nexport function unwrapInputFieldType<Types extends SchemaTypes>(\n  type: PothosInputFieldType<Types>,\n): InputType<Types> {\n  if (type.kind === 'List') {\n    return unwrapInputFieldType(type.type);\n  }\n\n  return type.ref;\n}\n\nexport function inputTypeFromParam<Types extends SchemaTypes>(\n  param: InputTypeParam<Types>,\n  configStore: ConfigStore<Types>,\n  requiredOption: FieldRequiredness<[unknown]>,\n): PothosInputFieldType<Types> {\n  const itemRequired = typeof requiredOption === 'object' ? requiredOption.items : true;\n  const required = typeof requiredOption === 'object' ? requiredOption.list : !!requiredOption;\n\n  if (Array.isArray(param)) {\n    return {\n      kind: 'List',\n      type: inputTypeFromParam(param[0], configStore, itemRequired),\n      required,\n    };\n  }\n\n  if (param instanceof InputListRef) {\n    return {\n      kind: 'List',\n      type: inputTypeFromParam(\n        param.listType as InputTypeParam<Types>,\n        configStore,\n        param.required,\n      ),\n      required,\n    };\n  }\n\n  const ref = configStore.getInputTypeRef(param);\n  const kind = ref instanceof BaseTypeRef ? ref.kind : configStore.getTypeConfig(ref).graphqlKind;\n  const name = ref instanceof BaseTypeRef ? ref.name : configStore.getTypeConfig(ref).name;\n\n  if (kind === 'InputObject' || kind === 'Enum' || kind === 'Scalar') {\n    return {\n      kind,\n      ref,\n      required,\n    };\n  }\n\n  throw new PothosSchemaError(\n    `Expected input param ${name} to be an InputObject, Enum, or Scalar but got ${kind}`,\n  );\n}\n", "export function classDepth(obj: {}): number {\n  const proto = Object.getPrototypeOf(obj) as {} | null;\n\n  if (!proto) {\n    return 0;\n  }\n\n  return 1 + classDepth(proto);\n}\n\nexport function sortClasses<T extends new (...args: any[]) => unknown>(classes: T[]) {\n  return [...classes].sort((a, b) => {\n    const depthA = classDepth(a);\n    const depthB = classDepth(b);\n\n    if (depthA > depthB) {\n      return -1;\n    }\n    if (depthB > depthA) {\n      return 1;\n    }\n\n    return 0;\n  });\n}\n", "/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n/* eslint-disable node/no-callback-literal */\nimport {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLScalarType,\n  GraphQLString,\n} from 'graphql';\nimport { PothosError, PothosSchemaError } from './errors';\nimport BaseTypeRef from './refs/base';\nimport BuiltinScalarRef from './refs/builtin-scalar';\nimport FieldRef from './refs/field';\nimport InputTypeRef from './refs/input';\nimport InputFieldRef from './refs/input-field';\nimport InputListRef from './refs/input-list';\nimport ListRef from './refs/list';\nimport OutputTypeRef from './refs/output';\nimport type {\n  ConfigurableRef,\n  FieldMap,\n  GraphQLFieldKind,\n  InputFieldMap,\n  InputRef,\n  InputType,\n  InputTypeParam,\n  InterfaceParam,\n  ObjectParam,\n  OutputRef,\n  OutputType,\n  PothosFieldConfig,\n  PothosObjectTypeConfig,\n  PothosTypeConfig,\n  SchemaTypes,\n  TypeParam,\n} from './types';\nimport { unwrapListParam } from './utils';\n\nexport default class ConfigStore<Types extends SchemaTypes> {\n  typeConfigs = new Map<string, PothosTypeConfig>();\n\n  private fieldRefs = new WeakMap<\n    FieldRef | InputFieldRef,\n    (\n      name: string,\n      parentField: string | undefined,\n      typeConfig: PothosTypeConfig,\n    ) => PothosFieldConfig<Types>\n  >();\n\n  private fields = new Map<string, Map<string, PothosFieldConfig<Types>>>();\n\n  private pendingActions: (() => void)[] = [];\n\n  private refsToName = new Map<ConfigurableRef<Types>, string>();\n\n  private scalarsToRefs = new Map<string, BuiltinScalarRef<unknown, unknown>>();\n\n  private fieldRefsToConfigs = new Map<FieldRef | InputFieldRef, PothosFieldConfig<Types>[]>();\n\n  private pendingFields = new Map<FieldRef | InputFieldRef, InputType<Types> | OutputType<Types>>();\n\n  private pendingRefResolutions = new Map<\n    ConfigurableRef<Types>,\n    ((config: PothosTypeConfig) => void)[]\n  >();\n\n  private fieldRefCallbacks = new Map<\n    FieldRef | InputFieldRef,\n    ((config: PothosFieldConfig<Types>) => void)[]\n  >();\n\n  private pending = true;\n\n  constructor() {\n    const scalars: GraphQLScalarType[] = [\n      GraphQLID,\n      GraphQLInt,\n      GraphQLFloat,\n      GraphQLString,\n      GraphQLBoolean,\n    ];\n\n    scalars.forEach((scalar) => {\n      const ref = new BuiltinScalarRef(scalar);\n      this.scalarsToRefs.set(scalar.name, ref);\n      this.refsToName.set(ref, scalar.name);\n    });\n  }\n\n  hasConfig(typeParam: InputType<Types> | OutputType<Types>) {\n    if (typeof typeParam === 'string') {\n      return this.typeConfigs.has(typeParam);\n    }\n\n    return this.refsToName.has(typeParam);\n  }\n\n  addUnionTypes(typeName: string, unionTypes: ObjectParam<Types>[] | (() => ObjectParam<Types>[])) {\n    this.onPrepare(() => {\n      const typeConfig = this.getTypeConfig(typeName);\n\n      if (typeConfig.graphqlKind !== 'Union') {\n        throw new PothosSchemaError(\n          `Can not add types to ${typeName} because it is a ${typeConfig.kind}`,\n        );\n      }\n\n      typeConfig.types = [\n        ...typeConfig.types,\n        ...((typeof unionTypes === 'function'\n          ? unionTypes()\n          : unionTypes) as ObjectParam<SchemaTypes>[]),\n      ];\n    });\n  }\n\n  addInterfaces(\n    typeName: string,\n    interfaces: InterfaceParam<Types>[] | (() => InterfaceParam<Types>[]),\n  ) {\n    this.onPrepare(() => {\n      const typeConfig = this.getTypeConfig(typeName);\n\n      if (\n        (typeConfig.graphqlKind !== 'Object' && typeConfig.graphqlKind !== 'Interface') ||\n        typeConfig.kind === 'Query' ||\n        typeConfig.kind === 'Mutation' ||\n        typeConfig.kind === 'Subscription'\n      ) {\n        throw new PothosSchemaError(\n          `Can not add interfaces to ${typeName} because it is a ${typeConfig.kind}`,\n        );\n      }\n\n      typeConfig.interfaces = [\n        ...typeConfig.interfaces,\n        ...((typeof interfaces === 'function'\n          ? interfaces()\n          : interfaces) as InterfaceParam<SchemaTypes>[]),\n      ];\n    });\n  }\n\n  addFieldRef(\n    ref: FieldRef | InputFieldRef,\n    // We need to be able to resolve the types kind before configuring the field\n    typeParam: InputTypeParam<Types> | TypeParam<Types>,\n    args: InputFieldMap,\n    getConfig: (\n      name: string,\n      parentField: string | undefined,\n      typeConfig: PothosTypeConfig,\n    ) => PothosFieldConfig<Types>,\n  ) {\n    if (this.fieldRefs.has(ref)) {\n      throw new PothosSchemaError(`FieldRef ${String(ref)} has already been added to config store`);\n    }\n\n    const typeRefOrName = unwrapListParam(typeParam);\n    const argRefs = Object.keys(args).map((argName) => {\n      const argRef = args[argName];\n\n      argRef.fieldName = argName;\n      argRef.argFor = ref;\n\n      return argRef;\n    });\n\n    const checkArgs = () => {\n      for (const arg of argRefs) {\n        if (this.pendingFields.has(arg)) {\n          const unresolvedArgType = this.pendingFields.get(arg)!;\n          this.pendingFields.set(ref, unresolvedArgType);\n\n          this.onTypeConfig(unresolvedArgType, checkArgs);\n\n          return;\n        }\n      }\n\n      this.pendingFields.delete(ref);\n      this.fieldRefs.set(ref, getConfig);\n    };\n\n    if (\n      this.hasConfig(typeRefOrName) ||\n      typeRefOrName instanceof BaseTypeRef ||\n      this.scalarsToRefs.has(typeRefOrName as string)\n    ) {\n      checkArgs();\n    } else {\n      this.pendingFields.set(ref, typeRefOrName);\n      this.onTypeConfig(typeRefOrName, () => {\n        checkArgs();\n      });\n    }\n  }\n\n  createFieldConfig<T extends GraphQLFieldKind>(\n    ref: FieldRef | InputFieldRef,\n    name: string,\n    typeConfig: PothosTypeConfig,\n    parentField?: string,\n    kind?: T,\n  ): Extract<PothosFieldConfig<Types>, { graphqlKind: T }> {\n    if (!this.fieldRefs.has(ref)) {\n      if (this.pendingFields.has(ref)) {\n        throw new PothosSchemaError(\n          `Missing implementation for ${this.describeRef(\n            this.pendingFields.get(ref)!,\n          )} used in field ${name} of ${typeConfig.name}`,\n        );\n      }\n\n      throw new PothosSchemaError(`Missing definition for ${String(ref)}`);\n    }\n\n    const config = this.fieldRefs.get(ref)!(name, parentField, typeConfig);\n\n    if (kind && config.graphqlKind !== kind) {\n      throw new PothosError(\n        `Expected ref for field named ${name} to resolve to a ${kind} type, but got ${config.graphqlKind}`,\n      );\n    }\n\n    return config as Extract<PothosFieldConfig<Types>, { graphqlKind: T }>;\n  }\n\n  associateRefWithName(ref: ConfigurableRef<Types>, name: string) {\n    if (!this.typeConfigs.has(name)) {\n      throw new PothosSchemaError(`${name} has not been implemented yet`);\n    }\n\n    this.refsToName.set(ref, name);\n\n    if (this.pendingRefResolutions.has(ref)) {\n      const cbs = this.pendingRefResolutions.get(ref)!;\n\n      this.pendingRefResolutions.delete(ref);\n\n      cbs.forEach((cb) => void cb(this.typeConfigs.get(name)!));\n    }\n  }\n\n  addTypeConfig(config: PothosTypeConfig, ref?: ConfigurableRef<Types>) {\n    const { name } = config;\n\n    if (this.typeConfigs.has(name)) {\n      throw new PothosSchemaError(\n        `Duplicate typename: Another type with name ${name} already exists.`,\n      );\n    }\n\n    this.typeConfigs.set(config.name, config);\n\n    if (ref) {\n      this.associateRefWithName(ref, name);\n    }\n\n    if (this.pendingRefResolutions.has(name as ConfigurableRef<Types>)) {\n      const cbs = this.pendingRefResolutions.get(name as ConfigurableRef<Types>)!;\n\n      this.pendingRefResolutions.delete(name as ConfigurableRef<Types>);\n\n      cbs.forEach((cb) => void cb(config));\n    }\n  }\n\n  getTypeConfig<T extends PothosTypeConfig['kind']>(\n    ref: ConfigurableRef<Types> | string,\n    kind?: T,\n  ) {\n    let config: PothosTypeConfig;\n\n    if (typeof ref === 'string') {\n      if (!this.typeConfigs.has(ref)) {\n        throw new PothosSchemaError(`Type ${String(ref)} has not been implemented`);\n      }\n      config = this.typeConfigs.get(ref)!;\n    } else if (this.refsToName.has(ref)) {\n      config = this.typeConfigs.get(this.refsToName.get(ref)!)!;\n    } else if (ref instanceof ListRef || ref instanceof InputListRef) {\n      throw new PothosSchemaError(\n        `Expected a base type but got a ${ref.kind} of ${String(ref.listType)}`,\n      );\n    } else {\n      throw new PothosSchemaError(`Ref ${String(ref)} has not been implemented`);\n    }\n\n    if (kind && config.graphqlKind !== kind) {\n      throw new PothosSchemaError(\n        `Expected ref to resolve to a ${kind} type, but got ${config.kind}`,\n      );\n    }\n\n    return config as Extract<PothosTypeConfig, { kind: T }>;\n  }\n\n  getInputTypeRef(ref: ConfigurableRef<Types> | string) {\n    if (ref instanceof BaseTypeRef) {\n      if (ref.kind !== 'InputObject' && ref.kind !== 'Enum' && ref.kind !== 'Scalar') {\n        throw new PothosSchemaError(`Expected ${ref.name} to be an input type but got ${ref.kind}`);\n      }\n\n      return ref as InputRef;\n    }\n\n    if (typeof ref === 'string') {\n      if (this.scalarsToRefs.has(ref)) {\n        return this.scalarsToRefs.get(ref)!;\n      }\n\n      if (this.typeConfigs.has(ref)) {\n        const config = this.typeConfigs.get(ref)!;\n\n        if (\n          config.graphqlKind !== 'InputObject' &&\n          config.graphqlKind !== 'Enum' &&\n          config.graphqlKind !== 'Scalar'\n        ) {\n          throw new PothosSchemaError(\n            `Expected ${config.name} to be an input type but got ${config.graphqlKind}`,\n          );\n        }\n\n        const newRef = new InputTypeRef(config.graphqlKind, config.name);\n\n        this.refsToName.set(newRef, config.name);\n\n        return newRef;\n      }\n    }\n\n    return ref as InputType<Types>;\n  }\n\n  getOutputTypeRef(ref: ConfigurableRef<Types> | string) {\n    if (ref instanceof BaseTypeRef) {\n      if (ref.kind === 'InputObject' || ref.kind === 'InputList') {\n        throw new PothosSchemaError(\n          `Expected ${ref.name} to be an output type but got ${ref.kind}`,\n        );\n      }\n\n      if (ref.kind === 'List') {\n        throw new PothosSchemaError(`Expected ${ref.name} to be a base type but got a ${ref.kind}`);\n      }\n\n      return ref as OutputRef;\n    }\n\n    if (typeof ref === 'string') {\n      if (this.scalarsToRefs.has(ref)) {\n        return this.scalarsToRefs.get(ref)!;\n      }\n\n      if (this.typeConfigs.has(ref)) {\n        const config = this.typeConfigs.get(ref)!;\n\n        if (config.graphqlKind === 'InputObject') {\n          throw new PothosSchemaError(\n            `Expected ${config.name} to be an output type but got ${config.graphqlKind}`,\n          );\n        }\n\n        const newRef = new OutputTypeRef(config.graphqlKind, config.name);\n\n        this.refsToName.set(newRef, config.name);\n\n        return newRef;\n      }\n    }\n\n    return ref as OutputType<Types>;\n  }\n\n  onTypeConfig(ref: ConfigurableRef<Types>, cb: (config: PothosTypeConfig) => void) {\n    if (!ref) {\n      throw new PothosSchemaError(`${String(ref)} is not a valid type ref`);\n    }\n    if (this.refsToName.has(ref)) {\n      cb(this.getTypeConfig(ref));\n    } else if (typeof ref === 'string' && this.typeConfigs.has(ref)) {\n      cb(this.typeConfigs.get(ref)!);\n    } else if (!this.pending) {\n      throw new PothosSchemaError(`Ref ${String(ref)} has not been implemented`);\n    } else if (this.pendingRefResolutions.has(ref)) {\n      this.pendingRefResolutions.get(ref)!.push(cb);\n    } else {\n      this.pendingRefResolutions.set(ref, [cb]);\n    }\n  }\n\n  onFieldUse(ref: FieldRef | InputFieldRef, cb: (config: PothosFieldConfig<Types>) => void) {\n    if (!this.fieldRefCallbacks.has(ref)) {\n      this.fieldRefCallbacks.set(ref, []);\n    }\n\n    this.fieldRefCallbacks.get(ref)!.push(cb);\n\n    if (this.fieldRefsToConfigs.has(ref)) {\n      this.fieldRefsToConfigs.get(ref)!.forEach((config) => void cb(config));\n    }\n  }\n\n  getFields<T extends GraphQLFieldKind>(\n    name: string,\n    kind?: T,\n  ): Map<string, Extract<PothosFieldConfig<Types>, { graphqlKind: T }>> {\n    const typeConfig = this.getTypeConfig(name);\n\n    if (!this.fields.has(name)) {\n      this.fields.set(name, new Map());\n    }\n    const fields = this.fields.get(name)!;\n\n    if (kind && typeConfig.graphqlKind !== kind) {\n      throw new PothosSchemaError(\n        `Expected ${name} to be a ${kind} type, but found ${typeConfig.graphqlKind}`,\n      );\n    }\n\n    return fields as Map<string, Extract<PothosFieldConfig<Types>, { graphqlKind: T }>>;\n  }\n\n  prepareForBuild() {\n    this.pending = false;\n\n    const { pendingActions } = this;\n\n    this.pendingActions = [];\n\n    pendingActions.forEach((fn) => void fn());\n\n    if (this.pendingRefResolutions.size > 0) {\n      throw new PothosSchemaError(\n        `Missing implementations for some references (${[...this.pendingRefResolutions.keys()]\n          .map((ref) => this.describeRef(ref))\n          .join(', ')}).`,\n      );\n    }\n  }\n\n  onPrepare(cb: () => void) {\n    if (this.pending) {\n      this.pendingActions.push(cb);\n    } else {\n      cb();\n    }\n  }\n\n  addFields(\n    typeRef: ConfigurableRef<Types>,\n    fields: FieldMap | InputFieldMap | (() => FieldMap | InputFieldMap),\n  ) {\n    this.onPrepare(\n      () =>\n        void this.onTypeConfig(typeRef, (config) => {\n          this.buildFields(typeRef, typeof fields === 'function' ? fields() : fields);\n        }),\n    );\n  }\n\n  getImplementers(ref: ConfigurableRef<Types> | string) {\n    const typeConfig = this.getTypeConfig(ref, 'Interface');\n\n    const implementers = [...this.typeConfigs.values()].filter(\n      (type) =>\n        type.kind === 'Object' &&\n        type.interfaces.find((i) => this.getTypeConfig(i).name === typeConfig.name),\n    ) as PothosObjectTypeConfig[];\n\n    return implementers;\n  }\n\n  private describeRef(ref: ConfigurableRef<Types>): string {\n    if (typeof ref === 'string') {\n      return ref;\n    }\n\n    if (ref.toString !== {}.toString) {\n      return String(ref);\n    }\n\n    const usedBy = [...this.pendingFields.entries()].find(\n      ([fieldRef, typeRef]) => typeRef === ref,\n    )?.[0];\n\n    if (usedBy) {\n      return `<unnamed ref or enum: used by ${usedBy}>`;\n    }\n\n    return `<unnamed ref or enum>`;\n  }\n\n  private buildFields(typeRef: ConfigurableRef<Types>, fields: FieldMap | InputFieldMap) {\n    Object.keys(fields).forEach((fieldName) => {\n      const fieldRef = fields[fieldName];\n\n      fieldRef.fieldName = fieldName;\n\n      if (this.pendingFields.has(fieldRef)) {\n        this.onTypeConfig(this.pendingFields.get(fieldRef)!, () => {\n          this.buildField(typeRef, fieldRef, fieldName);\n        });\n      } else {\n        this.buildField(typeRef, fieldRef, fieldName);\n      }\n    });\n  }\n\n  private buildField(\n    typeRef: ConfigurableRef<Types>,\n    field: FieldRef | InputFieldRef,\n    fieldName: string,\n  ) {\n    const typeConfig = this.getTypeConfig(typeRef);\n    const fieldConfig = this.createFieldConfig(field, fieldName, typeConfig);\n    const existingFields = this.getFields(typeConfig.name);\n\n    if (existingFields.has(fieldName)) {\n      throw new PothosSchemaError(\n        `Duplicate field definition for field ${fieldName} in ${typeConfig.name}`,\n      );\n    }\n\n    if (fieldConfig.graphqlKind !== typeConfig.graphqlKind) {\n      throw new PothosSchemaError(\n        `${typeConfig.name}.${fieldName} was defined as a ${fieldConfig.graphqlKind} field but ${typeConfig.name} is a ${typeConfig.graphqlKind}`,\n      );\n    }\n\n    existingFields.set(fieldName, fieldConfig);\n\n    if (!this.fieldRefsToConfigs.has(field)) {\n      this.fieldRefsToConfigs.set(field, []);\n    }\n\n    this.fieldRefsToConfigs.get(field)!.push(fieldConfig);\n\n    if (this.fieldRefCallbacks.has(field)) {\n      this.fieldRefCallbacks.get(field)!.forEach((cb) => void cb(fieldConfig));\n    }\n  }\n}\n", "import { inputShapeKey } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class InputTypeRef<T> extends BaseTypeRef {\n  override kind;\n\n  $inferInput!: T;\n\n  [inputShapeKey]!: T;\n\n  constructor(kind: 'Enum' | 'InputObject' | 'Scalar', name: string) {\n    super(kind, name);\n    this.kind = kind;\n  }\n}\n", "import { outputShapeKey, parentShapeKey } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class OutputTypeRef<T, P = T> extends BaseTypeRef {\n  override kind;\n\n  $inferType!: T;\n\n  [outputShapeKey]!: T;\n\n  [parentShapeKey]!: P;\n\n  constructor(kind: 'Enum' | 'Interface' | 'Object' | 'Scalar' | 'Union', name: string) {\n    super(kind, name);\n    this.kind = kind;\n  }\n}\n", "import { inputFieldShapeKey } from '../types';\nimport FieldRef from './field';\n\nexport default class InputFieldRef<\n  T = unknown,\n  Kind extends 'Arg' | 'InputObject' = 'Arg' | 'InputObject',\n> {\n  kind: Kind;\n\n  parentTypename: string;\n\n  fieldName?: string;\n\n  argFor?: FieldRef | InputFieldRef;\n\n  $inferInput!: T;\n\n  [inputFieldShapeKey]!: T;\n\n  constructor(kind: Kind, parentTypename: string) {\n    this.kind = kind;\n    this.parentTypename = parentTypename;\n  }\n\n  toString() {\n    if (this.kind !== 'Arg') {\n      if (this.fieldName) {\n        return `${this.parentTypename}.${this.fieldName}`;\n      }\n\n      return this.parentTypename;\n    }\n    const fieldName = this.argFor?.fieldName ?? '[unnamed field]';\n    const argName = this.fieldName ?? '[unnamed argument]';\n\n    return `${this.parentTypename}.${fieldName}(${argName})`;\n  }\n}\n", "import InputFieldRef from '../refs/input-field';\nimport InputListRef from '../refs/input-list';\nimport type {\n  ArgBuilder,\n  FieldRequiredness,\n  InputShapeFromTypeParam,\n  InputTypeParam,\n  NormalizeArgs,\n} from '../types';\nimport { InputType, SchemaTypes } from '../types';\nimport { inputTypeFromParam } from '../utils';\n\nexport default class InputFieldBuilder<\n  Types extends SchemaTypes,\n  Kind extends keyof PothosSchemaTypes.InputFieldOptionsByKind,\n> {\n  builder: PothosSchemaTypes.SchemaBuilder<Types>;\n\n  kind: Kind;\n\n  typename: string;\n\n  /**\n   * Create a Boolean input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  boolean = this.helper('Boolean');\n\n  /**\n   * Create a Float input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  float = this.helper('Float');\n\n  /**\n   * Create a ID input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  id = this.helper('ID');\n\n  /**\n   * Create a Int input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  int = this.helper('Int');\n\n  /**\n   * Create a String input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  string = this.helper('String');\n\n  /**\n   * Create a Boolean list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  booleanList = this.helper(['Boolean']);\n\n  /**\n   * Create a Float list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  floatList = this.helper(['Float']);\n\n  /**\n   * Create a ID list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  idList = this.helper(['ID']);\n\n  /**\n   * Create a Int list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  intList = this.helper(['Int']);\n\n  /**\n   * Create a String list input field\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  stringList = this.helper(['String']);\n\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, kind: Kind, typename: string) {\n    this.builder = builder;\n    this.kind = kind;\n    this.typename = typename;\n  }\n\n  listRef = <T extends InputTypeParam<Types>, Required extends boolean = true>(\n    type: T,\n    options?: { required?: Required },\n  ): InputListRef<Types, InputShapeFromTypeParam<Types, T, Required>[]> =>\n    new InputListRef<Types, InputShapeFromTypeParam<Types, T, Required>[]>(\n      type,\n      options?.required ?? true,\n    );\n\n  argBuilder(): ArgBuilder<Types> {\n    const builder = this.field.bind(this as never) as InputFieldBuilder<Types, 'Arg'>['field'];\n\n    const protoKeys = Object.keys(Object.getPrototypeOf(this) as object).filter(\n      (key) =>\n        typeof (this as Record<string, unknown>)[key] === 'function' &&\n        (Function.prototype as unknown as Record<string, unknown>)[key] === undefined,\n    );\n\n    ([...Object.keys(this), ...protoKeys] as (keyof InputFieldBuilder<Types, 'Arg'>)[]).forEach(\n      (key) => {\n        (builder as unknown as Record<string, unknown>)[key] =\n          typeof this[key] === 'function' ? (this[key] as Function).bind(this) : this[key];\n      },\n    );\n\n    return builder as ArgBuilder<Types>;\n  }\n\n  /**\n   * Create in input field or argument for the current type\n   * @param {PothosSchemaTypes.InputFieldOptions} [options={}] - Options for this field\n   */\n  field<Type extends InputType<Types> | [InputType<Types>], Req extends FieldRequiredness<Type>>(\n    options: PothosSchemaTypes.InputFieldOptionsByKind<Types, Type, Req>[Kind],\n  ): InputFieldRef<InputShapeFromTypeParam<Types, Type, Req>, Kind> {\n    const ref: InputFieldRef<InputShapeFromTypeParam<Types, Type, Req>, Kind> = new InputFieldRef(\n      this.kind,\n      this.typename,\n    );\n\n    this.builder.configStore.addFieldRef(\n      ref,\n      options.type,\n      {},\n      (name, parentField, typeConfig) => ({\n        name,\n        parentField,\n        kind: this.kind,\n        graphqlKind: this.kind,\n        parentType: typeConfig.name,\n        type: inputTypeFromParam<Types>(\n          options.type,\n          this.builder.configStore,\n          options.required ?? this.builder.defaultInputFieldRequiredness,\n        ),\n        pothosOptions: options as unknown as PothosSchemaTypes.InputFieldOptionsByKind<Types>[Kind],\n        description: options.description,\n        deprecationReason: options.deprecationReason,\n        defaultValue: options.defaultValue,\n        extensions: options.extensions,\n      }),\n    );\n\n    return ref;\n  }\n\n  private helper<Type extends InputType<Types> | [InputType<Types>]>(type: Type) {\n    return <Req extends FieldRequiredness<Type>>(\n      ...args: NormalizeArgs<\n        [options: Omit<PothosSchemaTypes.InputFieldOptionsByKind<Types, Type, Req>[Kind], 'type'>]\n      >\n    ) => {\n      const [options = {} as never] = args;\n\n      return this.field({\n        ...options,\n        type,\n      } as PothosSchemaTypes.InputFieldOptionsByKind<Types, Type, Req>[Kind]);\n    };\n  }\n}\n", "import { SchemaTypes } from '../types';\nimport FieldBuilder from './builder';\n\nexport default class InterfaceFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> extends FieldBuilder<Types, ParentShape, 'Interface'> {\n  constructor(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>) {\n    super(name, builder, 'Interface', 'Interface');\n  }\n}\n", "import {\n  CompatibleTypes,\n  ExposeNullability,\n  FieldKind,\n  FieldNullability,\n  FieldOptionsFromKind,\n  NormalizeArgs,\n  SchemaTypes,\n  TypeParam,\n} from '../types';\nimport RootFieldBuilder from './root';\n\nexport default class FieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n  Kind extends FieldKind = FieldKind,\n> extends RootFieldBuilder<Types, ParentShape, Kind> {\n  /**\n   * Create a Boolean field from a boolean property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeBoolean<\n    Name extends CompatibleTypes<Types, ParentShape, 'Boolean', true>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'Boolean'> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, 'Boolean', ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              'Boolean',\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<'Boolean', Nullable, Name>(name, { ...options, type: 'Boolean' });\n  }\n\n  /**\n   * Create a Float field from a numeric property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeFloat<\n    Name extends CompatibleTypes<Types, ParentShape, 'Float', true>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'Float'> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, 'Float', ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              'Float',\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<'Float', Nullable, Name>(name, { ...options, type: 'Float' });\n  }\n\n  /**\n   * Create an ID field from a property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeID<\n    Name extends CompatibleTypes<Types, ParentShape, 'ID', true>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'ID'> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, 'ID', ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              'ID',\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<'ID', Nullable, Name>(name, { ...options, type: 'ID' });\n  }\n\n  /**\n   * Create an Int field from a numeric property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeInt<\n    Name extends CompatibleTypes<Types, ParentShape, 'Int', true>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'Int'> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, 'Int', ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              'Int',\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<'Int', Nullable, Name>(name, { ...options, type: 'Int' });\n  }\n\n  /**\n   * Create a String field from a string property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeString<\n    Name extends CompatibleTypes<Types, ParentShape, 'String', true>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'String'> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, 'String', ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              'String',\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<'String', Nullable, Name>(name, { ...options, type: 'String' });\n  }\n\n  /**\n   * Create a Boolean list field from a boolean[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeBooleanList<\n    Name extends CompatibleTypes<Types, ParentShape, ['Boolean'], { list: true; items: true }>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['Boolean']> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, ['Boolean'], ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              ['Boolean'],\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<['Boolean'], Nullable, Name>(name, { ...options, type: ['Boolean'] });\n  }\n\n  /**\n   * Create a Float list field from a number[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeFloatList<\n    Name extends CompatibleTypes<Types, ParentShape, ['Float'], { list: true; items: true }>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['Float']> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, ['Float'], ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              ['Float'],\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<['Float'], Nullable, Name>(name, { ...options, type: ['Float'] });\n  }\n\n  /**\n   * Create an ID list field from an id[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeIDList<\n    Name extends CompatibleTypes<Types, ParentShape, ['ID'], { list: true; items: true }>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['ID']> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, ['ID'], ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              ['ID'],\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<['ID'], Nullable, Name>(name, { ...options, type: ['ID'] });\n  }\n\n  /**\n   * Create a Int list field from a number[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeIntList<\n    Name extends CompatibleTypes<Types, ParentShape, ['Int'], { list: true; items: true }>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['Int']> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, ['Int'], ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              ['Int'],\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<['Int'], Nullable, Name>(name, { ...options, type: ['Int'] });\n  }\n\n  /**\n   * Create a String list field from a string[] property on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  exposeStringList<\n    Name extends CompatibleTypes<Types, ParentShape, ['String'], { list: true; items: true }>,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['String']> = Types['DefaultFieldNullability'],\n  >(\n    name: Name,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, ['String'], ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              ['String'],\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve' | 'type'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField<['String'], Nullable, Name>(name, { ...options, type: ['String'] });\n  }\n\n  /**\n   * Create a field that resolves to a property of the corresponding type on the parent object\n   * @param {string} name - the name of the property on the source object (does not need to match the field name).\n   * @param {object} [options={}] - Options for this field\n   */\n  expose<\n    Type extends TypeParam<Types>,\n    Nullable extends FieldNullability<Type>,\n    ResolveReturnShape,\n    Name extends CompatibleTypes<\n      Types,\n      ParentShape,\n      Type,\n      Type extends [unknown] ? { list: true; items: true } : true\n    >,\n  >(\n    name: Name extends keyof ParentShape ? Name : keyof ParentShape,\n    ...args: NormalizeArgs<\n      [\n        options: ExposeNullability<Types, Type, ParentShape, Name, Nullable> &\n          Omit<\n            FieldOptionsFromKind<\n              Types,\n              ParentShape,\n              Type,\n              Nullable,\n              {},\n              Kind,\n              ParentShape,\n              ResolveReturnShape\n            >,\n            'nullable' | 'resolve'\n          >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.exposeField(\n      name as never as CompatibleTypes<\n        Types,\n        ParentShape,\n        Type,\n        Type extends [unknown] ? { list: true; items: true } : true\n      >,\n      options,\n    );\n  }\n}\n", "import { FieldKind, outputFieldShapeKey } from '../types';\n\nexport default class FieldRef<T = unknown, Kind extends FieldKind = FieldKind> {\n  kind: FieldKind;\n\n  parentTypename: string;\n\n  fieldName?: string;\n\n  $inferType!: T;\n\n  [outputFieldShapeKey]!: T;\n\n  constructor(kind: Kind, parentTypename: string) {\n    this.kind = kind;\n    this.parentTypename = parentTypename;\n  }\n\n  toString() {\n    if (this.fieldName) {\n      return `${this.parentTypename}.${this.fieldName}`;\n    }\n\n    return this.parentTypename;\n  }\n}\n", "import { defaultFieldResolver } from 'graphql';\nimport { PothosSchemaError } from '../errors';\nimport FieldRef from '../refs/field';\nimport type {\n  FieldKind,\n  InputFieldMap,\n  PothosInputFieldConfig,\n  ShapeFromTypeParam,\n} from '../types';\nimport { FieldNullability, SchemaTypes, TypeParam } from '../types';\nimport { typeFromParam } from '../utils';\n\nexport default class BaseFieldUtil<Types extends SchemaTypes, ParentShape, Kind extends FieldKind> {\n  typename: string;\n\n  builder: PothosSchemaTypes.SchemaBuilder<Types>;\n\n  kind: Kind;\n\n  graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[Kind];\n\n  constructor(\n    name: string,\n    builder: PothosSchemaTypes.SchemaBuilder<Types>,\n    kind: Kind,\n    graphqlKind: PothosSchemaTypes.PothosKindToGraphQLType[Kind],\n  ) {\n    this.typename = name;\n    this.builder = builder;\n    this.kind = kind;\n    this.graphqlKind = graphqlKind;\n  }\n\n  protected createField<\n    Args extends InputFieldMap,\n    Type extends TypeParam<Types>,\n    Nullable extends FieldNullability<Type>,\n  >(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options: PothosSchemaTypes.FieldOptions<Types, ParentShape, Type, Nullable, Args, any, {}>,\n  ): FieldRef<ShapeFromTypeParam<Types, Type, Nullable>, Kind> {\n    const ref: FieldRef<ShapeFromTypeParam<Types, Type, Nullable>, Kind> = new FieldRef(\n      this.kind,\n      this.typename,\n    );\n\n    this.builder.configStore.addFieldRef(\n      ref,\n      options.type,\n      options.args ?? {},\n      (name, parentField, typeConfig) => {\n        const args: Record<string, PothosInputFieldConfig<Types>> = {};\n\n        if (options.args) {\n          Object.keys(options.args).forEach((argName) => {\n            const argRef = options.args![argName];\n\n            args[argName] = this.builder.configStore.createFieldConfig(\n              argRef,\n              argName,\n              typeConfig,\n              name,\n              'Arg',\n            );\n          });\n        }\n\n        let resolve =\n          (options as { resolve?: (...argList: unknown[]) => unknown }).resolve ??\n          (() => {\n            throw new PothosSchemaError(\n              `Not implemented: No resolver found for ${this.typename}.${name}`,\n            );\n          });\n\n        if (options.extensions?.pothosExposedField === name) {\n          resolve = defaultFieldResolver as typeof resolve;\n        }\n\n        const { subscribe } = options as { subscribe?: (...argList: unknown[]) => unknown };\n\n        return {\n          kind: this.kind as never,\n          graphqlKind: this.graphqlKind,\n          parentType: typeConfig.name,\n          name,\n          args,\n          type: typeFromParam(\n            options.type,\n            this.builder.configStore,\n            options.nullable ?? this.builder.defaultFieldNullability,\n          ),\n          pothosOptions: options as never,\n          extensions: {\n            pothosOriginalResolve: resolve,\n            pothosOriginalSubscribe: subscribe,\n            ...options.extensions,\n          },\n          description: options.description,\n          deprecationReason: options.deprecationReason,\n          resolve,\n          subscribe,\n        };\n      },\n    );\n\n    return ref;\n  }\n\n  protected exposeField<\n    Type extends TypeParam<Types>,\n    Nullable extends FieldNullability<Type>,\n    Name extends string & keyof ParentShape,\n  >(\n    name: Name,\n    {\n      extensions,\n      ...options\n    }: Omit<\n      PothosSchemaTypes.ObjectFieldOptions<Types, ParentShape, Type, Nullable, {}, {}>,\n      'resolve'\n    >,\n  ): FieldRef<ShapeFromTypeParam<Types, Type, Nullable>, Kind> {\n    return this.createField({\n      ...options,\n      extensions: {\n        pothosExposedField: name,\n        ...extensions,\n      },\n      resolve: (parent) => (parent as Record<string, never>)[name as string],\n    });\n  }\n}\n", "import ListRef from '../refs/list';\nimport type { ArgBuilder, InputFieldMap, NormalizeArgs, ShapeFromTypeParam } from '../types';\nimport {\n  FieldKind,\n  FieldNullability,\n  FieldOptionsFromKind,\n  SchemaTypes,\n  TypeParam,\n} from '../types';\nimport BaseFieldUtil from './base';\nimport InputFieldBuilder from './input';\n\nexport default class RootFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n  Kind extends FieldKind = FieldKind,\n> extends BaseFieldUtil<Types, ParentShape, Kind> {\n  arg: ArgBuilder<Types> = new InputFieldBuilder<Types, 'Arg'>(\n    this.builder,\n    'Arg',\n    this.typename,\n  ).argBuilder();\n\n  /**\n   * Create a Boolean field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  boolean<\n    Args extends InputFieldMap,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'Boolean'> = Types['DefaultFieldNullability'],\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            'Boolean',\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, 'Boolean', Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: 'Boolean',\n    });\n  }\n\n  /**\n   * Create a Float field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  float<\n    Args extends InputFieldMap,\n    Nullable extends FieldNullability<'Float'>,\n    ResolveShape,\n    ResolveReturnShape,\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            'Float',\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, 'Float', Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: 'Float',\n    });\n  }\n\n  /**\n   * Create a ID field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  id<\n    Args extends InputFieldMap,\n    Nullable extends FieldNullability<'ID'>,\n    ResolveShape,\n    ResolveReturnShape,\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            'ID',\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, 'ID', Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: 'ID',\n    });\n  }\n\n  /**\n   * Create a Int field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  int<\n    Args extends InputFieldMap,\n    Nullable extends FieldNullability<'Int'>,\n    ResolveShape,\n    ResolveReturnShape,\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            'Int',\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, 'Int', Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: 'Int',\n    });\n  }\n\n  /**\n   * Create a String field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  string<\n    Args extends InputFieldMap,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<'String'> = Types['DefaultFieldNullability'],\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            'String',\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, 'String', Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: 'String',\n    });\n  }\n\n  /**\n   * Create a Boolean list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  booleanList<\n    Args extends InputFieldMap,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['Boolean']> = Types['DefaultFieldNullability'],\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            ['Boolean'],\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, ['Boolean'], Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: ['Boolean'],\n    });\n  }\n\n  /**\n   * Create a Float list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  floatList<\n    Args extends InputFieldMap,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['Float']> = Types['DefaultFieldNullability'],\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            ['Float'],\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, ['Float'], Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: ['Float'],\n    });\n  }\n\n  /**\n   * Create a ID list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  idList<\n    Args extends InputFieldMap,\n    Nullable extends FieldNullability<['ID']>,\n    ResolveShape,\n    ResolveReturnShape,\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            ['ID'],\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, ['ID'], Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: ['ID'],\n    });\n  }\n\n  /**\n   * Create a Int list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  intList<\n    Args extends InputFieldMap,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['Int']> = Types['DefaultFieldNullability'],\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            ['Int'],\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, ['Int'], Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: ['Int'],\n    });\n  }\n\n  /**\n   * Create a String list field\n   * @param {PothosSchemaTypes.FieldOptions} options - Options for this field\n   */\n  stringList<\n    Args extends InputFieldMap,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<['String']> = Types['DefaultFieldNullability'],\n  >(\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          FieldOptionsFromKind<\n            Types,\n            ParentShape,\n            ['String'],\n            Nullable,\n            Args,\n            Kind,\n            ResolveShape,\n            ResolveReturnShape\n          >,\n          'type'\n        >,\n      ]\n    >\n  ) {\n    const [options = {} as never] = args;\n\n    return this.createField<Args, ['String'], Nullable>({\n      resolve: undefined as never,\n      ...options,\n      type: ['String'],\n    });\n  }\n\n  /**\n   * create a new field for the current type\n   * @param {PothosSchemaTypes.FieldOptions} options - options for this field\n   */\n  field<\n    Args extends InputFieldMap,\n    Type extends TypeParam<Types>,\n    ResolveShape,\n    ResolveReturnShape,\n    Nullable extends FieldNullability<Type> = Types['DefaultFieldNullability'],\n  >(\n    options: FieldOptionsFromKind<\n      Types,\n      ParentShape,\n      Type,\n      Nullable,\n      Args,\n      Kind,\n      ResolveShape,\n      ResolveReturnShape\n    >,\n  ) {\n    return this.createField<Args, Type, Nullable>(options as never);\n  }\n\n  listRef<T extends TypeParam<Types>, Nullable extends boolean = false>(\n    type: T,\n    options?: { nullable?: Nullable },\n  ): ListRef<Types, ShapeFromTypeParam<Types, T, Nullable>[]> {\n    return new ListRef<Types, ShapeFromTypeParam<Types, T, Nullable>[]>(\n      type,\n      options?.nullable ?? false,\n    );\n  }\n}\n", "import { SchemaTypes } from '../types';\nimport RootFieldBuilder from './root';\n\nexport default class MutationFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> extends RootFieldBuilder<Types, ParentShape, 'Mutation'> {\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>) {\n    super('Mutation', builder, 'Mutation', 'Object');\n  }\n}\n", "import { SchemaTypes } from '../types';\nimport FieldBuilder from './builder';\n\nexport default class ObjectFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> extends FieldBuilder<Types, ParentShape, 'Object'> {\n  constructor(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>) {\n    super(name, builder, 'Object', 'Object');\n  }\n}\n", "import { SchemaTypes } from '../types';\nimport RootFieldBuilder from './root';\n\nexport default class QueryFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> extends RootFieldBuilder<Types, ParentShape, 'Query'> {\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>) {\n    super('Query', builder, 'Query', 'Object');\n  }\n}\n", "import { SchemaTypes } from '../types';\nimport RootFieldBuilder from './root';\n\nexport default class SubscriptionFieldBuilder<\n  Types extends SchemaTypes,\n  ParentShape,\n> extends RootFieldBuilder<Types, ParentShape, 'Subscription'> {\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>) {\n    super('Subscription', builder, 'Subscription', 'Object');\n  }\n}\n", "import { InputRef, inputShapeKey, OutputRef, outputShapeKey } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class EnumRef<T, U = T>\n  extends BaseTypeRef\n  implements OutputRef, InputRef, PothosSchemaTypes.EnumRef<T, U>\n{\n  override kind = 'Enum' as const;\n\n  $inferType!: T;\n\n  $inferInput!: U;\n\n  [outputShapeKey]!: T;\n\n  [inputShapeKey]!: U;\n\n  constructor(name: string) {\n    super('Enum', name);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport { InputFieldsFromShape, InputRef, inputShapeKey, SchemaTypes } from '../types';\nimport BaseTypeRef from './base';\n\nexport default class InputObjectRef<T>\n  extends BaseTypeRef\n  implements InputRef<T>, PothosSchemaTypes.InputObjectRef<T>\n{\n  override kind = 'InputObject' as const;\n\n  $inferInput!: T;\n\n  [inputShapeKey]!: T;\n\n  constructor(name: string) {\n    super('InputObject', name);\n  }\n}\n\nexport class ImplementableInputObjectRef<\n  Types extends SchemaTypes,\n  T extends object,\n  Resolved = T,\n> extends InputObjectRef<Resolved> {\n  protected builder: PothosSchemaTypes.SchemaBuilder<Types>;\n\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string) {\n    super(name);\n\n    this.builder = builder;\n  }\n\n  implement(options: PothosSchemaTypes.InputObjectTypeOptions<Types, InputFieldsFromShape<T>>) {\n    this.builder.inputType<ImplementableInputObjectRef<Types, T>, InputFieldsFromShape<T>>(\n      this as never,\n      options,\n    );\n\n    return this as InputObjectRef<Resolved>;\n  }\n}\n", "/* eslint-disable max-classes-per-file */\n\nimport {\n  InterfaceParam,\n  InterfaceTypeOptions,\n  OutputRef,\n  outputShapeKey,\n  parentShapeKey,\n  SchemaTypes,\n} from '../types';\nimport BaseTypeRef from './base';\n\nexport default class InterfaceRef<T, P = T>\n  extends BaseTypeRef\n  implements OutputRef, PothosSchemaTypes.InterfaceRef<T, P>\n{\n  override kind = 'Interface' as const;\n\n  $inferType!: T;\n\n  [outputShapeKey]!: T;\n\n  [parentShapeKey]!: P;\n\n  constructor(name: string) {\n    super('Interface', name);\n  }\n}\n\nexport class ImplementableInterfaceRef<\n  Types extends SchemaTypes,\n  Shape,\n  Parent = Shape,\n> extends InterfaceRef<Shape, Parent> {\n  protected builder: PothosSchemaTypes.SchemaBuilder<Types>;\n\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string) {\n    super(name);\n\n    this.builder = builder;\n  }\n\n  implement<Interfaces extends InterfaceParam<Types>[]>(\n    options: InterfaceTypeOptions<\n      Types,\n      ImplementableInterfaceRef<Types, Shape, Parent>,\n      Parent,\n      Interfaces\n    >,\n  ) {\n    return this.builder.interfaceType(this, options);\n  }\n}\n", "/* eslint-disable max-classes-per-file */\nimport {\n  InterfaceParam,\n  ObjectTypeOptions,\n  OutputRef,\n  outputShapeKey,\n  parentShapeKey,\n  SchemaTypes,\n} from '../types';\nimport BaseTypeRef from './base';\n\nexport default class ObjectRef<T, P = T>\n  extends BaseTypeRef\n  implements OutputRef, PothosSchemaTypes.ObjectRef<T, P>\n{\n  override kind = 'Object' as const;\n\n  $inferType!: T;\n\n  [outputShapeKey]!: T;\n\n  [parentShapeKey]!: P;\n\n  constructor(name: string) {\n    super('Object', name);\n  }\n}\n\nexport class ImplementableObjectRef<\n  Types extends SchemaTypes,\n  Shape,\n  Parent = Shape,\n> extends ObjectRef<Shape, Parent> {\n  protected builder: PothosSchemaTypes.SchemaBuilder<Types>;\n\n  constructor(builder: PothosSchemaTypes.SchemaBuilder<Types>, name: string) {\n    super(name);\n\n    this.builder = builder;\n  }\n\n  implement<Interfaces extends InterfaceParam<Types>[]>(\n    options: Omit<\n      ObjectTypeOptions<Types, ImplementableObjectRef<Types, Shape, Parent>, Parent, Interfaces>,\n      'name'\n    >,\n  ): PothosSchemaTypes.ObjectRef<Shape, Parent> {\n    return this.builder.objectType(\n      this,\n      options as ObjectTypeOptions<\n        Types,\n        ImplementableObjectRef<Types, Shape, Parent>,\n        Parent,\n        Interfaces\n      >,\n    );\n  }\n}\n", "import { OutputRef, outputShapeKey, parentShapeKey } from '../types/type-params';\nimport BaseTypeRef from './base';\n\nexport default class UnionRef<T, P = T>\n  extends BaseTypeRef\n  implements OutputRef, PothosSchemaTypes.UnionRef<T, P>\n{\n  override kind = 'Union' as const;\n\n  $inferType!: T;\n\n  [outputShapeKey]!: T;\n\n  [parentShapeKey]!: P;\n\n  constructor(name: string) {\n    super('Union', name);\n  }\n}\n", "import {\n  GraphQLBoolean,\n  GraphQLDirective,\n  GraphQLFloat,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLObjectType,\n  GraphQLScalarSerializer,\n  GraphQLScalarType,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLTypeResolver,\n  lexicographicSortSchema,\n} from 'graphql';\nimport BuildCache from './build-cache';\nimport ConfigStore from './config-store';\nimport { PothosError, PothosSchemaError } from './errors';\nimport InputFieldBuilder from './fieldUtils/input';\nimport InterfaceFieldBuilder from './fieldUtils/interface';\nimport MutationFieldBuilder from './fieldUtils/mutation';\nimport ObjectFieldBuilder from './fieldUtils/object';\nimport QueryFieldBuilder from './fieldUtils/query';\nimport SubscriptionFieldBuilder from './fieldUtils/subscription';\nimport BaseTypeRef from './refs/base';\nimport EnumRef from './refs/enum';\nimport InputObjectRef, { ImplementableInputObjectRef } from './refs/input-object';\nimport InterfaceRef, { ImplementableInterfaceRef } from './refs/interface';\nimport ObjectRef, { ImplementableObjectRef } from './refs/object';\nimport ScalarRef from './refs/scalar';\nimport UnionRef from './refs/union';\nimport type {\n  AbstractReturnShape,\n  BaseEnum,\n  EnumParam,\n  EnumTypeOptions,\n  EnumValues,\n  InputFieldMap,\n  InputFieldsFromShape,\n  InputShape,\n  InputShapeFromFields,\n  InterfaceFieldsShape,\n  InterfaceFieldThunk,\n  InterfaceParam,\n  InterfaceTypeOptions,\n  MutationFieldsShape,\n  MutationFieldThunk,\n  NormalizeArgs,\n  NormalizeSchemeBuilderOptions,\n  ObjectFieldsShape,\n  ObjectFieldThunk,\n  ObjectParam,\n  ObjectTypeOptions,\n  OutputShape,\n  OutputType,\n  ParentShape,\n  PluginConstructorMap,\n  PothosEnumTypeConfig,\n  PothosInputObjectTypeConfig,\n  PothosInterfaceTypeConfig,\n  PothosMutationTypeConfig,\n  PothosObjectTypeConfig,\n  PothosQueryTypeConfig,\n  PothosScalarTypeConfig,\n  PothosSubscriptionTypeConfig,\n  PothosUnionTypeConfig,\n  QueryFieldsShape,\n  QueryFieldThunk,\n  RecursivelyNormalizeNullableFields,\n  ScalarName,\n  SchemaTypes,\n  ShapeFromEnumValues,\n  SubscriptionFieldsShape,\n  SubscriptionFieldThunk,\n  ValuesFromEnum,\n} from './types';\nimport { normalizeEnumValues, valuesFromEnum, verifyInterfaces, verifyRef } from './utils';\n\nexport default class SchemaBuilder<Types extends SchemaTypes> {\n  static plugins: Partial<PluginConstructorMap<SchemaTypes>> = {};\n\n  static allowPluginReRegistration = false;\n\n  configStore: ConfigStore<Types>;\n\n  options: NormalizeSchemeBuilderOptions<Types>;\n\n  defaultFieldNullability: boolean;\n\n  defaultInputFieldRequiredness: boolean;\n\n  constructor(options: NormalizeSchemeBuilderOptions<Types>) {\n    this.options = options;\n\n    this.configStore = new ConfigStore<Types>();\n\n    this.defaultFieldNullability =\n      (\n        options as {\n          defaultFieldNullability?: boolean;\n        }\n      ).defaultFieldNullability ?? false;\n\n    this.defaultInputFieldRequiredness =\n      (\n        options as {\n          defaultInputFieldRequiredness?: boolean;\n        }\n      ).defaultInputFieldRequiredness ?? false;\n  }\n\n  static registerPlugin<T extends keyof PluginConstructorMap<SchemaTypes>>(\n    name: T,\n    plugin: PluginConstructorMap<SchemaTypes>[T],\n  ) {\n    if (!this.allowPluginReRegistration && this.plugins[name]) {\n      throw new PothosError(`Received multiple implementations for plugin ${name}`);\n    }\n\n    this.plugins[name] = plugin;\n  }\n\n  objectType<Interfaces extends InterfaceParam<Types>[], Param extends ObjectParam<Types>>(\n    param: Param,\n    options: ObjectTypeOptions<Types, Param, ParentShape<Types, Param>, Interfaces>,\n    fields?: ObjectFieldsShape<Types, ParentShape<Types, Param>>,\n  ) {\n    verifyRef(param);\n    verifyInterfaces(options.interfaces);\n\n    const name =\n      typeof param === 'string'\n        ? param\n        : (options as { name?: string }).name ?? (param as { name: string }).name;\n\n    if (name === 'Query' || name === 'Mutation' || name === 'Subscription') {\n      throw new PothosSchemaError(`Invalid object name ${name} use .create${name}Type() instead`);\n    }\n\n    const ref =\n      param instanceof BaseTypeRef\n        ? (param as ObjectRef<OutputShape<Types, Param>, ParentShape<Types, Param>>)\n        : new ObjectRef<OutputShape<Types, Param>, ParentShape<Types, Param>>(name);\n\n    const config: PothosObjectTypeConfig = {\n      kind: 'Object',\n      graphqlKind: 'Object',\n      name,\n      interfaces: [],\n      description: options.description,\n      extensions: options.extensions,\n      isTypeOf: options.isTypeOf,\n      pothosOptions: options as PothosSchemaTypes.ObjectTypeOptions,\n    };\n\n    this.configStore.addTypeConfig(config, ref);\n\n    if (options.interfaces) {\n      this.configStore.addInterfaces(name, options.interfaces);\n    }\n\n    if (typeof param === 'function') {\n      this.configStore.associateRefWithName(param, name);\n    }\n\n    if (fields) {\n      this.configStore.addFields(ref, () =>\n        fields(new ObjectFieldBuilder<Types, ParentShape<Types, Param>>(name, this)),\n      );\n    }\n\n    if (options.fields) {\n      this.configStore.addFields(ref, () => {\n        const t = new ObjectFieldBuilder<Types, ParentShape<Types, Param>>(name, this);\n\n        return options.fields!(t);\n      });\n    }\n\n    return ref;\n  }\n\n  objectFields<Type extends ObjectParam<Types>>(\n    ref: Type,\n    fields: ObjectFieldsShape<Types, ParentShape<Types, Type>>,\n  ) {\n    verifyRef(ref);\n    this.configStore.onTypeConfig(ref, ({ name }) => {\n      this.configStore.addFields(ref, () => fields(new ObjectFieldBuilder(name, this)));\n    });\n  }\n\n  objectField<Type extends ObjectParam<Types>>(\n    ref: Type,\n    fieldName: string,\n    field: ObjectFieldThunk<Types, ParentShape<Types, Type>>,\n  ) {\n    verifyRef(ref);\n    this.configStore.onTypeConfig(ref, ({ name }) => {\n      this.configStore.addFields(ref, () => ({\n        [fieldName]: field(new ObjectFieldBuilder(name, this)),\n      }));\n    });\n  }\n\n  queryType(\n    ...args: NormalizeArgs<\n      [options: PothosSchemaTypes.QueryTypeOptions<Types>, fields?: QueryFieldsShape<Types>],\n      0\n    >\n  ) {\n    const [options = {}, fields] = args;\n    const config: PothosQueryTypeConfig = {\n      kind: 'Query',\n      graphqlKind: 'Object',\n      name: 'Query',\n      description: options.description,\n      pothosOptions: options as unknown as PothosSchemaTypes.QueryTypeOptions,\n      extensions: options.extensions,\n    };\n\n    const ref = new ObjectRef<OutputShape<Types, 'Query'>, ParentShape<Types, 'Query'>>('Query');\n\n    this.configStore.addTypeConfig(config, ref);\n\n    if (fields) {\n      this.configStore.addFields('Query', () => fields(new QueryFieldBuilder(this)));\n    }\n\n    if (options.fields) {\n      this.configStore.addFields('Query', () => options.fields!(new QueryFieldBuilder(this)));\n    }\n\n    return ref;\n  }\n\n  queryFields(fields: QueryFieldsShape<Types>) {\n    this.configStore.addFields('Query', () => fields(new QueryFieldBuilder(this)));\n  }\n\n  queryField(name: string, field: QueryFieldThunk<Types>) {\n    this.configStore.addFields('Query', () => ({\n      [name]: field(new QueryFieldBuilder(this)),\n    }));\n  }\n\n  mutationType(\n    ...args: NormalizeArgs<\n      [options: PothosSchemaTypes.MutationTypeOptions<Types>, fields?: MutationFieldsShape<Types>],\n      0\n    >\n  ) {\n    const [options = {}, fields] = args;\n    const config: PothosMutationTypeConfig = {\n      kind: 'Mutation',\n      graphqlKind: 'Object',\n      name: 'Mutation',\n      description: options.description,\n      pothosOptions: options as unknown as PothosSchemaTypes.MutationTypeOptions,\n      extensions: options.extensions,\n    };\n\n    this.configStore.addTypeConfig(config);\n\n    if (fields) {\n      this.configStore.addFields('Mutation', () => fields(new MutationFieldBuilder(this)));\n    }\n\n    if (options.fields) {\n      this.configStore.addFields('Mutation', () => options.fields!(new MutationFieldBuilder(this)));\n    }\n  }\n\n  mutationFields(fields: MutationFieldsShape<Types>) {\n    this.configStore.addFields('Mutation', () => fields(new MutationFieldBuilder(this)));\n  }\n\n  mutationField(name: string, field: MutationFieldThunk<Types>) {\n    this.configStore.addFields('Mutation', () => ({\n      [name]: field(new MutationFieldBuilder(this)),\n    }));\n  }\n\n  subscriptionType(\n    ...args: NormalizeArgs<\n      [\n        options: PothosSchemaTypes.SubscriptionTypeOptions<Types>,\n        fields?: SubscriptionFieldsShape<Types>,\n      ],\n      0\n    >\n  ) {\n    const [options = {}, fields] = args;\n    const config: PothosSubscriptionTypeConfig = {\n      kind: 'Subscription',\n      graphqlKind: 'Object',\n      name: 'Subscription',\n      description: options.description,\n      pothosOptions: options as unknown as PothosSchemaTypes.SubscriptionTypeOptions,\n      extensions: options.extensions,\n    };\n\n    this.configStore.addTypeConfig(config);\n\n    if (fields) {\n      this.configStore.addFields('Subscription', () => fields(new SubscriptionFieldBuilder(this)));\n    }\n\n    if (options.fields) {\n      this.configStore.addFields('Subscription', () =>\n        options.fields!(new SubscriptionFieldBuilder(this)),\n      );\n    }\n  }\n\n  subscriptionFields(fields: SubscriptionFieldsShape<Types>) {\n    this.configStore.addFields('Subscription', () => fields(new SubscriptionFieldBuilder(this)));\n  }\n\n  subscriptionField(name: string, field: SubscriptionFieldThunk<Types>) {\n    this.configStore.addFields('Subscription', () => ({\n      [name]: field(new SubscriptionFieldBuilder(this)),\n    }));\n  }\n\n  args<Shape extends InputFieldMap>(\n    fields: (t: PothosSchemaTypes.InputFieldBuilder<Types, 'Arg'>) => Shape,\n  ): Shape {\n    return fields(new InputFieldBuilder<Types, 'Arg'>(this, 'Arg', '[unknown]'));\n  }\n\n  interfaceType<\n    Param extends InterfaceParam<Types>,\n    Interfaces extends InterfaceParam<Types>[],\n    ResolveType,\n  >(\n    param: Param,\n    options: InterfaceTypeOptions<Types, Param, ParentShape<Types, Param>, Interfaces, ResolveType>,\n    fields?: InterfaceFieldsShape<Types, ParentShape<Types, Param>>,\n  ) {\n    verifyRef(param);\n    verifyInterfaces(options.interfaces);\n\n    const name =\n      typeof param === 'string'\n        ? param\n        : (options as { name?: string }).name ?? (param as { name: string }).name;\n\n    const ref =\n      param instanceof BaseTypeRef\n        ? (param as InterfaceRef<\n            AbstractReturnShape<Types, Param, ResolveType>,\n            ParentShape<Types, Param>\n          >)\n        : new InterfaceRef<\n            AbstractReturnShape<Types, Param, ResolveType>,\n            ParentShape<Types, Param>\n          >(name);\n\n    const typename = ref.name;\n\n    const config: PothosInterfaceTypeConfig = {\n      kind: 'Interface',\n      graphqlKind: 'Interface',\n      name: typename,\n      interfaces: [],\n      description: options.description,\n      pothosOptions: options as unknown as PothosSchemaTypes.InterfaceTypeOptions,\n      extensions: options.extensions,\n      resolveType: options.resolveType as GraphQLTypeResolver<unknown, unknown>,\n    };\n\n    this.configStore.addTypeConfig(config, ref);\n\n    if (options.interfaces) {\n      this.configStore.addInterfaces(typename, options.interfaces);\n    }\n\n    if (typeof param === 'function') {\n      this.configStore.associateRefWithName(param, name);\n    }\n\n    if (fields) {\n      this.configStore.addFields(ref, () => fields(new InterfaceFieldBuilder(typename, this)));\n    }\n\n    if (options.fields) {\n      this.configStore.addFields(ref, () =>\n        options.fields!(new InterfaceFieldBuilder(typename, this)),\n      );\n    }\n\n    return ref;\n  }\n\n  interfaceFields<Type extends InterfaceParam<Types>>(\n    ref: Type,\n    fields: InterfaceFieldsShape<Types, ParentShape<Types, Type>>,\n  ) {\n    verifyRef(ref);\n    this.configStore.onTypeConfig(ref, ({ name }) => {\n      this.configStore.addFields(ref, () => fields(new InterfaceFieldBuilder(name, this)));\n    });\n  }\n\n  interfaceField<Type extends InterfaceParam<Types>>(\n    ref: Type,\n    fieldName: string,\n    field: InterfaceFieldThunk<Types, ParentShape<Types, Type>>,\n  ) {\n    verifyRef(ref);\n    this.configStore.onTypeConfig(ref, ({ name }) => {\n      this.configStore.addFields(ref, () => ({\n        [fieldName]: field(new InterfaceFieldBuilder(name, this)),\n      }));\n    });\n  }\n\n  unionType<Member extends ObjectParam<Types>, ResolveType>(\n    name: string,\n    options: PothosSchemaTypes.UnionTypeOptions<Types, Member, ResolveType>,\n  ) {\n    const ref = new UnionRef<\n      AbstractReturnShape<Types, Member, ResolveType>,\n      ParentShape<Types, Member>\n    >(name);\n\n    if (Array.isArray(options.types)) {\n      options.types.forEach((type) => {\n        verifyRef(type);\n      });\n    }\n\n    const config: PothosUnionTypeConfig = {\n      kind: 'Union',\n      graphqlKind: 'Union',\n      name,\n      types: [],\n      description: options.description,\n      resolveType: options.resolveType as GraphQLTypeResolver<unknown, object>,\n      pothosOptions: options as unknown as PothosSchemaTypes.UnionTypeOptions,\n      extensions: options.extensions,\n    };\n\n    this.configStore.addTypeConfig(config, ref);\n    this.configStore.addUnionTypes(name, options.types);\n\n    return ref;\n  }\n\n  enumType<Param extends EnumParam, Values extends EnumValues<Types>>(\n    param: Param,\n    options: EnumTypeOptions<Types, Param, Values>,\n  ) {\n    verifyRef(param);\n    const name = typeof param === 'string' ? param : (options as { name: string }).name;\n    const ref = new EnumRef<\n      Param extends BaseEnum ? ValuesFromEnum<Param> : ShapeFromEnumValues<Types, Values>\n    >(name);\n\n    const values =\n      typeof param === 'object'\n        ? valuesFromEnum<Types>(\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n            param as BaseEnum,\n            options?.values as Record<string, PothosSchemaTypes.EnumValueConfig<Types>>,\n          )\n        : normalizeEnumValues<Types>((options as { values: EnumValues<Types> }).values);\n\n    const config: PothosEnumTypeConfig = {\n      kind: 'Enum',\n      graphqlKind: 'Enum',\n      name,\n      values,\n      description: options.description,\n      pothosOptions: options as unknown as PothosSchemaTypes.EnumTypeOptions<Types>,\n      extensions: options.extensions,\n    };\n\n    this.configStore.addTypeConfig(config, ref);\n\n    if (typeof param !== 'string') {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      this.configStore.associateRefWithName(param as BaseEnum, name);\n    }\n\n    return ref;\n  }\n\n  scalarType<Name extends ScalarName<Types>>(\n    name: Name,\n    options: PothosSchemaTypes.ScalarTypeOptions<\n      Types,\n      InputShape<Types, Name>,\n      ParentShape<Types, Name>\n    >,\n  ) {\n    const ref = new ScalarRef<InputShape<Types, Name>, ParentShape<Types, Name>>(name);\n\n    const config: PothosScalarTypeConfig = {\n      kind: 'Scalar',\n      graphqlKind: 'Scalar',\n      name,\n      description: options.description,\n      parseLiteral: options.parseLiteral,\n      parseValue: options.parseValue,\n      serialize: options.serialize as GraphQLScalarSerializer<OutputShape<Types, Name>>,\n      pothosOptions: options as unknown as PothosSchemaTypes.ScalarTypeOptions,\n      extensions: options.extensions,\n    };\n\n    this.configStore.addTypeConfig(config, ref);\n\n    return ref;\n  }\n\n  addScalarType<Name extends ScalarName<Types>>(\n    name: Name,\n    scalar: GraphQLScalarType,\n    ...args: NormalizeArgs<\n      [\n        options: Omit<\n          PothosSchemaTypes.ScalarTypeOptions<\n            Types,\n            InputShape<Types, Name>,\n            OutputShape<Types, Name>\n          >,\n          'serialize'\n        > & {\n          serialize?: GraphQLScalarSerializer<OutputShape<Types, Name>>;\n        },\n      ]\n    >\n  ) {\n    const [options = {}] = args;\n    const config = scalar.toConfig();\n\n    return this.scalarType<Name>(name, {\n      ...config,\n      ...options,\n      extensions: {\n        ...config.extensions,\n        ...options.extensions,\n      },\n    } as PothosSchemaTypes.ScalarTypeOptions<\n      Types,\n      InputShape<Types, Name>,\n      ParentShape<Types, Name>\n    >);\n  }\n\n  inputType<\n    Param extends InputObjectRef<unknown> | string,\n    Fields extends Param extends PothosSchemaTypes.InputObjectRef<unknown>\n      ? InputFieldsFromShape<InputShape<Types, Param>>\n      : Param extends keyof Types['Inputs']\n        ? InputFieldsFromShape<InputShape<Types, Param>>\n        : InputFieldMap,\n  >(\n    param: Param,\n    options: PothosSchemaTypes.InputObjectTypeOptions<Types, Fields>,\n  ): PothosSchemaTypes.InputObjectRef<InputShapeFromFields<Fields>> {\n    verifyRef(param);\n    const name = typeof param === 'string' ? param : (param as { name: string }).name;\n\n    const ref = (\n      typeof param === 'string' ? new InputObjectRef<InputShapeFromFields<Fields>>(name) : param\n    ) as PothosSchemaTypes.InputObjectRef<InputShapeFromFields<Fields>>;\n\n    const config: PothosInputObjectTypeConfig & { isOneOf?: boolean } = {\n      kind: 'InputObject',\n      graphqlKind: 'InputObject',\n      name,\n      isOneOf: options.isOneOf,\n      description: options.description,\n      pothosOptions: options as unknown as PothosSchemaTypes.InputObjectTypeOptions,\n      extensions: options.extensions,\n    };\n\n    this.configStore.addTypeConfig(config, ref);\n\n    this.configStore.addFields(ref, () =>\n      options.fields(new InputFieldBuilder(this, 'InputObject', name)),\n    );\n\n    return ref;\n  }\n\n  inputRef<T extends object, Normalize = true>(\n    name: string,\n  ): ImplementableInputObjectRef<\n    Types,\n    RecursivelyNormalizeNullableFields<T>,\n    Normalize extends false ? T : RecursivelyNormalizeNullableFields<T>\n  > {\n    return new ImplementableInputObjectRef<\n      Types,\n      RecursivelyNormalizeNullableFields<T>,\n      Normalize extends false ? T : RecursivelyNormalizeNullableFields<T>\n    >(this, name);\n  }\n\n  objectRef<T>(name: string): ImplementableObjectRef<Types, T> {\n    return new ImplementableObjectRef<Types, T>(this, name);\n  }\n\n  interfaceRef<T>(name: string): ImplementableInterfaceRef<Types, T> {\n    return new ImplementableInterfaceRef<Types, T>(this, name);\n  }\n\n  toSchema(...args: NormalizeArgs<[options?: PothosSchemaTypes.BuildSchemaOptions<Types>]>) {\n    const [options = {}] = args;\n    const { directives, extensions } = options;\n\n    const scalars = [GraphQLID, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean];\n    scalars.forEach((scalar) => {\n      if (!this.configStore.hasConfig(scalar.name as OutputType<Types>)) {\n        this.addScalarType(scalar.name as ScalarName<Types>, scalar);\n      }\n    });\n\n    const buildCache = new BuildCache(this, options);\n\n    buildCache.plugin.beforeBuild();\n\n    buildCache.buildAll();\n\n    const builtTypes = [...buildCache.types.values()];\n\n    const schema = new GraphQLSchema({\n      query: buildCache.types.get('Query') as GraphQLObjectType | undefined,\n      mutation: buildCache.types.get('Mutation') as GraphQLObjectType | undefined,\n      subscription: buildCache.types.get('Subscription') as GraphQLObjectType | undefined,\n      extensions: extensions ?? {},\n      directives: directives as GraphQLDirective[],\n      types: builtTypes,\n    });\n\n    const processedSchema = buildCache.plugin.afterBuild(schema);\n\n    return options.sortSchema === false\n      ? processedSchema\n      : lexicographicSortSchema(processedSchema);\n  }\n}\n", "// src/index.ts\nimport { Hono } from \"./hono.js\";\nexport {\n  Hono\n};\n", "// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n", "var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { HTTPException } from \"./http-exception.js\";\nimport { HonoRequest } from \"./request.js\";\nimport { METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE, METHODS } from \"./router.js\";\nimport { getPath, getPathNoStrict, getQueryStrings, mergePath } from \"./utils/url.js\";\nvar COMPOSED_HANDLER = Symbol(\"composedHandler\");\nfunction defineDynamicClass() {\n  return class {\n  };\n}\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (err instanceof HTTPException) {\n    return err.getResponse();\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar _path;\nvar _Hono = class extends defineDynamicClass() {\n  constructor(options = {}) {\n    super();\n    this._basePath = \"/\";\n    __privateAdd(this, _path, \"/\");\n    this.routes = [];\n    this.notFoundHandler = notFoundHandler;\n    this.errorHandler = errorHandler;\n    this.onError = (handler) => {\n      this.errorHandler = handler;\n      return this;\n    };\n    this.notFound = (handler) => {\n      this.notFoundHandler = handler;\n      return this;\n    };\n    this.fetch = (request, Env, executionCtx) => {\n      return this.dispatch(request, executionCtx, Env, request.method);\n    };\n    this.request = (input, requestInit, Env, executionCtx) => {\n      if (input instanceof Request) {\n        if (requestInit !== void 0) {\n          input = new Request(input, requestInit);\n        }\n        return this.fetch(input, Env, executionCtx);\n      }\n      input = input.toString();\n      const path = /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`;\n      const req = new Request(path, requestInit);\n      return this.fetch(req, Env, executionCtx);\n    };\n    this.fire = () => {\n      addEventListener(\"fetch\", (event) => {\n        event.respondWith(this.dispatch(event.request, event, void 0, event.request.method));\n      });\n    };\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.map((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          __privateSet(this, _path, args1);\n        } else {\n          this.addRoute(method, __privateGet(this, _path), args1);\n        }\n        args.map((handler) => {\n          if (typeof handler !== \"string\") {\n            this.addRoute(method, __privateGet(this, _path), handler);\n          }\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      if (!method) {\n        return this;\n      }\n      for (const p of [path].flat()) {\n        __privateSet(this, _path, p);\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.addRoute(m.toUpperCase(), __privateGet(this, _path), handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        __privateSet(this, _path, arg1);\n      } else {\n        __privateSet(this, _path, \"*\");\n        handlers.unshift(arg1);\n      }\n      handlers.map((handler) => {\n        this.addRoute(METHOD_NAME_ALL, __privateGet(this, _path), handler);\n      });\n      return this;\n    };\n    const strict = options.strict ?? true;\n    delete options.strict;\n    Object.assign(this, options);\n    this.getPath = strict ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  clone() {\n    const clone = new _Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.routes = this.routes;\n    return clone;\n  }\n  route(path, app) {\n    const subApp = this.basePath(path);\n    if (!app) {\n      return subApp;\n    }\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  mount(path, applicationHandler, optionHandler) {\n    const mergedPath = mergePath(this._basePath, path);\n    const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n    const handler = async (c, next) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      const options = optionHandler ? optionHandler(c) : [c.env, executionContext];\n      const optionsArray = Array.isArray(options) ? options : [options];\n      const queryStrings = getQueryStrings(c.req.url);\n      const res = await applicationHandler(\n        new Request(\n          new URL((c.req.path.slice(pathPrefixLength) || \"/\") + queryStrings, c.req.url),\n          c.req.raw\n        ),\n        ...optionsArray\n      );\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  matchRoute(method, path) {\n    return this.router.match(method, path);\n  }\n  handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.matchRoute(method, path);\n    const c = new Context(new HonoRequest(request, path, matchResult), {\n      env,\n      executionCtx,\n      notFoundHandler: this.notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.notFoundHandler(c))\n      ).catch((err) => this.handleError(err, c)) : res;\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. You may forget returning Response object or `await next()`\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.handleError(err, c);\n      }\n    })();\n  }\n};\nvar Hono = _Hono;\n_path = new WeakMap();\nexport {\n  COMPOSED_HANDLER,\n  Hono as HonoBase\n};\n", "// src/compose.ts\nimport { Context } from \"./context.js\";\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        if (context instanceof Context) {\n          context.req.routeIndex = i;\n        }\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (!handler) {\n        if (context instanceof Context && context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      } else {\n        try {\n          res = await handler(context, () => {\n            return dispatch(i + 1);\n          });\n        } catch (err) {\n          if (err instanceof Error && context instanceof Context && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n", "var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/context.ts\nimport { resolveCallback, HtmlEscapedCallbackPhase } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setHeaders = (headers, map = {}) => {\n  Object.entries(map).forEach(([key, value]) => headers.set(key, value));\n  return headers;\n};\nvar _status, _executionCtx, _headers, _preparedHeaders, _res, _isFresh;\nvar Context = class {\n  constructor(req, options) {\n    this.env = {};\n    this._var = {};\n    this.finalized = false;\n    this.error = void 0;\n    __privateAdd(this, _status, 200);\n    __privateAdd(this, _executionCtx, void 0);\n    __privateAdd(this, _headers, void 0);\n    __privateAdd(this, _preparedHeaders, void 0);\n    __privateAdd(this, _res, void 0);\n    __privateAdd(this, _isFresh, true);\n    this.layout = void 0;\n    this.renderer = (content) => this.html(content);\n    this.notFoundHandler = () => new Response();\n    this.render = (...args) => this.renderer(...args);\n    this.setLayout = (layout) => this.layout = layout;\n    this.getLayout = () => this.layout;\n    this.setRenderer = (renderer) => {\n      this.renderer = renderer;\n    };\n    this.header = (name, value, options) => {\n      if (value === void 0) {\n        if (__privateGet(this, _headers)) {\n          __privateGet(this, _headers).delete(name);\n        } else if (__privateGet(this, _preparedHeaders)) {\n          delete __privateGet(this, _preparedHeaders)[name.toLocaleLowerCase()];\n        }\n        if (this.finalized) {\n          this.res.headers.delete(name);\n        }\n        return;\n      }\n      if (options?.append) {\n        if (!__privateGet(this, _headers)) {\n          __privateSet(this, _isFresh, false);\n          __privateSet(this, _headers, new Headers(__privateGet(this, _preparedHeaders)));\n          __privateSet(this, _preparedHeaders, {});\n        }\n        __privateGet(this, _headers).append(name, value);\n      } else {\n        if (__privateGet(this, _headers)) {\n          __privateGet(this, _headers).set(name, value);\n        } else {\n          __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n          __privateGet(this, _preparedHeaders)[name.toLowerCase()] = value;\n        }\n      }\n      if (this.finalized) {\n        if (options?.append) {\n          this.res.headers.append(name, value);\n        } else {\n          this.res.headers.set(name, value);\n        }\n      }\n    };\n    this.status = (status) => {\n      __privateSet(this, _isFresh, false);\n      __privateSet(this, _status, status);\n    };\n    this.set = (key, value) => {\n      this._var ?? (this._var = {});\n      this._var[key] = value;\n    };\n    this.get = (key) => {\n      return this._var ? this._var[key] : void 0;\n    };\n    this.newResponse = (data, arg, headers) => {\n      if (__privateGet(this, _isFresh) && !headers && !arg && __privateGet(this, _status) === 200) {\n        return new Response(data, {\n          headers: __privateGet(this, _preparedHeaders)\n        });\n      }\n      if (arg && typeof arg !== \"number\") {\n        const headers2 = setHeaders(new Headers(arg.headers), __privateGet(this, _preparedHeaders));\n        return new Response(data, {\n          headers: headers2,\n          status: arg.status ?? __privateGet(this, _status)\n        });\n      }\n      const status = typeof arg === \"number\" ? arg : __privateGet(this, _status);\n      __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n      __privateGet(this, _headers) ?? __privateSet(this, _headers, new Headers());\n      setHeaders(__privateGet(this, _headers), __privateGet(this, _preparedHeaders));\n      if (__privateGet(this, _res)) {\n        __privateGet(this, _res).headers.forEach((v, k) => {\n          __privateGet(this, _headers)?.set(k, v);\n        });\n        setHeaders(__privateGet(this, _headers), __privateGet(this, _preparedHeaders));\n      }\n      headers ?? (headers = {});\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          __privateGet(this, _headers).set(k, v);\n        } else {\n          __privateGet(this, _headers).delete(k);\n          for (const v2 of v) {\n            __privateGet(this, _headers).append(k, v2);\n          }\n        }\n      }\n      return new Response(data, {\n        status,\n        headers: __privateGet(this, _headers)\n      });\n    };\n    this.body = (data, arg, headers) => {\n      return typeof arg === \"number\" ? this.newResponse(data, arg, headers) : this.newResponse(data, arg);\n    };\n    this.text = (text, arg, headers) => {\n      if (!__privateGet(this, _preparedHeaders)) {\n        if (__privateGet(this, _isFresh) && !headers && !arg) {\n          return new Response(text);\n        }\n        __privateSet(this, _preparedHeaders, {});\n      }\n      __privateGet(this, _preparedHeaders)[\"content-type\"] = TEXT_PLAIN;\n      return typeof arg === \"number\" ? this.newResponse(text, arg, headers) : this.newResponse(text, arg);\n    };\n    this.json = (object, arg, headers) => {\n      const body = JSON.stringify(object);\n      __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n      __privateGet(this, _preparedHeaders)[\"content-type\"] = \"application/json; charset=UTF-8\";\n      return typeof arg === \"number\" ? this.newResponse(body, arg, headers) : this.newResponse(body, arg);\n    };\n    this.html = (html, arg, headers) => {\n      __privateGet(this, _preparedHeaders) ?? __privateSet(this, _preparedHeaders, {});\n      __privateGet(this, _preparedHeaders)[\"content-type\"] = \"text/html; charset=UTF-8\";\n      if (typeof html === \"object\") {\n        if (!(html instanceof Promise)) {\n          html = html.toString();\n        }\n        if (html instanceof Promise) {\n          return html.then((html2) => resolveCallback(html2, HtmlEscapedCallbackPhase.Stringify, false, {})).then((html2) => {\n            return typeof arg === \"number\" ? this.newResponse(html2, arg, headers) : this.newResponse(html2, arg);\n          });\n        }\n      }\n      return typeof arg === \"number\" ? this.newResponse(html, arg, headers) : this.newResponse(html, arg);\n    };\n    this.redirect = (location, status = 302) => {\n      __privateGet(this, _headers) ?? __privateSet(this, _headers, new Headers());\n      __privateGet(this, _headers).set(\"Location\", location);\n      return this.newResponse(null, status);\n    };\n    this.notFound = () => {\n      return this.notFoundHandler(this);\n    };\n    this.req = req;\n    if (options) {\n      __privateSet(this, _executionCtx, options.executionCtx);\n      this.env = options.env;\n      if (options.notFoundHandler) {\n        this.notFoundHandler = options.notFoundHandler;\n      }\n    }\n  }\n  get event() {\n    if (__privateGet(this, _executionCtx) && \"respondWith\" in __privateGet(this, _executionCtx)) {\n      return __privateGet(this, _executionCtx);\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (__privateGet(this, _executionCtx)) {\n      return __privateGet(this, _executionCtx);\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    __privateSet(this, _isFresh, false);\n    return __privateGet(this, _res) || __privateSet(this, _res, new Response(\"404 Not Found\", { status: 404 }));\n  }\n  set res(_res2) {\n    __privateSet(this, _isFresh, false);\n    if (__privateGet(this, _res) && _res2) {\n      __privateGet(this, _res).headers.delete(\"content-type\");\n      for (const [k, v] of __privateGet(this, _res).headers.entries()) {\n        if (k === \"set-cookie\") {\n          const cookies = __privateGet(this, _res).headers.getSetCookie();\n          _res2.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res2.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res2.headers.set(k, v);\n        }\n      }\n    }\n    __privateSet(this, _res, _res2);\n    this.finalized = true;\n  }\n  get var() {\n    return { ...this._var };\n  }\n};\n_status = new WeakMap();\n_executionCtx = new WeakMap();\n_headers = new WeakMap();\n_preparedHeaders = new WeakMap();\n_res = new WeakMap();\n_isFresh = new WeakMap();\nexport {\n  Context,\n  TEXT_PLAIN\n};\n", "// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer) => {\n  let str = \"\";\n  const callbacks = [];\n  for (let i = buffer.length - 1; ; i--) {\n    str += buffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = await buffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  stringBufferToString\n};\n", "// src/http-exception.ts\nvar HTTPException = class extends Error {\n  constructor(status = 500, options) {\n    super(options?.message);\n    this.res = options?.res;\n    this.status = status;\n  }\n  getResponse() {\n    if (this.res) {\n      return this.res;\n    }\n    return new Response(this.message, {\n      status: this.status\n    });\n  }\n};\nexport {\n  HTTPException\n};\n", "var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\n\n// src/request.ts\nimport { parseBody } from \"./utils/body.js\";\nimport { getQueryParam, getQueryParams, decodeURIComponent_ } from \"./utils/url.js\";\nvar _validatedData, _matchResult;\nvar HonoRequest = class {\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    __privateAdd(this, _validatedData, void 0);\n    __privateAdd(this, _matchResult, void 0);\n    this.routeIndex = 0;\n    this.bodyCache = {};\n    this.cachedBody = (key) => {\n      const { bodyCache, raw } = this;\n      const cachedBody = bodyCache[key];\n      if (cachedBody) {\n        return cachedBody;\n      }\n      if (bodyCache.arrayBuffer) {\n        return (async () => {\n          return await new Response(bodyCache.arrayBuffer)[key]();\n        })();\n      }\n      return bodyCache[key] = raw[key]();\n    };\n    this.raw = request;\n    this.path = path;\n    __privateSet(this, _matchResult, matchResult);\n    __privateSet(this, _validatedData, {});\n  }\n  param(key) {\n    return key ? this.getDecodedParam(key) : this.getAllDecodedParams();\n  }\n  getDecodedParam(key) {\n    const paramKey = __privateGet(this, _matchResult)[0][this.routeIndex][1][key];\n    const param = this.getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? decodeURIComponent_(param) : param : void 0;\n  }\n  getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(__privateGet(this, _matchResult)[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.getParamValue(__privateGet(this, _matchResult)[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? decodeURIComponent_(value) : value;\n      }\n    }\n    return decoded;\n  }\n  getParamValue(paramKey) {\n    return __privateGet(this, _matchResult)[1] ? __privateGet(this, _matchResult)[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name.toLowerCase()) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    if (this.bodyCache.parsedBody) {\n      return this.bodyCache.parsedBody;\n    }\n    const parsedBody = await parseBody(this, options);\n    this.bodyCache.parsedBody = parsedBody;\n    return parsedBody;\n  }\n  json() {\n    return this.cachedBody(\"json\");\n  }\n  text() {\n    return this.cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.cachedBody(\"blob\");\n  }\n  formData() {\n    return this.cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    __privateGet(this, _validatedData)[target] = data;\n  }\n  valid(target) {\n    return __privateGet(this, _validatedData)[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get matchedRoutes() {\n    return __privateGet(this, _matchResult)[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return __privateGet(this, _matchResult)[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\n_validatedData = new WeakMap();\n_matchResult = new WeakMap();\nexport {\n  HonoRequest\n};\n", "// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = { all: false }) => {\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (isFormDataContent(contentType)) {\n    return parseFormData(request, options);\n  }\n  return {};\n};\nfunction isFormDataContent(contentType) {\n  if (contentType === null) {\n    return false;\n  }\n  return contentType.startsWith(\"multipart/form-data\") || contentType.startsWith(\"application/x-www-form-urlencoded\");\n}\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = {};\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] && isArrayField(form[key])) {\n    appendToExistingArray(form[key], value);\n  } else if (form[key]) {\n    convertToNewArray(form, key, value);\n  } else {\n    form[key] = value;\n  }\n};\nfunction isArrayField(field) {\n  return Array.isArray(field);\n}\nvar appendToExistingArray = (arr, value) => {\n  arr.push(value);\n};\nvar convertToNewArray = (form, key, value) => {\n  form[key] = [form[key], value];\n};\nexport {\n  parseBody\n};\n", "// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    if (!patternCache[label]) {\n      if (match[2]) {\n        patternCache[label] = [label, match[1], new RegExp(\"^\" + match[2] + \"$\")];\n      } else {\n        patternCache[label] = [label, match[1], true];\n      }\n    }\n    return patternCache[label];\n  }\n  return null;\n};\nvar getPath = (request) => {\n  const match = request.url.match(/^https?:\\/\\/[^/]+(\\/[^?]*)/);\n  return match ? match[1] : \"\";\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result[result.length - 1] === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (...paths) => {\n  let p = \"\";\n  let endsWithSlash = false;\n  for (let path of paths) {\n    if (p[p.length - 1] === \"/\") {\n      p = p.slice(0, -1);\n      endsWithSlash = true;\n    }\n    if (path[0] !== \"/\") {\n      path = `/${path}`;\n    }\n    if (path === \"/\" && endsWithSlash) {\n      p = `${p}/`;\n    } else if (path !== \"/\") {\n      p = `${p}${path}`;\n    }\n    if (path === \"/\" && p === \"\") {\n      p = \"/\";\n    }\n  }\n  return p;\n};\nvar checkOptionalParameter = (path) => {\n  if (!path.match(/\\:.+\\?$/)) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return /%/.test(value) ? decodeURIComponent_(value) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ?? (encoded = /[%+]/.test(url));\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ?? (results[name] = value);\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath\n};\n", "// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n", "// src/router/reg-exp-router/index.ts\nimport { RegExpRouter } from \"./router.js\";\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/router.ts\nimport {\n  METHOD_NAME_ALL,\n  UnsupportedPathError,\n  MESSAGE_MATCHER_IS_ALREADY_BUILT\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], {}];\nvar wildcardRegExpCache = {};\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ?? (wildcardRegExpCache[path] = new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(/\\/\\*/, \"(?:|/.*)\")}$`\n  ));\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = {};\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = {};\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, {}]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = {};\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  constructor() {\n    this.name = \"RegExpRouter\";\n    this.middleware = { [METHOD_NAME_ALL]: {} };\n    this.routes = { [METHOD_NAME_ALL]: {} };\n  }\n  add(method, path, handler) {\n    var _a;\n    const { middleware, routes } = this;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = {};\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          var _a2;\n          (_a2 = middleware[m])[path] || (_a2[path] = findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || []);\n        });\n      } else {\n        (_a = middleware[method])[path] || (_a[path] = findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || []);\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        var _a2;\n        if (method === METHOD_NAME_ALL || method === m) {\n          (_a2 = routes[m])[path2] || (_a2[path2] = [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ]);\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  buildAllMatchers() {\n    const matchers = {};\n    [...Object.keys(this.routes), ...Object.keys(this.middleware)].forEach((method) => {\n      matchers[method] || (matchers[method] = this.buildMatcher(method));\n    });\n    this.middleware = this.routes = void 0;\n    return matchers;\n  }\n  buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.middleware, this.routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute || (hasOwnRoute = true);\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n", "// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  constructor() {\n    this.children = {};\n  }\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.varIndex]);\n      }\n    } else {\n      node = this.children[token];\n      if (!node) {\n        if (Object.keys(this.children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.children[k];\n      return (typeof c.varIndex === \"number\" ? `(${k})@${c.varIndex}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.index === \"number\") {\n      strList.unshift(`#${this.index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n", "// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  constructor() {\n    this.context = { varIndex: 0 };\n    this.root = new Node();\n  }\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.root.insert(tokens, index, paramAssoc, this.context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (typeof handlerIndex !== \"undefined\") {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (typeof paramIndex !== \"undefined\") {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n", "// src/router/smart-router/index.ts\nimport { SmartRouter } from \"./router.js\";\nexport {\n  SmartRouter\n};\n", "// src/router/smart-router/router.ts\nimport { UnsupportedPathError, MESSAGE_MATCHER_IS_ALREADY_BUILT } from \"../../router.js\";\nvar SmartRouter = class {\n  constructor(init) {\n    this.name = \"SmartRouter\";\n    this.routers = [];\n    this.routes = [];\n    Object.assign(this, init);\n  }\n  add(method, path, handler) {\n    if (!this.routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const { routers, routes } = this;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        routes.forEach((args) => {\n          router.add(...args);\n        });\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.routers = [router];\n      this.routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.routes || this.routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n", "// src/router/trie-router/index.ts\nimport { TrieRouter } from \"./router.js\";\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  constructor() {\n    this.name = \"TrieRouter\";\n    this.node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (const p of results) {\n        this.node.insert(method, p, handler);\n      }\n      return;\n    }\n    this.node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n", "// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { splitPath, splitRoutingPath, getPattern } from \"../../utils/url.js\";\nvar Node = class {\n  constructor(method, handler, children) {\n    this.order = 0;\n    this.params = {};\n    this.children = children || {};\n    this.methods = [];\n    this.name = \"\";\n    if (method && handler) {\n      const m = {};\n      m[method] = { handler, possibleKeys: [], score: 0, name: this.name };\n      this.methods = [m];\n    }\n    this.patterns = [];\n  }\n  insert(method, path, handler) {\n    this.name = `${method} ${path}`;\n    this.order = ++this.order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    const parentPatterns = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      if (Object.keys(curNode.children).includes(p)) {\n        parentPatterns.push(...curNode.patterns);\n        curNode = curNode.children[p];\n        const pattern2 = getPattern(p);\n        if (pattern2) {\n          possibleKeys.push(pattern2[1]);\n        }\n        continue;\n      }\n      curNode.children[p] = new Node();\n      const pattern = getPattern(p);\n      if (pattern) {\n        curNode.patterns.push(pattern);\n        parentPatterns.push(...curNode.patterns);\n        possibleKeys.push(pattern[1]);\n      }\n      parentPatterns.push(...curNode.patterns);\n      curNode = curNode.children[p];\n    }\n    if (!curNode.methods.length) {\n      curNode.methods = [];\n    }\n    const m = {};\n    const handlerSet = {\n      handler,\n      possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n      name: this.name,\n      score: this.order\n    };\n    m[method] = handlerSet;\n    curNode.methods.push(m);\n    return curNode;\n  }\n  gHSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.methods.length; i < len; i++) {\n      const m = node.methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = {};\n        handlerSet.possibleKeys.forEach((key) => {\n          const processed = processedSet[handlerSet.name];\n          handlerSet.params[key] = params[key] && !processed ? params[key] : nodeParams[key] ?? params[key];\n          processedSet[handlerSet.name] = true;\n        });\n        handlerSets.push(handlerSet);\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.params = {};\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.children[part];\n        if (nextNode) {\n          nextNode.params = node.params;\n          if (isLast === true) {\n            if (nextNode.children[\"*\"]) {\n              handlerSets.push(...this.gHSets(nextNode.children[\"*\"], method, node.params, {}));\n            }\n            handlerSets.push(...this.gHSets(nextNode, method, node.params, {}));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.patterns.length; k < len3; k++) {\n          const pattern = node.patterns[k];\n          const params = { ...node.params };\n          if (pattern === \"*\") {\n            const astNode = node.children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.gHSets(astNode, method, node.params, {}));\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          if (part === \"\") {\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          const child = node.children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp && matcher.test(restPathString)) {\n            params[name] = restPathString;\n            handlerSets.push(...this.gHSets(child, method, node.params, params));\n            continue;\n          }\n          if (matcher === true || matcher instanceof RegExp && matcher.test(part)) {\n            if (typeof key === \"string\") {\n              params[name] = part;\n              if (isLast === true) {\n                handlerSets.push(...this.gHSets(child, method, params, node.params));\n                if (child.children[\"*\"]) {\n                  handlerSets.push(...this.gHSets(child.children[\"*\"], method, params, node.params));\n                }\n              } else {\n                child.params = params;\n                tempNodes.push(child);\n              }\n            }\n          }\n        }\n      }\n      curNodes = tempNodes;\n    }\n    const results = handlerSets.sort((a, b) => {\n      return a.score - b.score;\n    });\n    return [results.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\nexport const wrap = undefined;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\nexport const wrap = undefined;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["isWhiteSpace", "val", "val", "entityName", "val", "val", "parseValue", "result", "entityName", "val", "attStr", "val", "XMLBuilder", "OperationTypeNode", "DirectiveLocation", "Kind", "indent", "TokenKind", "instanceOf", "isDigit", "parseValue", "schema", "schema", "TypeKind", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "_path", "schema", "schema", "schema", "errorPrefix", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "schema", "collectSubfields", "schema", "sortFields", "MAX_RECURSIVE_DEPTH", "inspect", "formatValue", "formatObjectValue", "formatError", "formatArray", "isJSONable", "formatObject", "getObjectTag", "isIterableObject", "isObjectLike", "isPromise", "hasOwnProperty", "getArgumentValues", "inspect", "hasOwnProperty", "memoize3", "cache3", "cache3", "cache4", "cache5", "schema", "getRootTypeNames", "getRootTypes", "getRootTypeMap", "isPromise", "collectFieldsImpl", "schema", "shouldIncludeNode", "getFieldEntryKey", "doesFragmentConditionMatch", "collectFields", "collectSubfields", "addPath", "pathToArray", "printPathArray", "val", "endResponse", "schema", "mapAsyncIterator", "isAsyncIterable", "schema", "parse", "validate", "execute", "subscribe", "err", "isAsyncIterable", "mapAsyncIterator", "result", "isGraphQLError", "isOriginalGraphQLError", "isDev", "maskError", "invariant", "getVariableValues", "schema", "hasOwnProperty", "inspect", "printPathArray", "collectSubfields", "memoize3", "execute", "getFragmentsFromDocument", "schema", "getVariableValues", "defaultFieldResolver", "defaultTypeResolver", "collectFields", "addPath", "pathToArray", "isPromise", "getFieldDef", "getArgumentValues", "inspect", "invariant", "isIterableObject", "collectSubfields", "isObjectLike", "subscribe", "subscribe", "execute", "isAsyncIterable", "isAsyncIterable", "val", "descriptors", "isPromise", "originalCtx", "handleRequest", "response", "isPromise", "endResponse", "import_fetch", "DefaultResponseCtor", "errorHandler", "isPromise", "import_fetch", "import_fetch", "val", "val", "endResponse", "val", "v", "bf", "schema", "sanitizedResult", "stringifier", "isAsyncIterable", "isAsyncIterable", "isAsyncIterable", "endResponse", "isDev", "PothosError", "GraphQLError", "constructor", "message", "options", "name", "PothosSchemaError", "contextCacheSymbol", "Symbol", "for", "createContextCache", "create", "cache", "WeakMap", "context", "args", "cacheKey", "contextCacheSymbol", "has", "get", "entry", "set", "BasePlugin", "typeConfig", "fieldConfig", "valueConfig", "schema", "resolver", "subscribe", "resolveType", "isTypeOf", "runUnique", "runCache", "has", "set", "builder", "result", "cb", "PothosError", "requestDataMap", "constructor", "name", "buildCache", "options", "onTypeConfig", "reduceRight", "onInputFieldConfig", "plugins", "onOutputFieldConfig", "onEnumValueConfig", "beforeBuild", "afterBuild", "schema", "wrapResolve", "wrapSubscribe", "subscribe", "nextSubscribe", "wrapResolveType", "nextResolveType", "wrapIsTypeOf", "constructor", "buildCache", "_define_property", "outputShapeKey", "Symbol", "for", "parentShapeKey", "abstractReturnShapeKey", "inputShapeKey", "inputFieldShapeKey", "outputFieldShapeKey", "typeBrandKey", "toString", "constructor", "kind", "name", "_define_property", "ScalarRef", "BaseTypeRef", "constructor", "$inferType", "$inferInput", "_define_property", "outputShapeKey", "parentShapeKey", "inputShapeKey", "constructor", "type", "name", "_define_property", "_inputShapeKey", "InputListRef", "constructor", "required", "_define_property", "inputShapeKey", "$inferInput", "listType", "_outputShapeKey", "BaseTypeRef", "constructor", "listType", "String", "kind", "$inferType", "_define_property", "outputShapeKey", "parentShapeKey", "nullable", "normalizeEnumValues", "values", "result", "Array", "isArray", "forEach", "key", "String", "pothosOptions", "Object", "value", "Enum", "typeFromParam", "param", "configStore", "nullableOption", "itemNullable", "items", "nullable", "list", "Array", "isArray", "kind", "type", "ListRef", "listType", "ref", "getOutputTypeRef", "BaseTypeRef", "getTypeConfig", "graphqlKind", "name", "PothosSchemaError", "inputTypeFromParam", "param", "configStore", "requiredOption", "itemRequired", "items", "required", "list", "Array", "isArray", "kind", "type", "InputListRef", "listType", "ref", "getInputTypeRef", "BaseTypeRef", "getTypeConfig", "graphqlKind", "name", "PothosSchemaError", "assertNever", "value", "TypeError", "isThenable", "value", "then", "verifyRef", "ref", "undefined", "PothosSchemaError", "verifyInterfaces", "interfaces", "Array", "isArray", "iface", "getTypeBrand", "val", "typeBrandKey", "unwrapListParam", "param", "Array", "isArray", "ListRef", "InputListRef", "listType", "_define_property", "getTypeConfig", "baseConfig", "typeConfigs", "has", "set", "name", "typeConfig", "getInputTypeFieldConfigs", "builtType", "types", "PothosSchemaError", "fieldConfigs", "Object", "forEach", "fields", "getImplementers", "implementers", "iface", "configStore", "filter", "type", "kind", "buildAll", "buildTypeFromConfig", "GraphQLInputObjectType", "GraphQLObjectType", "config", "addType", "assertNever", "buildOutputTypeParam", "nullable", "GraphQLList", "GraphQLNonNull", "getOutputType", "buildInputTypeParam", "required", "getInputType", "ref", "buildFields", "fieldName", "outputFieldConfigs", "originalConfig", "updatedConfig", "get", "argMap", "argName", "args", "buildInputFields", "argConfigs", "resolve", "built", "extensions", "pothosResolveWrapped", "pothosSubscribeWrapped", "pothosOptions", "pothosConfig", "subscribe", "inputFieldConfigs", "getInterfaceFields", "getFields", "configs", "interfaceFields", "getObjectFields", "objectFields", "getRootFields", "GraphQLInterfaceType", "getInputFields", "getType", "GraphQLUnionType", "getTypeOfKind", "buildObject", "isTypeOf", "interfaces", "buildInterface", "typeBrand", "resolveType", "plugin", "wrapResolveType", "buildUnion", "parent", "typeBrandKey", "resultOrPromise", "context", "result", "map", "buildInputObject", "buildScalar", "GraphQLInt", "GraphQLFloat", "GraphQLBoolean", "GraphQLString", "GraphQLScalarType", "buildEnum", "original", "enumValueConfigs", "valueConfig", "GraphQLEnumType", "constructor", "options", "pluginMap", "pluginList", "Map", "builder", "plugins", "Plugin", "PothosError", "pluginName", "MergedPlugins", "BuildCache", "_inputShapeKey", "InputTypeRef", "constructor", "kind", "name", "$inferInput", "_define_property", "inputShapeKey", "_outputShapeKey", "OutputTypeRef", "BaseTypeRef", "constructor", "kind", "name", "$inferType", "_define_property", "outputShapeKey", "parentShapeKey", "_define_property", "hasConfig", "typeParam", "typeConfigs", "addUnionTypes", "onPrepare", "typeConfig", "graphqlKind", "PothosSchemaError", "types", "unionTypes", "addInterfaces", "interfaces", "addFieldRef", "args", "fieldRefs", "ref", "argRefs", "Object", "argName", "argRef", "fieldName", "argFor", "arg", "pendingFields", "has", "unresolvedArgType", "onTypeConfig", "checkArgs", "getConfig", "createFieldConfig", "config", "get", "PothosError", "name", "associateRefWithName", "refsToName", "pendingRefResolutions", "delete", "cbs", "forEach", "cb", "addTypeConfig", "getTypeConfig", "kind", "getInputTypeRef", "scalarsToRefs", "InputTypeRef", "newRef", "getOutputTypeRef", "OutputTypeRef", "set", "fieldRefCallbacks", "push", "getFields", "fields", "prepareForBuild", "pending", "pendingActions", "fn", "size", "addFields", "getImplementers", "implementers", "describeRef", "String", "usedBy", "fieldRef", "buildFields", "typeRef", "buildField", "fieldConfig", "field", "existingFields", "fieldRefsToConfigs", "constructor", "WeakMap", "Map", "GraphQLID", "GraphQLInt", "GraphQLFloat", "GraphQLString", "GraphQLBoolean", "scalars", "scalar", "BuiltinScalarRef", "ConfigStore", "InputFieldRef", "toString", "fieldName", "parentTypename", "constructor", "kind", "argFor", "$inferInput", "_define_property", "inputFieldShapeKey", "argBuilder", "builder", "protoKeys", "Object", "keys", "forEach", "configStore", "addFieldRef", "ref", "options", "name", "parentField", "kind", "graphqlKind", "parentType", "typeConfig", "type", "inputTypeFromParam", "pothosOptions", "description", "deprecationReason", "defaultValue", "extensions", "helper", "constructor", "typename", "_define_property", "listRef", "FieldRef", "toString", "parentTypename", "constructor", "kind", "fieldName", "$inferType", "_define_property", "outputFieldShapeKey", "createField", "options", "args", "Object", "keys", "argRef", "argName", "builder", "configStore", "resolve", "PothosSchemaError", "typename", "name", "defaultFieldResolver", "kind", "graphqlKind", "parentType", "typeConfig", "type", "pothosOptions", "extensions", "pothosOriginalResolve", "pothosOriginalSubscribe", "subscribe", "description", "deprecationReason", "exposeField", "pothosExposedField", "constructor", "_define_property", "options", "createField", "resolve", "undefined", "type", "listRef", "arg", "FieldBuilder", "RootFieldBuilder", "exposeBoolean", "name", "args", "options", "exposeField", "type", "exposeFloat", "exposeID", "exposeInt", "exposeString", "exposeBooleanList", "exposeFloatList", "exposeIDList", "exposeIntList", "exposeStringList", "expose", "InterfaceFieldBuilder", "FieldBuilder", "constructor", "name", "builder", "MutationFieldBuilder", "RootFieldBuilder", "constructor", "builder", "ObjectFieldBuilder", "FieldBuilder", "constructor", "name", "builder", "QueryFieldBuilder", "RootFieldBuilder", "constructor", "builder", "SubscriptionFieldBuilder", "RootFieldBuilder", "constructor", "builder", "_outputShapeKey", "BaseTypeRef", "constructor", "name", "$inferType", "$inferInput", "_define_property", "outputShapeKey", "inputShapeKey", "_inputShapeKey", "_define_property", "_inputShapeKey", "InputObjectRef", "constructor", "kind", "$inferInput", "inputShapeKey", "implement", "builder", "inputType", "constructor", "name", "_define_property", "_define_property", "_outputShapeKey", "InterfaceRef", "BaseTypeRef", "constructor", "kind", "$inferType", "outputShapeKey", "parentShapeKey", "_parentShapeKey", "implement", "builder", "constructor", "name", "_define_property", "_define_property", "_outputShapeKey", "ObjectRef", "BaseTypeRef", "constructor", "$inferType", "outputShapeKey", "parentShapeKey", "_parentShapeKey", "implement", "builder", "constructor", "name", "_define_property", "_outputShapeKey", "UnionRef", "BaseTypeRef", "constructor", "$inferType", "_define_property", "outputShapeKey", "parentShapeKey", "_parentShapeKey", "registerPlugin", "allowPluginReRegistration", "objectType", "verifyRef", "param", "verifyInterfaces", "name", "PothosSchemaError", "config", "kind", "graphqlKind", "interfaces", "description", "options", "extensions", "isTypeOf", "pothosOptions", "configStore", "addInterfaces", "associateRefWithName", "ObjectFieldBuilder", "t", "objectFields", "ref", "fields", "objectField", "fieldName", "queryType", "addTypeConfig", "queryFields", "queryField", "addFields", "field", "QueryFieldBuilder", "mutationType", "mutationFields", "mutationField", "MutationFieldBuilder", "subscriptionType", "subscriptionFields", "subscriptionField", "SubscriptionFieldBuilder", "args", "interfaceType", "BaseTypeRef", "InterfaceRef", "typename", "resolveType", "interfaceFields", "interfaceField", "InterfaceFieldBuilder", "unionType", "UnionRef", "Array", "isArray", "types", "forEach", "type", "addUnionTypes", "enumType", "EnumRef", "values", "scalarType", "ScalarRef", "parseLiteral", "parseValue", "serialize", "addScalarType", "scalar", "toConfig", "inputType", "InputObjectRef", "isOneOf", "inputRef", "ImplementableInputObjectRef", "objectRef", "ImplementableObjectRef", "interfaceRef", "ImplementableInterfaceRef", "toSchema", "directives", "scalars", "GraphQLID", "GraphQLInt", "GraphQLFloat", "GraphQLString", "GraphQLBoolean", "hasConfig", "buildCache", "beforeBuild", "buildAll", "builtTypes", "query", "mutation", "get", "subscription", "sortSchema", "processedSchema", "lexicographicSortSchema", "constructor", "defaultFieldNullability", "defaultInputFieldRequiredness", "_define_property", "SchemaBuilder", "SchemaBuilder", "SchemaBuilderClass", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "options", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "raw", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "app", "Node", "Node", "Hono", "builder", "Hono", "wrap", "wrap", "wrap", "facade"]
}
